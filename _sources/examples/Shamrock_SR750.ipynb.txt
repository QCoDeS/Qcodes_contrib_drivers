{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Qcodes example with Shamrock SR750"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T20:58:42.457836Z",
     "start_time": "2019-04-11T20:58:40.879678Z"
    }
   },
   "outputs": [],
   "source": [
    "from qcodes_contrib_drivers.drivers.Shamrock.SR750 import Shamrock_SR750"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialize the instrument"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T20:58:50.772667Z",
     "start_time": "2019-04-11T20:58:42.463836Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connected to: Shamrock None (serial:SR-2975, firmware:None) in 8.30s\n"
     ]
    }
   ],
   "source": [
    "shamrock = Shamrock_SR750(\"Shamrock\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-03-04T15:24:13.375324Z",
     "start_time": "2019-03-04T15:24:13.365324Z"
    }
   },
   "source": [
    "## Get the current spectrometer setup\n",
    "We read the current grating number, its blaze and groove density, the current central wavelength and the slit width."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T20:59:03.298920Z",
     "start_time": "2019-04-11T20:59:03.225912Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grating : 1 \n",
      "Blaze : 650 \n",
      "Groove density : 600 l/mm\n",
      "Wavelength : 600.0 nm\n",
      "Slit : 200 μm\n"
     ]
    }
   ],
   "source": [
    "print(shamrock.grating.label, ':', shamrock.grating.get(), shamrock.grating.unit)\n",
    "print(shamrock.blaze.label, ':', shamrock.blaze.get(), shamrock.blaze.unit)\n",
    "print(shamrock.groove_density.label, ':', shamrock.groove_density.get(), shamrock.groove_density.unit)\n",
    "print(shamrock.wavelength.label, ':', shamrock.wavelength.get(), shamrock.wavelength.unit)\n",
    "print(shamrock.slit.label, ':', shamrock.slit.get(), shamrock.slit.unit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change spectrometer setup\n",
    "We select another grating, change the central wavelength and change the slit width. Afterwards, we repeat the parameter reading."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T20:59:44.302020Z",
     "start_time": "2019-04-11T20:59:08.029393Z"
    }
   },
   "outputs": [],
   "source": [
    "shamrock.grating.set(2)\n",
    "shamrock.wavelength.set(756)\n",
    "shamrock.slit.set(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T20:59:46.416231Z",
     "start_time": "2019-04-11T20:59:46.332223Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grating : 2 \n",
      "Blaze : 675 \n",
      "Groove density : 1350 l/mm\n",
      "Wavelength : 756.0 nm\n",
      "Slit : 100 μm\n"
     ]
    }
   ],
   "source": [
    "print(shamrock.grating.label, ':', shamrock.grating.get(), shamrock.grating.unit)\n",
    "print(shamrock.blaze.label, ':', shamrock.blaze.get(), shamrock.blaze.unit)\n",
    "print(shamrock.groove_density.label, ':', shamrock.groove_density.get(), shamrock.groove_density.unit)\n",
    "print(shamrock.wavelength.label, ':', shamrock.wavelength.get(), shamrock.wavelength.unit)\n",
    "print(shamrock.slit.label, ':', shamrock.slit.get(), shamrock.slit.unit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Get spectrometer calibration\n",
    "We read the spectrometer calibration, i.e. the wavelength for each pixel on the CCD."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T21:00:00.542643Z",
     "start_time": "2019-04-11T21:00:00.533643Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[745.6130981445312,\n",
       " 745.6336059570312,\n",
       " 745.6541137695312,\n",
       " 745.674560546875,\n",
       " 745.695068359375,\n",
       " 745.715576171875,\n",
       " 745.736083984375,\n",
       " 745.756591796875,\n",
       " 745.777099609375,\n",
       " 745.7975463867188]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shamrock.calibration.get()[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Take a snapshot\n",
    "We take a snapshot of the instrument to get an overview of the current settings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T21:00:04.780067Z",
     "start_time": "2019-04-11T21:00:04.730062Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shamrock:\n",
      "\tparameter     value\n",
      "--------------------------------------------------------------------------------\n",
      "IDN            :\t{'vendor': 'Shamrock', 'serial': 'SR-2975'} \n",
      "blaze          :\t675 \n",
      "calibration    :\t[745.6130981445312, 745.6336059570312, 745.6541137695312, 74...\n",
      "grating        :\t2 \n",
      "groove_density :\t1350 (l/mm)\n",
      "slit           :\t100 (μm)\n",
      "wavelength     :\t756 (nm)\n"
     ]
    }
   ],
   "source": [
    "shamrock.print_readable_snapshot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Close the instrument"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-11T21:00:06.727262Z",
     "start_time": "2019-04-11T21:00:06.610250Z"
    }
   },
   "outputs": [],
   "source": [
    "shamrock.close()"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "nbsphinx": {
   "execute": "never"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
