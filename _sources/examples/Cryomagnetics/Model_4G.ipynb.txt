{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6c6b300b-e25b-4c69-bddd-4454d4df017d",
   "metadata": {},
   "source": [
    "# Example for Cyromagnetics Model 4G magnet power supply\n",
    "## as always with magnet supplies make sure you have the units as desired and the coil constant set properly before using"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9048603c-ab13-4ada-adf3-54469cb2c522",
   "metadata": {},
   "outputs": [],
   "source": [
    "import qcodes as qc\n",
    "from qcodes.station import Station\n",
    "from qcodes.dataset import load_or_create_experiment, initialise_database, Measurement\n",
    "from qcodes.dataset import plot_by_id\n",
    "from qcodes.dataset import do1d"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f524882-974c-4222-a3dc-91c9e56d44ec",
   "metadata": {},
   "source": [
    "# Import qcodes_contrib_drivers Model_4G driver"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5d1f242-f5cd-41fc-bbc9-354c1aecf878",
   "metadata": {},
   "outputs": [],
   "source": [
    "from qcodes_contrib_drivers.drivers.Cryomagnetics.Model_4G import Model_4G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "897462bb-4b1b-4c25-92cf-f283923decd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Connect to the instrument - this case GPIB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0f7279f7-5935-431f-9151-e68af011f415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The cyromag magnet power supply units have been set to KGauss.\n"
     ]
    }
   ],
   "source": [
    "magnet = Model_4G('Magnet',address = 'GPIB0::1::INSTR')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b804a313-af5a-4937-b850-11393e407b52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Magnet:\n",
      "\tparameter         value\n",
      "--------------------------------------------------------------------------------\n",
      "B                  :\tNone (kG)\n",
      "B_go               :\tNone (kG)\n",
      "IDN                :\t{'vendor': 'Cryomagnetics', 'model': '4G', 'serial': '46...\n",
      "field              :\tNone (kG)\n",
      "field_supply       :\tNone (kG)\n",
      "hilim              :\tNone (kG)\n",
      "lolim              :\tNone (kG)\n",
      "persistance_heater :\tNone \n",
      "rate_0             :\tNone (Amps/Sec)\n",
      "rate_1             :\tNone (Amps/Sec)\n",
      "rate_2             :\tNone (Amps/Sec)\n",
      "rate_3             :\tNone (Amps/Sec)\n",
      "rate_4             :\tNone (Amps/Sec)\n",
      "sweep              :\tNone (Amps/Sec)\n",
      "timeout            :\t5 (s)\n",
      "units              :\tNone \n"
     ]
    }
   ],
   "source": [
    "magnet.print_readable_snapshot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b5d5643e-c0f4-4875-9bfa-46c23856704b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'G'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "magnet.units() # default is Gauss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15bc5e89-f504-49f7-89cf-f96341bc20c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The field measured in the default units\n",
    "# Can be used as a set or get function (can change the field or just read the value)\n",
    "magnet.B() # read the value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2f26c7bf-7a20-4e77-8eed-dd000c3373d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "magnet.B(0.1) # set the value and go to it in same command"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "357200de-d645-4fb9-8144-67b1d6d7d13b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.051"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# does not set the field only waits until this value has be reached before exiting\n",
    "# useful for when continuously sweeping to final point and measuring at points along the way\n",
    "magnet.B_go()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2e9cc4e5-5a35-4b98-af15-9011906cbc4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sets the magnet upper limit but does not go to it\n",
    "magnet.hilim()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "24f27e17-04cb-4b18-b565-e8315370ca17",
   "metadata": {},
   "outputs": [],
   "source": [
    "# now you tell the magnet to go to upper limit value. Other options : 'UP', 'Up', 'up', 'DOWN', 'Down', 'down', 'Pause', 'PAUSE', 'pause', 'ZERO', 'Zero', 'zero'\n",
    "magnet.sweep('up')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a5e01d73-0174-49b2-92bf-17340078f20a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# turns on or off the persistance heater\n",
    "magnet.persistance_heater('off')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "221821ab-23d8-44b1-8d86-2955fd96ba4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "magnet.sweep('zero') # back to zero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ae52cb5-fdfe-4de0-8063-ca2a4e528305",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  },
  "nbsphinx": {
   "execute": "never"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
