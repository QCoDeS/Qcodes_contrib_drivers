{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "762bc51e-25e5-4020-bd15-c09a48ce76a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logging hadn't been started.\n",
      "Activating auto-logging. Current session state plus future input saved.\n",
      "Filename       : /home/jupyter-abi_g/.qcodes/logs/command_history.log\n",
      "Mode           : append\n",
      "Output logging : True\n",
      "Raw input log  : False\n",
      "Timestamping   : True\n",
      "State          : active\n",
      "Qcodes Logfile : /home/jupyter-abi_g/.qcodes/logs/250129-877027-qcodes.log\n"
     ]
    }
   ],
   "source": [
    "import logging as log\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "import qcodes as qc\n",
    "from qcodes.logger.logger import start_all_logging\n",
    "from qcodes.dataset import load_or_create_experiment, plot_dataset\n",
    "from qcodes.dataset.measurements import Measurement\n",
    "from qcodes.parameters import Parameter\n",
    "\n",
    "from qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM import M81_SSM\n",
    "\n",
    "#start logging\n",
    "start_all_logging()\n",
    "log = log.getLogger()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d66d48a0-943c-43ee-8224-82c6c47f3de0",
   "metadata": {},
   "source": [
    "## Connect to M81"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "39adccbd-1c07-4d97-b91b-4589b3a1f03c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connected to: Lake Shore M81-6 (serial:LSA2PIC, firmware:2.1.2024120307) in 0.32s\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    M81 = M81_SSM('M81','TCPIP::172.16.133.41::7777::SOCKET')\n",
    "    M81.timeout(1)\n",
    "except Exception as err:\n",
    "    log.critical(err)\n",
    "    print(f'Connection failed: {err}')\n",
    "\n",
    "exp = load_or_create_experiment(experiment_name='M81 example')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "610dfc01-68ca-46de-9243-2320aee48d12",
   "metadata": {},
   "source": [
    "#### Add M81 to station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "618b5604-6bfb-4d26-b376-7c3e253772da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'M81'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "station = qc.Station()\n",
    "station.add_component(M81)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d481c72-d246-44fe-8564-3fdc9aa9a85a",
   "metadata": {},
   "source": [
    "#### View modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "781b3622-0d72-4c7b-8045-473e46c70adf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitted with 3 channel(s)\n",
      "Source (S):\n",
      "\t1 : \"VS-10\"\n",
      "\t2 : \"VS-10\"\n",
      "\t3 : \"BCS-10\"\n",
      "Sense  (M):\n",
      "\t1 : \"CM-10\"\n",
      "\t2 : \"CM-10\"\n",
      "\t3 : \"VM-10\"\n"
     ]
    }
   ],
   "source": [
    "M81.show_system_info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "144fdffc-c08e-4909-bc0d-3bc39c31b3bd",
   "metadata": {},
   "source": [
    "#### Configure S3 and print snapshot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3b0d7995-a343-4bb7-929c-6c7c375c2a13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M81_BCS_10:\n",
      "\tparameter                value\n",
      "--------------------------------------------------------------------------------\n",
      "cmf_enabled               :\tTrue \n",
      "cmf_node                  :\tINTERNAL \n",
      "coupling                  :\tDC \n",
      "coupling_auto_enabled     :\tTrue \n",
      "current_autorange_enabled :\tTrue \n",
      "current_high_limit        :\t0.1 (A)\n",
      "current_low_limit         :\t-0.05 (A)\n",
      "current_offset            :\t0 (A)\n",
      "current_peak_amplitude    :\t0.1 (A)\n",
      "current_range             :\t0.1 (A)\n",
      "current_rms_amplitude     :\t0.070711 (A RMS)\n",
      "disable_on_compliance     :\tFalse \n",
      "frequency                 :\t11 (Hz)\n",
      "guard_state               :\tTrue \n",
      "model                     :\tBCS-10 \n",
      "output_enabled            :\tFalse \n",
      "serial                    :\tLSA2OE9 \n",
      "shape                     :\tSINUSOID \n",
      "synchronize_enabled       :\tFalse \n",
      "synchronize_phase         :\t0 (Â°)\n",
      "synchronize_source        :\tS1 \n"
     ]
    }
   ],
   "source": [
    "M81.S3.shape('SINUSOID')\n",
    "M81.S3.current_low_limit(-0.05)\n",
    "M81.S3.current_high_limit(0.1)\n",
    "M81.S3.current_peak_amplitude(0.1)\n",
    "\n",
    "M81.S3.print_readable_snapshot(update = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6638aa8e-dc4c-4f50-b6fa-fb8d111fdc81",
   "metadata": {},
   "source": [
    "#### Configure M1 and print snapshot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8e13eb12-1b7d-4ef3-8b0f-87864b99f0f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M81_CM_10:\n",
      "\tparameter                    value\n",
      "--------------------------------------------------------------------------------\n",
      "bias_voltage                  :\t0 (V)\n",
      "bias_voltage_enabled          :\tTrue \n",
      "calculated_resistance_source  :\tS1 \n",
      "current_autorange_enabled     :\tFalse \n",
      "current_range                 :\t1e-07 (A)\n",
      "frequency_range_threshold     :\t10 (% of -3 db)\n",
      "input_filter_enabled          :\tFalse \n",
      "input_filter_highpass_cutoff  :\tNONE (Hz)\n",
      "input_filter_highpass_rolloff :\t6 (dB/octave)\n",
      "input_filter_lowpass_cutoff   :\tNONE (Hz)\n",
      "input_filter_lowpass_rolloff  :\t6 (dB/octave)\n",
      "input_filter_optimization     :\tNOISE \n",
      "mode                          :\tDC \n",
      "model                         :\tCM-10 \n",
      "nplc                          :\t10 \n",
      "serial                        :\tLSA2NS5 \n"
     ]
    }
   ],
   "source": [
    "M81.M1.mode('DC')\n",
    "\n",
    "M81.M1.print_readable_snapshot(update = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "979d2997-e08d-4b33-9818-df32d159185e",
   "metadata": {},
   "source": [
    "#### Read DC value from M1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bb71546a-f0fb-4073-96dd-badaf118cd52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.24865750102757e-11"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M81.M1.read_DC()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94462ca0-53d9-4dd7-a4d8-cd3857068959",
   "metadata": {},
   "source": [
    "#### Run IV curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78058410-778c-41bc-8ada-7267e10c64be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 13. \n",
      "GUID: 4fc39ec5-0000-0000-0000-0193728ba050\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([<Axes: title={'center': 'Run #13, Experiment M81 example (some_sample)'}, xlabel='current (mA)', ylabel='voltage (mV)'>],\n",
       " [None])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "meas = Measurement()\n",
    "\n",
    "current = Parameter('current',\n",
    "                    label='current',\n",
    "                    unit='A')\n",
    "\n",
    "voltage = Parameter('voltage',\n",
    "                         label='voltage',\n",
    "                         unit='V')\n",
    "\n",
    "meas.register_parameter(current)\n",
    "meas.register_parameter(voltage, setpoints=[current])\n",
    "\n",
    "M81.S1.output_on()\n",
    "\n",
    "with meas.run() as datasaver:\n",
    "    meas_guid = datasaver.dataset.guid\n",
    "    print(f'GUID: {meas_guid}')\n",
    "\n",
    "    for x in np.linspace(-0.001, 0.001, 21):\n",
    "        M81.S1.current_peak_amplitude(x)\n",
    "        time.sleep(0.5)\n",
    "\n",
    "        # read parameters\n",
    "        curr = M81.S1.current_peak_amplitude()\n",
    "        volt = M81.M1.read_DC()\n",
    "\n",
    "\n",
    "        datasaver.add_result((current, curr),\n",
    "                             (voltage, volt)\n",
    "                            )\n",
    "\n",
    "dataset = datasaver.dataset\n",
    "\n",
    "M81.S1.output_off()\n",
    "plot_dataset(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f321977e-0db4-4ef9-95f4-7839fd0cae0a",
   "metadata": {},
   "source": [
    "#### Data Streaming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "20fd4ac9-8e70-4dde-b017-63bc1b8ff4f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Streaming...\n",
      "Buffered points: 256         \n",
      "All data collected.\n"
     ]
    }
   ],
   "source": [
    "rate = 100\n",
    "num_points = 2**8\n",
    "\n",
    "data = M81.stream_data(rate, num_points, ('RTIMe',1),('SAMPlitude',1),('MDC',1), transpose_data=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f96e26ea-bf24-4628-9308-5dce88743c13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting experimental run with id: 18. \n",
      "Streaming...\n",
      "Finished Streaming\n",
      "All data collected.\n",
      "Saving data...\n",
      "Data saved.\n"
     ]
    }
   ],
   "source": [
    "meas = Measurement()\n",
    "\n",
    "timestamp = Parameter('timestamp',\n",
    "                    label='timestamp',\n",
    "                    unit='s')\n",
    "\n",
    "current = Parameter('current',\n",
    "                    label='current',\n",
    "                    unit='A')\n",
    "\n",
    "voltage = Parameter('voltage',\n",
    "                         label='voltage',\n",
    "                         unit='V')\n",
    "\n",
    "meas.register_parameter(timestamp)\n",
    "meas.register_parameter(current, setpoints=[timestamp])\n",
    "meas.register_parameter(voltage, setpoints=[timestamp])\n",
    "\n",
    "M81.S1.output_on()\n",
    "\n",
    "with meas.run() as datasaver:\n",
    "    try:\n",
    "        data = M81.stream_data(rate, num_points, ('RTIMe',1),('SAMPlitude',1),('MDC',1))\n",
    "\n",
    "        print('Saving data...')\n",
    "        for i in range(0, len(data[0]), 1):\n",
    "\n",
    "            # read parameters\n",
    "            t = data[0][int(i)]\n",
    "            i = data[1][int(i)]\n",
    "            v = data[2][int(i)]\n",
    "\n",
    "\n",
    "            # add data to measurement table\n",
    "            datasaver.add_result((timestamp, t),\n",
    "                                 (current, i),\n",
    "                                 (voltage, v),\n",
    "                                 )\n",
    "    except Exception as err:\n",
    "        log.critical(err)\n",
    "        print(f'Error: {err}')\n",
    "\n",
    "dataset = datasaver.dataset\n",
    "print('Data saved.')\n",
    "\n",
    "M81.S1.output_off()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34091caf-7875-40d4-83e3-2bb9bdac6c0b",
   "metadata": {},
   "source": [
    "### Close connection to M81"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ca581bae-58a6-49c2-9a00-7bd3f28b803e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connection closed to M81.\n"
     ]
    }
   ],
   "source": [
    "M81.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "effd0484-a48b-4094-8d5a-bcfb47a2102c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  },
  "nbsphinx": {
    "execute": "never"
   }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
