Search.setIndex({"alltitles": {"1D SWEEPER FUNCTIONS": [[120, "1D-SWEEPER-FUNCTIONS"]], "2D measurement example using do2d": [[84, "2D-measurement-example-using-do2d"]], "2D scan": [[86, "2D-scan"]], "Add M81 to station": [[79, "Add-M81-to-station"]], "Addressing multiple channels": [[86, "Addressing-multiple-channels"]], "Aliasing channel names": [[81, "Aliasing-channel-names"]], "Analog (amplitude / phase / frequency) modulation": [[82, "Analog-(amplitude-/-phase-/-frequency)-modulation"]], "Arrangements": [[108, "Arrangements"]], "Autosave": [[108, "Autosave"]], "Basic QDAC Usage": [[86, "Basic-QDAC-Usage"]], "CLOSE THE CONNECTION": [[120, "CLOSE-THE-CONNECTION"]], "Change spectrometer setup": [[116, "Change-spectrometer-setup"]], "Change the position": [[128, "Change-the-position"], [129, "Change-the-position"]], "Changing the Sensitivity": [[115, null]], "Check current to field conversion": [[78, "Check-current-to-field-conversion"]], "Checking the active terminal": [[125, "Checking-the-active-terminal"]], "Clean up resources": [[126, "Clean-up-resources"]], "Close connection to M81": [[79, "Close-connection-to-M81"]], "Close instrument": [[63, "Close-instrument"], [69, "Close-instrument"], [128, "Close-instrument"], [129, "Close-instrument"], [131, "Close-instrument"]], "Close the instrument": [[61, "Close-the-instrument"], [77, "Close-the-instrument"], [82, "Close-the-instrument"], [116, "Close-the-instrument"]], "Closing the connection": [[111, "Closing-the-connection"], [132, "Closing-the-connection"]], "Communication performance": [[68, "Communication-performance"]], "Configure M1 and print snapshot": [[79, "Configure-M1-and-print-snapshot"]], "Configure S3 and print snapshot": [[79, "Configure-S3-and-print-snapshot"]], "Connect different channels on the switch": [[81, "Connect-different-channels-on-the-switch"]], "Connect to M81": [[79, null]], "Connect to device": [[118, "Connect-to-device"]], "Connect to the instrument - this case GPIB": [[66, "Connect-to-the-instrument---this-case-GPIB"]], "Connecting to device": [[65, "Connecting-to-device"]], "Connections": [[107, "Connections"]], "Contents:": [[136, null]], "Contributing": [[136, "contributing"]], "DAQAnalogInputs": [[80, "DAQAnalogInputs"]], "DAQAnalogOutputs": [[80, "DAQAnalogOutputs"]], "DECS<->VISA": [[84, "DECS<->VISA"]], "Data Streaming": [[79, "Data-Streaming"]], "Default branch is now main": [[136, "default-branch-is-now-main"]], "Device connection": [[117, "Device-connection"]], "Disconnecting": [[127, "Disconnecting"]], "Drivers documentation": [[136, "drivers-documentation"]], "Example for Cyromagnetics Model 4G magnet power supply": [[67, null]], "Example for Cyromagnetics Model LM-500 Helium Level meter": [[66, null]], "Example for Horiba FHR": [[72, null]], "Example for Single Quantum SNSPD": [[119, null]], "Example notebook for AimTTi EL320P": [[60, null]], "Example notebook for Keithley 6430 SMU": [[74, null]], "Example notebook for the Holzworth HS900B RF synthesizer": [[71, null]], "Example of Proteox Control using QCoDeS driver": [[84, "Example-of-Proteox-Control-using-QCoDeS-driver"]], "Example of Signal Recovery 7270 driver usage": [[118, null]], "Example of the oxford triton driver": [[85, null]], "Example with CopperMountain Model M5180 vector network analyzer": [[65, null]], "Example with ERASynth": [[68, null]], "Example with Lakeshore Model 625 Superconducting Magnet power supply": [[78, null]], "Example with the Agilent N9000A": [[59, null]], "Example with the BlueFors": [[64, null]], "Example with the iTest from Bilt": [[73, null]], "Example with the microwave source SC5521A from Signal Core": [[117, null]], "Examples of how to use drivers": [[135, null]], "Field": [[78, "Field"]], "GET/SET CHANNELS VALUES THROUGH PARAMETERS": [[120, "GET/SET-CHANNELS-VALUES-THROUGH-PARAMETERS"]], "Gate Leakage Test": [[92, null]], "Gate Leakage using multiple QDAC-IIs": [[93, null]], "Generate a pulsed signal": [[82, "Generate-a-pulsed-signal"]], "Generate a signal": [[82, "Generate-a-signal"]], "Generate and enqueue waveforms": [[75, "Generate-and-enqueue-waveforms"], [76, "Generate-and-enqueue-waveforms"]], "Get spectrometer calibration": [[116, "Get-spectrometer-calibration"]], "Get the current spectrometer setup": [[116, "Get-the-current-spectrometer-setup"]], "Getting started": [[136, "getting-started"]], "Heater configuration": [[77, "Heater-configuration"]], "Import": [[59, "Import"], [64, "Import"], [73, "Import"]], "Import qcodes_contrib_drivers LM_500 driver": [[66, "Import-qcodes_contrib_drivers-LM_500-driver"]], "Import qcodes_contrib_drivers Model_4G driver": [[67, "Import-qcodes_contrib_drivers-Model_4G-driver"]], "Imports": [[85, "Imports"]], "Indices and tables": [[136, "indices-and-tables"]], "Initialisation": [[86, "Initialisation"], [127, "Initialisation"]], "Initialization": [[126, "Initialization"]], "Initialization and Connection": [[125, "Initialization-and-Connection"]], "Initialize instrument": [[63, "Initialize-instrument"], [77, "Initialize-instrument"], [121, "Initialize-instrument"]], "Initialize the instrument": [[61, "Initialize-the-instrument"], [82, "Initialize-the-instrument"], [116, "Initialize-the-instrument"], [128, "Initialize-the-instrument"], [129, "Initialize-the-instrument"], [131, "Initialize-the-instrument"]], "Initialize the instrument using its ASRL address": [[69, "Initialize-the-instrument-using-its-ASRL-address"]], "Initiallization": [[59, "Initiallization"], [73, "Initiallization"]], "Installation": [[136, "installation"]], "Instrument and station initialization": [[133, "Instrument-and-station-initialization"]], "Keysight M3202A AWG": [[75, null]], "Keysight M3202A AWG example with digitizer": [[76, null]], "LICENSE": [[136, "license"]], "Let\u2019s have a look at other parameters": [[78, "Let's-have-a-look-at-other-parameters"]], "Load instrument": [[59, "Load-instrument"], [64, "Load-instrument"], [73, "Load-instrument"], [85, "Load-instrument"]], "Look at the names and the labels of the Sxx parameters": [[65, "Look-at-the-names-and-the-labels-of-the-Sxx-parameters"]], "Magnet Control": [[84, "Magnet-Control"]], "Manipulation by numbers": [[108, "Manipulation-by-numbers"]], "Measure a trace": [[65, "Measure-a-trace"]], "Measure resistance of a ~100k\\Omega resistor": [[74, "Measure-resistance-of-a-~100k\\Omega-resistor"]], "Measurement": [[59, "Measurement"], [73, "Measurement"]], "Measurements": [[122, "Measurements"]], "Measurements using trigger": [[115, "Measurements-using-trigger"]], "Model with many channels": [[131, "Model-with-many-channels"]], "Module contents": [[0, "module-qcodes_contrib_drivers.drivers"], [1, "module-qcodes_contrib_drivers.drivers.Advantech"], [2, "module-qcodes_contrib_drivers.drivers.Agilent"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi"], [4, "module-qcodes_contrib_drivers.drivers.Ametek"], [5, "module-qcodes_contrib_drivers.drivers.Andor"], [6, "module-qcodes_contrib_drivers.drivers.Attocube"], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"], [8, "module-qcodes_contrib_drivers.drivers.Aviosys"], [9, "module-qcodes_contrib_drivers.drivers.Bilt"], [10, "module-qcodes_contrib_drivers.drivers.BlueFors"], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain"], [12, "module-qcodes_contrib_drivers.drivers.Cryocon"], [13, "module-qcodes_contrib_drivers.drivers.Cryogenic"], [14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions"], [15, "module-qcodes_contrib_drivers.drivers.ERAInstruments"], [16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"], [17, "module-qcodes_contrib_drivers.drivers.Gentec"], [18, "module-qcodes_contrib_drivers.drivers.Holzworth"], [19, "module-qcodes_contrib_drivers.drivers.Horiba"], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private"], [21, "module-qcodes_contrib_drivers.drivers.Keysight"], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore"], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules"], [25, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics"], [26, "module-qcodes_contrib_drivers.drivers.M2"], [27, "module-qcodes_contrib_drivers.drivers.Minicircuits"], [28, "module-qcodes_contrib_drivers.drivers.MontanaInstruments"], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments"], [30, "module-qcodes_contrib_drivers.drivers.Newport"], [31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments"], [32, "module-qcodes_contrib_drivers.drivers.QDevil"], [33, "module-qcodes_contrib_drivers.drivers.QphoX"], [34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController"], [35, "module-qcodes_contrib_drivers.drivers.QuTech"], [36, "module-qcodes_contrib_drivers.drivers.Rigol"], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"], [38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"], [39, "module-qcodes_contrib_drivers.drivers.SPECS"], [40, "module-qcodes_contrib_drivers.drivers.Shamrock"], [41, "module-qcodes_contrib_drivers.drivers.Siglent"], [42, "module-qcodes_contrib_drivers.drivers.SignalCore"], [43, "module-qcodes_contrib_drivers.drivers.SingleQuantum"], [44, "module-qcodes_contrib_drivers.drivers.Spectrum"], [45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"], [46, "module-qcodes_contrib_drivers.drivers.Standa"], [47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"], [48, "module-qcodes_contrib_drivers.drivers.SwabianInstruments"], [49, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private"], [50, "module-qcodes_contrib_drivers.drivers.Tektronix"], [51, "module-qcodes_contrib_drivers.drivers.Thermotek"], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs"], [53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private"], [54, "module-qcodes_contrib_drivers.drivers.Valon"], [55, "module-qcodes_contrib_drivers.drivers.Vaunix"], [56, "module-qcodes_contrib_drivers.drivers.Windfreak"], [57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"], [58, "module-qcodes_contrib_drivers.drivers.physik_instrumente"]], "Monitors": [[108, "Monitors"]], "More settings": [[70, "More-settings"]], "Moving home": [[126, "Moving-home"]], "Moving the rotator": [[126, "Moving-the-rotator"]], "Moving to certain position": [[126, "Moving-to-certain-position"]], "Moving to certain position (asynchronously)": [[126, "Moving-to-certain-position-(asynchronously)"]], "NANONIS TRAMEA EXAMPLES": [[120, null]], "National Instruments Multifunction DAQ example": [[80, null]], "Non-buffer measurements": [[115, "Non-buffer-measurements"]], "Output a SYNC pulse": [[86, "Output-a-SYNC-pulse"]], "Overview of channels": [[86, "Overview-of-channels"]], "Parameters definition": [[133, "Parameters-definition"]], "Performing simple measurements": [[125, "Performing-simple-measurements"]], "Plot": [[133, "Plot"], [133, "id1"]], "Preparing for reading the buffer and measurement": [[115, "Preparing-for-reading-the-buffer-and-measurement"]], "Prerequisites": [[136, "prerequisites"]], "Print a snapshot": [[81, "Print-a-snapshot"]], "Proteox system integration with QCoDeS": [[84, null]], "PyVisa direct use of QDAC-II": [[96, null]], "QCoDeS Example with Gentec Maestro": [[69, null]], "QCoDeS Example with HP8594E": [[70, null]], "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller": [[83, null]], "QCoDeS Example with QDevil_QDAC": [[86, null]], "QCoDeS Example with R&S HMC 8043 Power Supply": [[112, null]], "QCoDeS Example with R&S HMP4040 Power Supply": [[113, null]], "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500": [[125, null]], "QCoDeS contrib drivers": [[136, "qcodes-contrib-drivers"]], "QCoDeS example with Attocube ANC300": [[62, null]], "QCoDeS example with Rigol DSG3136B": [[111, null]], "QCoDeS example with Rohe&Schwarz SMW200A": [[114, null]], "QCoDeS example with Thorlabs KLS1550 laser source": [[127, null]], "QCoDeS example with Valon 5015": [[130, null]], "QCoDeS example with Windfreak SynthUSB3": [[132, null]], "QCoDeS examples of how to use QDAC-I": [[87, null]], "QCoDeS examples of how to use QDAC-II": [[106, null]], "QCoDeS examples of how to use QSwitch": [[109, null]], "QDAC-II 1D & 2D scan": [[97, null]], "QDAC-II 2D diode scan": [[98, null], [105, null]], "QDAC-II arbitrary-waveform generator": [[88, null]], "QDAC-II constant voltage": [[90, null]], "QDAC-II debugging": [[91, null]], "QDAC-II multiple generators per channel": [[95, null]], "QDAC-II sine waves": [[99, null]], "QDAC-II square waves": [[100, null]], "QDAC-II triangle waves": [[103, null]], "QDAC-II trigger chaining": [[89, null]], "QDAC-II virtual gates": [[104, null]], "QDAC-II voltage lists": [[94, null]], "QDAC-II voltage sweep": [[101, null]], "QDevil drivers": [[110, null]], "QSwitch debugging": [[107, null]], "QSwitch usage": [[108, null]], "Qcodes example for National Instruments PXIe-2597 RF Switch": [[81, null]], "Qcodes example for Vaunix LDA step attenuator": [[131, null]], "Qcodes example with Andor DU401 BU2": [[61, null]], "Qcodes example with Aviosys IP Power 9258S": [[63, null]], "Qcodes example with Lakeshore 311": [[77, null]], "Qcodes example with Shamrock SR750": [[116, null]], "Qcodes example with Standa 10MWA168": [[121, null]], "Qcodes example with Swabian Instruments Time Tagger": [[122, null]], "Qcodes example with Thorlabs K10CR1": [[126, null]], "Qcodes example with Thorlabs MFF10x": [[128, null]], "Qcodes example with Thorlabs PRM1Z8": [[129, null]], "Qcodes example with the NI RFSG signal generator driver": [[82, null]], "Quench detection": [[78, "Quench-detection"]], "Querying the active terminal": [[125, "Querying-the-active-terminal"]], "Ramp a single channel step by step and record and plot the current sensor reading": [[86, "Ramp-a-single-channel-step-by-step-and-record-and-plot-the-current-sensor-reading"]], "Ramp one or more channels simultaneously": [[86, "Ramp-one-or-more-channels-simultaneously"]], "Ramp rate": [[78, "Ramp-rate"]], "Read DC value from M1": [[79, "Read-DC-value-from-M1"]], "Read temperatures": [[77, "Read-temperatures"]], "Read the current position": [[128, "Read-the-current-position"], [129, "Read-the-current-position"]], "Read the laser power": [[69, "Read-the-laser-power"]], "Read the power status": [[63, "Read-the-power-status"]], "Readout instrument parameters": [[85, "Readout-instrument-parameters"]], "Resetting the driver and the QDAC": [[86, "Resetting-the-driver-and-the-QDAC"]], "Retrieve digitizer data and plot result": [[76, "Retrieve-digitizer-data-and-plot-result"]], "Rohde & Schwarz ZVL13 Vector Network Analyzer example": [[133, null]], "Run IV curve": [[79, "Run-IV-curve"]], "Run a self test": [[68, "Run-a-self-test"]], "Running a 1D scan": [[111, "Running-a-1D-scan"]], "SIGNALS FUNCTIONS": [[120, "SIGNALS-FUNCTIONS"]], "Save settings": [[131, "Save-settings"]], "Set": [[73, "Set"]], "Set a frequency and turn on": [[68, "Set-a-frequency-and-turn-on"]], "Set parameters": [[117, "Set-parameters"], [131, "Set-parameters"]], "Set the power status": [[63, "Set-the-power-status"]], "Set the wavelength to get the right calibration": [[69, "Set-the-wavelength-to-get-the-right-calibration"]], "Setting the laser output power": [[127, "Setting-the-laser-output-power"]], "Setting up the experiment": [[111, "Setting-up-the-experiment"]], "Setting voltages and reading currents": [[86, "Setting-voltages-and-reading-currents"]], "Setup": [[111, "Setup"], [132, "Setup"]], "Setup and testing": [[111, "Setup-and-testing"], [132, "Setup-and-testing"]], "Setup db and station for test measurerment": [[65, "Setup-db-and-station-for-test-measurerment"], [118, "Setup-db-and-station-for-test-measurerment"]], "Smooth ramping between voltages": [[86, "Smooth-ramping-between-voltages"]], "Start, Stop, Center and Span": [[70, "Start,-Stop,-Center-and-Span"]], "Stop RF generation": [[82, "Stop-RF-generation"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [25, "submodules"], [26, "submodules"], [27, "submodules"], [28, "submodules"], [29, "submodules"], [30, "submodules"], [31, "submodules"], [32, "submodules"], [34, "submodules"], [35, "submodules"], [36, "submodules"], [37, "submodules"], [38, "submodules"], [39, "submodules"], [40, "submodules"], [41, "submodules"], [42, "submodules"], [43, "submodules"], [44, "submodules"], [45, "submodules"], [46, "submodules"], [47, "submodules"], [48, "submodules"], [49, "submodules"], [50, "submodules"], [51, "submodules"], [52, "submodules"], [53, "submodules"], [54, "submodules"], [55, "submodules"], [56, "submodules"], [57, "submodules"], [58, "submodules"]], "Subpackages": [[0, "subpackages"], [6, "subpackages"], [19, "subpackages"], [21, "subpackages"], [23, "subpackages"], [33, "subpackages"], [37, "subpackages"], [44, "subpackages"], [48, "subpackages"], [52, "subpackages"]], "Sweep mode": [[68, "Sweep-mode"]], "Synchronise multiple QDAC-IIs": [[102, null]], "Synchronized measurements": [[122, "Synchronized-measurements"]], "Take a snapshot": [[61, "Take-a-snapshot"], [82, "Take-a-snapshot"], [116, "Take-a-snapshot"]], "Take a spectrum in the accumulate acquisition mode": [[61, "Take-a-spectrum-in-the-accumulate-acquisition-mode"]], "Take a spectrum in the single scan acquisition mode": [[61, "Take-a-spectrum-in-the-single-scan-acquisition-mode"]], "Tektronix AFG3000 series arbitrary function generator": [[123, null]], "Temperature sensors": [[86, "Temperature-sensors"]], "Test basic parameters": [[132, "Test-basic-parameters"]], "Test the connection": [[111, "Test-the-connection"], [132, "Test-the-connection"]], "Test the output state": [[132, "Test-the-output-state"]], "Testing basic parameters": [[111, "Testing-basic-parameters"]], "The test controller is equiped with two ANM150 axis modules": [[62, "The-test-controller-is-equiped-with-two-ANM150-axis-modules"]], "The \u201cmode\u201d parameter: controlling voltage and current ranges:": [[86, "The-%22mode%22-parameter:-controlling-voltage-and-current-ranges:"]], "This is the power supply used for the Bluefors 4 K stage warmup heater.": [[60, "This-is-the-power-supply-used-for-the-Bluefors-4-K-stage-warmup-heater."]], "Trace acquisition in Network Analyzer Mode": [[133, "Trace-acquisition-in-Network-Analyzer-Mode"]], "Trace acquisition in Spectrum Analyzer Mode": [[133, "Trace-acquisition-in-Spectrum-Analyzer-Mode"]], "Transfer type": [[70, "Transfer-type"]], "Trigger AWGs": [[75, "Trigger-AWGs"]], "Trigger AWGs and digitizer": [[76, "Trigger-AWGs-and-digitizer"]], "Turn of all sockets": [[63, "Turn-of-all-sockets"]], "Turning the laser output on/off": [[127, "Turning-the-laser-output-on/off"]], "Upload an arbitrary waveform to the AFG and output it": [[123, "Upload-an-arbitrary-waveform-to-the-AFG-and-output-it"]], "Usage of the two main parameters": [[124, "Usage-of-the-two-main-parameters"]], "Using the 2000-SCAN scanning card": [[125, "Using-the-2000-SCAN-scanning-card"]], "Using the instrument in an experiment": [[111, "Using-the-instrument-in-an-experiment"]], "Using the instrument\u2019s sweep mode": [[111, "Using-the-instrument's-sweep-mode"]], "View modules": [[79, "View-modules"]], "Virtual Channels": [[122, "Virtual-Channels"]], "Welcome to QCoDeS Contributed Drivers\u2019s documentation!": [[136, null]], "When \u201cmode\u201d change results in change of voltage range": [[86, "When-%22mode%22-change-results-in-change-of-voltage-range"]], "Zurich Instruments HF2LI example": [[134, null]], "as always with magnet supplies make sure you have the units as desired and the coil constant set properly before using": [[67, "as-always-with-magnet-supplies-make-sure-you-have-the-units-as-desired-and-the-coil-constant-set-properly-before-using"]], "configure digitizer to capture signals": [[76, "configure-digitizer-to-capture-signals"]], "overview over all parameters": [[124, null]], "qcodes_contrib_drivers.drivers package": [[0, null]], "qcodes_contrib_drivers.drivers.Advantech package": [[1, null]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751 module": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"]], "qcodes_contrib_drivers.drivers.Agilent package": [[2, null]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A module": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.AimTTi package": [[3, null]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P module": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"]], "qcodes_contrib_drivers.drivers.Ametek package": [[4, null]], "qcodes_contrib_drivers.drivers.Ametek.SR_7270 module": [[4, "module-qcodes_contrib_drivers.drivers.Ametek.SR_7270"]], "qcodes_contrib_drivers.drivers.Andor package": [[5, null]], "qcodes_contrib_drivers.drivers.Andor.DU401 module": [[5, "module-qcodes_contrib_drivers.drivers.Andor.DU401"]], "qcodes_contrib_drivers.drivers.Attocube package": [[6, null]], "qcodes_contrib_drivers.drivers.Attocube.AMC100 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.AMC100"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package": [[7, null]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface module": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3 module": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4 module": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"]], "qcodes_contrib_drivers.drivers.Aviosys package": [[8, null]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S module": [[8, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Bilt package": [[9, null]], "qcodes_contrib_drivers.drivers.Bilt.ITest module": [[9, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"]], "qcodes_contrib_drivers.drivers.BlueFors package": [[10, null]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors module": [[10, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"]], "qcodes_contrib_drivers.drivers.CMTS5048 module": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048"]], "qcodes_contrib_drivers.drivers.CopperMountain package": [[11, null]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180 module": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048 module": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"]], "qcodes_contrib_drivers.drivers.Cryocon package": [[12, null]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26 module": [[12, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic package": [[13, null]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C module": [[13, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.DaylightSolutions package": [[14, null]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat module": [[14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat"]], "qcodes_contrib_drivers.drivers.ERAInstruments package": [[15, null]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth module": [[15, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave package": [[16, null]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349 module": [[16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"]], "qcodes_contrib_drivers.drivers.Gentec package": [[17, null]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro module": [[17, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Holzworth package": [[18, null]], "qcodes_contrib_drivers.drivers.Holzworth.HS900 module": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B module": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"]], "qcodes_contrib_drivers.drivers.Horiba package": [[19, null]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR module": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR"]], "qcodes_contrib_drivers.drivers.Horiba.private package": [[20, null]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client module": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server module": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server"]], "qcodes_contrib_drivers.drivers.Keysight package": [[21, null]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211 module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common package": [[22, null]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"]], "qcodes_contrib_drivers.drivers.Lakeshore package": [[23, null]], "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM module": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331 module": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625 module": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules package": [[24, null]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10 module": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.cm10 module": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.cm10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase module": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase module": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase module": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.vm10 module": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.vm10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10 module": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics package": [[25, null]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G module": [[25, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G"]], "qcodes_contrib_drivers.drivers.M2 package": [[26, null]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3 module": [[26, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3"]], "qcodes_contrib_drivers.drivers.Minicircuits package": [[27, null]], "qcodes_contrib_drivers.drivers.Minicircuits.ZTM module": [[27, "module-qcodes_contrib_drivers.drivers.Minicircuits.ZTM"]], "qcodes_contrib_drivers.drivers.MontanaInstruments package": [[28, null]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation module": [[28, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation"]], "qcodes_contrib_drivers.drivers.NationalInstruments package": [[29, null]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597 module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654 module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.visa_types module": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"]], "qcodes_contrib_drivers.drivers.Newport package": [[30, null]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8 module": [[30, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"]], "qcodes_contrib_drivers.drivers.OxfordInstruments package": [[31, null]], "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200 module": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120 module": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox module": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton module": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Triton"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox module": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox"]], "qcodes_contrib_drivers.drivers.QDevil package": [[32, null]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1 module": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2 module": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array module": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QSwitch module": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QSwitch"]], "qcodes_contrib_drivers.drivers.QphoX package": [[33, null]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController package": [[34, null]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController module": [[34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox module": [[34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver module": [[34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver"]], "qcodes_contrib_drivers.drivers.QuTech package": [[35, null]], "qcodes_contrib_drivers.drivers.QuTech.D4 module": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.D4"]], "qcodes_contrib_drivers.drivers.QuTech.D5a module": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"]], "qcodes_contrib_drivers.drivers.QuTech.F1d module": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI module": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.M2j module": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"]], "qcodes_contrib_drivers.drivers.QuTech.S5i module": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"]], "qcodes_contrib_drivers.drivers.Rigol package": [[36, null]], "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932 module": [[36, "module-qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932"]], "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B module": [[36, "module-qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz package": [[37, null]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13 module": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package": [[38, null]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x module": [[38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP module": [[38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"]], "qcodes_contrib_drivers.drivers.SPECS package": [[39, null]], "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea module": [[39, "module-qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea"]], "qcodes_contrib_drivers.drivers.Shamrock package": [[40, null]], "qcodes_contrib_drivers.drivers.Shamrock.SR750 module": [[40, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"]], "qcodes_contrib_drivers.drivers.Siglent package": [[41, null]], "qcodes_contrib_drivers.drivers.Siglent.sdg module": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sdg"]], "qcodes_contrib_drivers.drivers.Siglent.sdg_channel module": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sdg_channel"]], "qcodes_contrib_drivers.drivers.Siglent.sds module": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sds"]], "qcodes_contrib_drivers.drivers.Siglent.sdx module": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sdx"]], "qcodes_contrib_drivers.drivers.SignalCore package": [[42, null]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore module": [[42, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"]], "qcodes_contrib_drivers.drivers.SingleQuantum package": [[43, null]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum module": [[43, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"]], "qcodes_contrib_drivers.drivers.Spectrum package": [[44, null]], "qcodes_contrib_drivers.drivers.Spectrum.M4i module": [[44, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header package": [[45, null]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py module": [[45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs module": [[45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr module": [[45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"]], "qcodes_contrib_drivers.drivers.Standa package": [[46, null]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168 module": [[46, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems package": [[47, null]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580 module": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645 module": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928 module": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570 module": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844 module": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844"]], "qcodes_contrib_drivers.drivers.SwabianInstruments package": [[48, null]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger module": [[48, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private package": [[49, null]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger module": [[49, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger"]], "qcodes_contrib_drivers.drivers.Tektronix package": [[50, null]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000 module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520 module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100 module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.FCA3100"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401 module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700 module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430 module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500 module": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"]], "qcodes_contrib_drivers.drivers.Thermotek package": [[51, null]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p module": [[51, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p"]], "qcodes_contrib_drivers.drivers.Thorlabs package": [[52, null]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1 module": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.KDC101 module": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101"]], "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550 module": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x module": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.PM100D module": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8 module": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.TDC001 module": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private package": [[53, null]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT module": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.CC module": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.LS module": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis module": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis"]], "qcodes_contrib_drivers.drivers.Valon package": [[54, null]], "qcodes_contrib_drivers.drivers.Valon.Valon_5015 module": [[54, "module-qcodes_contrib_drivers.drivers.Valon.Valon_5015"]], "qcodes_contrib_drivers.drivers.Vaunix package": [[55, null]], "qcodes_contrib_drivers.drivers.Vaunix.LDA module": [[55, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"]], "qcodes_contrib_drivers.drivers.Windfreak package": [[56, null]], "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD module": [[56, "module-qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD"]], "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3 module": [[56, "module-qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3"]], "qcodes_contrib_drivers.drivers.ZurichInstruments package": [[57, null]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI module": [[57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8 module": [[57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.physik_instrumente package": [[58, null]], "qcodes_contrib_drivers.drivers.physik_instrumente.mercury module": [[58, "module-qcodes_contrib_drivers.drivers.physik_instrumente.mercury"]]}, "docnames": ["api/generated/qcodes_contrib_drivers.drivers", "api/generated/qcodes_contrib_drivers.drivers.Advantech", "api/generated/qcodes_contrib_drivers.drivers.Agilent", "api/generated/qcodes_contrib_drivers.drivers.AimTTi", "api/generated/qcodes_contrib_drivers.drivers.Ametek", "api/generated/qcodes_contrib_drivers.drivers.Andor", "api/generated/qcodes_contrib_drivers.drivers.Attocube", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", "api/generated/qcodes_contrib_drivers.drivers.Aviosys", "api/generated/qcodes_contrib_drivers.drivers.Bilt", "api/generated/qcodes_contrib_drivers.drivers.BlueFors", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain", "api/generated/qcodes_contrib_drivers.drivers.Cryocon", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic", "api/generated/qcodes_contrib_drivers.drivers.DaylightSolutions", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave", "api/generated/qcodes_contrib_drivers.drivers.Gentec", "api/generated/qcodes_contrib_drivers.drivers.Holzworth", "api/generated/qcodes_contrib_drivers.drivers.Horiba", "api/generated/qcodes_contrib_drivers.drivers.Horiba.private", "api/generated/qcodes_contrib_drivers.drivers.Keysight", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore.modules", "api/generated/qcodes_contrib_drivers.drivers.LighthousePhotonics", "api/generated/qcodes_contrib_drivers.drivers.M2", "api/generated/qcodes_contrib_drivers.drivers.Minicircuits", "api/generated/qcodes_contrib_drivers.drivers.MontanaInstruments", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments", "api/generated/qcodes_contrib_drivers.drivers.Newport", "api/generated/qcodes_contrib_drivers.drivers.OxfordInstruments", "api/generated/qcodes_contrib_drivers.drivers.QDevil", "api/generated/qcodes_contrib_drivers.drivers.QphoX", "api/generated/qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController", "api/generated/qcodes_contrib_drivers.drivers.QuTech", "api/generated/qcodes_contrib_drivers.drivers.Rigol", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private", "api/generated/qcodes_contrib_drivers.drivers.SPECS", "api/generated/qcodes_contrib_drivers.drivers.Shamrock", "api/generated/qcodes_contrib_drivers.drivers.Siglent", "api/generated/qcodes_contrib_drivers.drivers.SignalCore", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header", "api/generated/qcodes_contrib_drivers.drivers.Standa", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments.private", "api/generated/qcodes_contrib_drivers.drivers.Tektronix", "api/generated/qcodes_contrib_drivers.drivers.Thermotek", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.private", "api/generated/qcodes_contrib_drivers.drivers.Valon", "api/generated/qcodes_contrib_drivers.drivers.Vaunix", "api/generated/qcodes_contrib_drivers.drivers.Windfreak", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments", "api/generated/qcodes_contrib_drivers.drivers.physik_instrumente", "examples/Agilent_N9000A", "examples/AimTTi_EL320P", "examples/Andor_DU401", "examples/Attocube_ANC300", "examples/Aviosys_IP_Power_9258S", "examples/BlueFors", "examples/CopperMountain_M5180", "examples/Cryomagnetics/LM_500", "examples/Cryomagnetics/Model_4G", "examples/ERASynth", "examples/Gentec_Maestro", "examples/HP/HP8594E", "examples/Holzworth_HS900", "examples/Horiba_FHR", "examples/ITest", "examples/Keithley_6430", "examples/Keysight_M3202A", "examples/Keysight_M3202A with digitizer", "examples/Lakeshore_311", "examples/Lakeshore_625", "examples/Lakeshore_M81_SSM_Example", "examples/NationalInstruments_DAQ", "examples/NationalInstruments_PXIe_2597", "examples/NationalInstruments_RFSG", "examples/Newport_AG-UC8", "examples/OxfordInstruments_Proteox", "examples/OxfordTriton", "examples/QDevil/QDAC1/QCodes example with QDevil_QDAC", "examples/QDevil/QDAC1/index", "examples/QDevil/QDAC2/AWG", "examples/QDevil/QDAC2/Chaining", "examples/QDevil/QDAC2/DC_Constant", "examples/QDevil/QDAC2/Debugging", "examples/QDevil/QDAC2/GateLeakage", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs", "examples/QDevil/QDAC2/List", "examples/QDevil/QDAC2/MultiGenerator", "examples/QDevil/QDAC2/PyvisaAwg", "examples/QDevil/QDAC2/Scan", "examples/QDevil/QDAC2/Scan2DDiode", "examples/QDevil/QDAC2/Sine", "examples/QDevil/QDAC2/Square", "examples/QDevil/QDAC2/Sweep", "examples/QDevil/QDAC2/SyncMultipleQDACs", "examples/QDevil/QDAC2/Triangle", "examples/QDevil/QDAC2/VirtualGates", "examples/QDevil/QDAC2/do2dScan", "examples/QDevil/QDAC2/index", "examples/QDevil/QSwitch/Debugging", "examples/QDevil/QSwitch/Usage", "examples/QDevil/QSwitch/index", "examples/QDevil/index", "examples/Rigol_DSG3136B", "examples/Rohde_Schwarz_HMC8043", "examples/Rohde_Schwarz_HMP4040", "examples/Rohde_Schwarz_SMW200A", "examples/SR844", "examples/Shamrock_SR750", "examples/SignalCore", "examples/SignalRecovery_7270", "examples/SingleQuantum", "examples/Specs_Tramea", "examples/Standa_10MWA168", "examples/SwabianInstruments_TimeTagger", "examples/Tektronix_AFG3000_series", "examples/Tektronix_FCA3100", "examples/Tektronix_Keithley_6500", "examples/Thorlabs_K10CR1", "examples/Thorlabs_KLS1550", "examples/Thorlabs_MFF10x", "examples/Thorlabs_PRM1Z8", "examples/Valon_5015", "examples/Vaunix_LDA", "examples/Windfreak_SynthUSB3", "examples/ZVL13", "examples/ZurichInstruments_HF2LI", "examples/index", "index"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["api/generated/qcodes_contrib_drivers.drivers.rst", "api/generated/qcodes_contrib_drivers.drivers.Advantech.rst", "api/generated/qcodes_contrib_drivers.drivers.Agilent.rst", "api/generated/qcodes_contrib_drivers.drivers.AimTTi.rst", "api/generated/qcodes_contrib_drivers.drivers.Ametek.rst", "api/generated/qcodes_contrib_drivers.drivers.Andor.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.rst", "api/generated/qcodes_contrib_drivers.drivers.Aviosys.rst", "api/generated/qcodes_contrib_drivers.drivers.Bilt.rst", "api/generated/qcodes_contrib_drivers.drivers.BlueFors.rst", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryocon.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic.rst", "api/generated/qcodes_contrib_drivers.drivers.DaylightSolutions.rst", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave.rst", "api/generated/qcodes_contrib_drivers.drivers.Gentec.rst", "api/generated/qcodes_contrib_drivers.drivers.Holzworth.rst", "api/generated/qcodes_contrib_drivers.drivers.Horiba.rst", "api/generated/qcodes_contrib_drivers.drivers.Horiba.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common.rst", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore.rst", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore.modules.rst", "api/generated/qcodes_contrib_drivers.drivers.LighthousePhotonics.rst", "api/generated/qcodes_contrib_drivers.drivers.M2.rst", "api/generated/qcodes_contrib_drivers.drivers.Minicircuits.rst", "api/generated/qcodes_contrib_drivers.drivers.MontanaInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.Newport.rst", "api/generated/qcodes_contrib_drivers.drivers.OxfordInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.QDevil.rst", "api/generated/qcodes_contrib_drivers.drivers.QphoX.rst", "api/generated/qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.rst", "api/generated/qcodes_contrib_drivers.drivers.QuTech.rst", "api/generated/qcodes_contrib_drivers.drivers.Rigol.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private.rst", "api/generated/qcodes_contrib_drivers.drivers.SPECS.rst", "api/generated/qcodes_contrib_drivers.drivers.Shamrock.rst", "api/generated/qcodes_contrib_drivers.drivers.Siglent.rst", "api/generated/qcodes_contrib_drivers.drivers.SignalCore.rst", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header.rst", "api/generated/qcodes_contrib_drivers.drivers.Standa.rst", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems.rst", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.SwabianInstruments.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Tektronix.rst", "api/generated/qcodes_contrib_drivers.drivers.Thermotek.rst", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.rst", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Valon.rst", "api/generated/qcodes_contrib_drivers.drivers.Vaunix.rst", "api/generated/qcodes_contrib_drivers.drivers.Windfreak.rst", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.physik_instrumente.rst", "examples/Agilent_N9000A.ipynb", "examples/AimTTi_EL320P.ipynb", "examples/Andor_DU401.ipynb", "examples/Attocube_ANC300.ipynb", "examples/Aviosys_IP_Power_9258S.ipynb", "examples/BlueFors.ipynb", "examples/CopperMountain_M5180.ipynb", "examples/Cryomagnetics/LM_500.ipynb", "examples/Cryomagnetics/Model_4G.ipynb", "examples/ERASynth.ipynb", "examples/Gentec_Maestro.ipynb", "examples/HP/HP8594E.ipynb", "examples/Holzworth_HS900.ipynb", "examples/Horiba_FHR.ipynb", "examples/ITest.ipynb", "examples/Keithley_6430.ipynb", "examples/Keysight_M3202A.ipynb", "examples/Keysight_M3202A with digitizer.ipynb", "examples/Lakeshore_311.ipynb", "examples/Lakeshore_625.ipynb", "examples/Lakeshore_M81_SSM_Example.ipynb", "examples/NationalInstruments_DAQ.ipynb", "examples/NationalInstruments_PXIe_2597.ipynb", "examples/NationalInstruments_RFSG.ipynb", "examples/Newport_AG-UC8.ipynb", "examples/OxfordInstruments_Proteox.ipynb", "examples/OxfordTriton.ipynb", "examples/QDevil/QDAC1/QCodes example with QDevil_QDAC.ipynb", "examples/QDevil/QDAC1/index.rst", "examples/QDevil/QDAC2/AWG.ipynb", "examples/QDevil/QDAC2/Chaining.ipynb", "examples/QDevil/QDAC2/DC_Constant.ipynb", "examples/QDevil/QDAC2/Debugging.ipynb", "examples/QDevil/QDAC2/GateLeakage.ipynb", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs.ipynb", "examples/QDevil/QDAC2/List.ipynb", "examples/QDevil/QDAC2/MultiGenerator.ipynb", "examples/QDevil/QDAC2/PyvisaAwg.ipynb", "examples/QDevil/QDAC2/Scan.ipynb", "examples/QDevil/QDAC2/Scan2DDiode.ipynb", "examples/QDevil/QDAC2/Sine.ipynb", "examples/QDevil/QDAC2/Square.ipynb", "examples/QDevil/QDAC2/Sweep.ipynb", "examples/QDevil/QDAC2/SyncMultipleQDACs.ipynb", "examples/QDevil/QDAC2/Triangle.ipynb", "examples/QDevil/QDAC2/VirtualGates.ipynb", "examples/QDevil/QDAC2/do2dScan.ipynb", "examples/QDevil/QDAC2/index.rst", "examples/QDevil/QSwitch/Debugging.ipynb", "examples/QDevil/QSwitch/Usage.ipynb", "examples/QDevil/QSwitch/index.rst", "examples/QDevil/index.rst", "examples/Rigol_DSG3136B.ipynb", "examples/Rohde_Schwarz_HMC8043.ipynb", "examples/Rohde_Schwarz_HMP4040.ipynb", "examples/Rohde_Schwarz_SMW200A.ipynb", "examples/SR844.ipynb", "examples/Shamrock_SR750.ipynb", "examples/SignalCore.ipynb", "examples/SignalRecovery_7270.ipynb", "examples/SingleQuantum.ipynb", "examples/Specs_Tramea.ipynb", "examples/Standa_10MWA168.ipynb", "examples/SwabianInstruments_TimeTagger.ipynb", "examples/Tektronix_AFG3000_series.ipynb", "examples/Tektronix_FCA3100.ipynb", "examples/Tektronix_Keithley_6500.ipynb", "examples/Thorlabs_K10CR1.ipynb", "examples/Thorlabs_KLS1550.ipynb", "examples/Thorlabs_MFF10x.ipynb", "examples/Thorlabs_PRM1Z8.ipynb", "examples/Valon_5015.ipynb", "examples/Vaunix_LDA.ipynb", "examples/Windfreak_SynthUSB3.ipynb", "examples/ZVL13.ipynb", "examples/ZurichInstruments_HF2LI.ipynb", "examples/index.rst", "index.rst"], "indexentries": {"__init__() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointiq method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900 method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900channel method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008bchannel method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313achannel method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.qutech.m2j.m2j method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rigol.rigol_dsg3136b.rigoldsg3136b method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B.RigolDSG3136B.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.fca3100.fca3100 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.FCA3100.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.fca3100.timestatistics method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan.keithley_2000_scan_channel method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_2401.keithley2400 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401.Keithley2400.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_6500 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_sense method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.__init__", false]], "__init__() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.__init__", false]], "abort() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.abort", false]], "abort() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.abort", false]], "ac (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.ac", false]], "acquire_cnts_t() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.acquire_cnts_t", false]], "active_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.active_channels", false]], "active_contact (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.active_contact", false]], "active_grating (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr attribute)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.active_grating", false]], "actual_values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.actual_values_V", false]], "actual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.actual_voltages", false]], "actuator (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator", false]], "actuator_name (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator_name", false]], "adc3_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.ADC3_cmd", false]], "adc_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.ADC_cmd", false]], "add_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.add_correction", false]], "add_labelprops() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.add_labelProps", false]], "address (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosysippower9258s attribute)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S.address", false]], "adjust_parameter_validator() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.adjust_parameter_validator", false]], "advantech_pcie_1751 (class in qcodes_contrib_drivers.drivers.advantech.pcie_1751)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751", false]], "afg3000 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000", false]], "afg3252 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3252", false]], "agilent_n9000a (class in qcodes_contrib_drivers.drivers.agilent.agilent_n9000a)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A", false]], "alarm_state() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[51, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.alarm_state", false]], "all_waveforms (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.all_waveforms", false]], "allocate() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocate", false]], "allocate_trace() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trace", false]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trigger", false]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.allocate_trigger", false]], "allocation_ref (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.allocation_ref", false]], "allocation_state() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocation_state", false]], "amc100axis (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis", false]], "amplifiermodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.AmplifierModule", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.amplitude", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.amplitude", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Amplitude", false]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Amplitude", false]], "amplitudemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation", false]], "anc300 (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300", false]], "anc300axis (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis", false]], "anc300triggerout (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut", false]], "anc350 (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350", false]], "anc350axis (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType", false]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType", false]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode", false]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType", false]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType", false]], "anc350liberror": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode", false]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode", false]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge", false]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge", false]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode", false]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode", false]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode", false]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity", false]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity", false]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib", false]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib", false]], "anc350v3liberror": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError", false], [7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError", false]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib", false]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib", false]], "andor_du401 (class in qcodes_contrib_drivers.drivers.andor.du401)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin property)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggerinstrumentbase property)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule property)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements property)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.coincidencevirtualchannel attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.combinervirtualchannel attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CombinerVirtualChannel.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countratemeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.api", false]], "api (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger property)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.api", false]], "api_tagger (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule property)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.api_tagger", false]], "api_tagger (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements property)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.api_tagger", false]], "append() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.append", false]], "application_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.application_cmd", false]], "apt (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.apt", false]], "apt (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.apt", false]], "apt (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.apt", false]], "apt_clean_up() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.apt_clean_up", false]], "apt_init() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.apt_init", false]], "arbitrary_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.arbitrary_wave", false]], "argtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.argtype", false]], "arm() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.arm", false]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.arrange", false]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.arrange", false]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.arrange", false]], "arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context", false]], "array_arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context", false]], "arraylikevalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ArrayLikeValidator", false]], "ask() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.ask", false]], "ask() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask", false]], "ask() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.ask", false]], "ask() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.ask", false]], "ask() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.ask", false]], "ask() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.ask", false]], "ask() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.ask", false]], "ask() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.ask", false]], "ask() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.ask", false]], "ask() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[51, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.ask", false]], "ask_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.ask_channel", false]], "ask_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.ask_channel", false]], "ask_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.ask_module", false]], "ask_raw() (qcodes_contrib_drivers.drivers.ametek.sr_7270.signalrecovery7270 method)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270.ask_raw", false]], "ask_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.ask_raw", false]], "ask_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask_raw", false]], "askv() (qcodes_contrib_drivers.drivers.valon.valon_5015.valon5015 method)": [[54, "qcodes_contrib_drivers.drivers.Valon.Valon_5015.Valon5015.askv", false]], "asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.asynchronous", false]], "atmcd64d (class in qcodes_contrib_drivers.drivers.andor.du401)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d", false]], "atten_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.atten_value", false]], "attenuator (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.attenuator", false]], "attocubeamc100 (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100", false]], "attributewrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper", false]], "auto (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.AUTO", false]], "auto_cali_bias_currents() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_bias_currents", false]], "auto_cali_finished() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_finished", false]], "auto_pwr_disable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.auto_pwr_disable", false]], "available_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.available_A", false]], "aviosys_ip_power_9258s (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S", false]], "aviosysippower9258s (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S", false]], "awg_config_external_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_config_external_trigger", false]], "awg_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context", false]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_flush", false]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_flush", false]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_array", false]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_array", false]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_file", false]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_file", false]], "awg_is_running() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_is_running", false]], "awg_jump_next_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_jump_next_waveform", false]], "awg_name (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.awg_name", false]], "awg_pause() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause", false]], "awg_pause_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause_multiple", false]], "awg_queue_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_config", false]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_waveform", false]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_queue_waveform", false]], "awg_resume() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume", false]], "awg_resume_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume_multiple", false]], "awg_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start", false]], "awg_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start_multiple", false]], "awg_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop", false]], "awg_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop_multiple", false]], "awg_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger", false]], "awg_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger_multiple", false]], "axis_1 (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxisposition attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition.axis_1", false]], "axis_2 (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxisposition attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition.axis_2", false]], "axis_3 (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxisposition attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition.axis_3", false]], "bandwidth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.bandwidth", false]], "bbd10x (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BBD10x", false]], "bcs10 (class in qcodes_contrib_drivers.drivers.lakeshore.modules.bcs10)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10.bcs10", false]], "bdc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BDC101", false]], "binwidth (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.binwidth", false]], "binwidth (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.binwidth", false]], "blockavg_hardware_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.blockavg_hardware_trigger_acquisition", false]], "bluefors (class in qcodes_contrib_drivers.drivers.bluefors.bluefors)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors", false]], "bool_to_str() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.bool_to_str", false]], "breakout() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.breakout", false]], "bsc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC001", false]], "bsc002 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC002", false]], "bsc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC101", false]], "buffer_points (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.buffer_points", false]], "byte_to_bits() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 static method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.byte_to_bits", false]], "c_str() (in module qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.c_str", false]], "cached_api_object() (in module qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.cached_api_object", false]], "calculate_error() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.calculate_error", false]], "calculate_ocp_code() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.calculate_OCP_code", false]], "calculate_output_code() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.calculate_output_code", false]], "calculate_polarization_current_ma() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.calculate_polarization_current_mA", false]], "calculated_resistance() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.calculated_resistance", false]], "calibration() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.calibration", false]], "capacitance (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.capacitance", false]], "chan_to_ic() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_ic", false]], "chan_to_id() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_id", false]], "change_folder() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.change_folder", false]], "channel (qcodes_contrib_drivers.drivers.lakeshore.model_331.sensorchannel attribute)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel.channel", false]], "channel (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.channel", false]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel", false]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.channel", false]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.channel", false]], "channel_ids (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_IDS", false]], "channel_list_to_state() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.channel_list_to_state", false]], "channel_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.CHANNEL_MAPPING", false]], "channel_names (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_NAMES", false]], "channel_number (qcodes_contrib_drivers.drivers.siglent.sdx.siglentchannel property)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentChannel.channel_number", false]], "channel_numbers (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel_numbers", false]], "channelarray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray", false]], "channels (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.coincidencevirtualchannel attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel.channels", false]], "channels (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.combinervirtualchannel attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CombinerVirtualChannel.channels", false]], "channels (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.channels", false]], "channels (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.channels", false]], "channels (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countratemeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement.channels", false]], "channeltrace (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace", false]], "check() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.check", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror class method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.check_error", false]], "check_error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.check_error", false]], "check_module_errors() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.check_module_errors", false]], "check_tune() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.check_tune", false]], "check_voltage() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.check_voltage", false]], "chopping (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.chopping", false]], "clear() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.clear", false]], "clear() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear", false]], "clear() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.clear", false]], "clear() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.clear", false]], "clear_alarm() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.clear_alarm", false]], "clear_measurements() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.clear_measurements", false]], "clear_read_buffer() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.clear_read_buffer", false]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.clear_read_queue", false]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear_read_queue", false]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.clear_read_queue", false]], "clear_waveforms() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.clear_waveforms", false]], "clear_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.clear_zero_offset", false]], "click_channel (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.click_channel", false]], "click_gate (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.click_gate", false]], "close() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.close", false]], "close() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.amc100.attocubeamc100 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.close", false]], "close() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.close", false]], "close() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.close", false]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.close", false]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close", false]], "close() (qcodes_contrib_drivers.drivers.lakeshore.m81_ssm.m81_ssm method)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM.M81_SSM.close", false]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.close", false]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.close", false]], "close() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2trigger_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.close", false]], "close() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.close", false]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.fsv_3013.rfspectrumanalyzer method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013.RFSpectrumAnalyzer.close", false]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.close", false]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.close", false]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.close", false]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.close", false]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.close", false]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.close", false]], "close() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.close", false]], "close() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.close", false]], "close() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.close", false]], "close() (qcodes_contrib_drivers.drivers.windfreak.windfreak_synthhd.windfreaksynthhd method)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD.WindfreakSynthHD.close", false]], "close_relay() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.close_relay", false]], "close_relays() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.close_relays", false]], "close_soft() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close_soft", false]], "close_switch() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.close_switch", false]], "cm10 (class in qcodes_contrib_drivers.drivers.lakeshore.modules.cm10)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.cm10.cm10", false]], "cmdbuffreespace (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CmdBufFreeSpace", false]], "cmddef (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.cmddef", false]], "cmddef (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.cmddef", false]], "cmtintparser() (in module qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTIntParser", false]], "cmts5048 (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048", false]], "cmts5048trace (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace", false]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Coarse", false]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Coarse", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.code", false]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.code", false]], "coincidence_window (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.coincidencevirtualchannel attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel.coincidence_window", false]], "coincidencevirtualchannel (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel", false]], "combinervirtualchannel (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CombinerVirtualChannel", false]], "comma_sequence_to_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list", false]], "comma_sequence_to_list_of_floats() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list_of_floats", false]], "command_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.command_delay", false]], "command_move() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.command_move", false]], "common_trigger_in (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.common_trigger_in", false]], "communication_handler() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.communication_handler", false]], "communicationhandler (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler", false]], "compare_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.compare_cmd", false]], "compilererror": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.CompilerError", false]], "completetimestatistics (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.CompleteTimeStatistics", false]], "complexsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep", false]], "compress_channel_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.compress_channel_list", false]], "config_amplitude_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_amplitude_modulation", false]], "config_angle_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_angle_modulation", false]], "config_clock_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_clock_io", false]], "config_fpga_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_fpga_trigger", false]], "config_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_trigger_io", false]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_in", false]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_in", false]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_out", false]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_out", false]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_duty_cycle", false]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_duty_cycle", false]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_ext_trigger", false]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_ext_trigger", false]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger", false]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger", false]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger_axis", false]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger_axis", false]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger", false]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger", false]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_eps", false]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_eps", false]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_pol", false]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_pol", false]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.connect", false]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.connect", false]], "connect() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.connect", false]], "connect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.connect", false]], "connect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.connect", false]], "connect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.connect", false]], "connect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.connect", false]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.connect_external_trigger", false]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.connect_external_trigger", false]], "connect_message() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.connect_message", false]], "connect_to() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.connect_to", false]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.contact_names", false]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.contact_names", false]], "controller (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.controller", false]], "convert_prescaler_to_sample_rate() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_prescaler_to_sample_rate", false]], "convert_sample_rate_to_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_sample_rate_to_prescaler", false]], "convert_to_voltage() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.convert_to_voltage", false]], "cooler_off() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_off", false]], "cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_on", false]], "correction_matrix (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.correction_matrix", false]], "correlationmeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement", false]], "countermeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement", false]], "countratemeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement", false]], "counts (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.counts", false]], "counts_total (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countratemeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement.counts_total", false]], "coupling (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.coupling", false]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.coupling_mode", false]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.coupling_mode", false]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.coupling_mode", false]], "create_json_structure() (in module qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.create_json_structure", false]], "create_parameters_from_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.create_parameters_from_node_tree", false]], "create_port_template() (in module qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.create_port_template", false]], "createspe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.CreateSpe", false]], "createspe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.CreateSpe", false]], "crest_factor (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.crest_factor", false]], "crs_aux_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_aux_pll_ld", false]], "crs_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_pll_ld", false]], "crs_ref_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_ref_pll_ld", false]], "cryocon_26 (class in qcodes_contrib_drivers.drivers.cryocon.cryocon_26)": [[12, "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26.Cryocon_26", false]], "cryogenicsms120c (class in qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C", false]], "cryoswitch (class in qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch", false]], "cryoswitchchannel (class in qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel", false]], "cryoswitchcontrollerdriver (class in qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver", false]], "cs580 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580", false]], "curposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurPosition", false]], "current (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.current", false]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.currents_A", false]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.currents_A", false]], "curspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurSpeed", false]], "curt (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurT", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.cycles_remaining", false]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.cycles_remaining", false]], "d4 (class in qcodes_contrib_drivers.drivers.qutech.d4)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D4.D4", false]], "d5a (class in qcodes_contrib_drivers.drivers.qutech.d5a)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a", false]], "dac_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.DAC_cmd", false]], "dac_quata (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.dac_quata", false]], "daq_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush", false]], "daq_flush_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush_multiple", false]], "daq_read() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_read", false]], "daq_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start", false]], "daq_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start_multiple", false]], "daq_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop", false]], "daq_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop_multiple", false]], "daq_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger", false]], "daq_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger_multiple", false]], "daqanaloginputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputs", false]], "daqanaloginputvoltages (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages", false]], "daqanalogoutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputs", false]], "daqanalogoutputvoltage (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage", false]], "daqdigitaloutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputs", false]], "daqdigitaloutputstate (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState", false]], "daqnaviexception": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviException", false]], "daqnaviwarning": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviWarning", false]], "data (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.data", false]], "data (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.data", false]], "data (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countratemeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement.data", false]], "data_normalized (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.data_normalized", false]], "data_normalized (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.data_normalized", false]], "data_source_types (qcodes_contrib_drivers.drivers.lakeshore.m81_ssm.m81_ssm attribute)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM.M81_SSM.data_source_types", false]], "data_total_counts (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.data_total_counts", false]], "datalog_chsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_ChsGet", false]], "datalog_chsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_ChsSet", false]], "datalog_open() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_Open", false]], "datalog_propsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_PropsGet", false]], "datalog_propsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_PropsSet", false]], "datalog_start() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_Start", false]], "datalog_statusget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_StatusGet", false]], "datalog_stop() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DataLog_Stop", false]], "day (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.day", false]], "dc (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.dc", false]], "dc_list() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_list", false]], "dc_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_sweep", false]], "dcc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.DCC001", false]], "dcchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.DCChannel", false]], "debug_func() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.debug_func", false]], "debug_messages_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.debug_messages_en", false]], "decode_buffer() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.decode_buffer", false]], "decode_simple_response() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.decode_simple_response", false]], "decrement_sensitivity() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.decrement_sensitivity", false]], "default_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_current_ramp_limit", false]], "default_max_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_max_current_ramp_limit", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.DEFAULT_PATH_TO_DLL", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.DEFAULT_PATH_TO_DLL", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.DEFAULT_PATH_TO_DLL", false]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.DEFAULT_PATH_TO_DLL", false]], "default_terminator (qcodes_contrib_drivers.drivers.windfreak.windfreak_synthusb3.windfreaksynthusb3 attribute)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3.WindfreakSynthUSB3.default_terminator", false]], "default_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.default_timeout", false]], "deg_to_rad() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.deg_to_rad", false]], "delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.delay", false]], "delegateparameterwithoutparentvalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.DelegateParameterWithoutParentValidator", false]], "delete_all_waveforms_from_list() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.delete_all_waveforms_from_list", false]], "deletespe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.DeleteSpe", false]], "deletespe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.DeleteSpe", false]], "depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.depth", false]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation", false]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.deviation", false]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.deviation_ratio", false]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation_ratio", false]], "device_access (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_access", false]], "device_id (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.device_id", false]], "device_info (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.device_info", false]], "device_interfaces (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.device_interfaces", false]], "device_standby (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_standby", false]], "deviceinformation (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation", false]], "deviceinfot (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT", false]], "devicerfparamst (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT", false]], "devicestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT", false]], "dg645 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645", false]], "diff_matrix() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.diff_matrix", false]], "diglines_outstatusset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DigLines_OutStatusSet", false]], "diglines_propsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DigLines_PropsSet", false]], "diglines_pulse() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DigLines_Pulse", false]], "diglines_ttlvalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.DigLines_TTLValGet", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Disable", false]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Disable", false]], "disable_3v3() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disable_3V3", false]], "disable_5v() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disable_5V", false]], "disable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.disable_auto_move", false]], "disable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.disable_channel", false]], "disable_chopping() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disable_chopping", false]], "disable_converter() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disable_converter", false]], "disable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.disable_hw_channel", false]], "disable_negative_supply() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disable_negative_supply", false]], "disable_output() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.disable_output", false]], "disable_output_channels() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disable_output_channels", false]], "disarm() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.disarm", false]], "discharge() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.discharge", false]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.disconnect", false]], "disconnect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.disconnect", false]], "disconnect_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.disconnect_all", false]], "disconnect_all() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.disconnect_all", false]], "disconnect_all() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.disconnect_all", false]], "disconnect_all() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.disconnect_all", false]], "disconnect_from() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from", false]], "disconnect_from_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from_all", false]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.discover", false]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.discover", false]], "dispatcher (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher", false]], "display_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.DISPLAY_MAPPING", false]], "dll (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.dll", false]], "dll (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.dll", false]], "dll (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.dll", false]], "dll_path (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat attribute)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.dll_path", false]], "dll_path (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg attribute)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.dll_path", false]], "dll_path (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda attribute)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.dll_path", false]], "do_get_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_frequency", false]], "do_get_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_power", false]], "do_get_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_pulse_delay", false]], "do_get_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status", false]], "do_get_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_ALC", false]], "do_get_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_modulation", false]], "do_set_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_frequency", false]], "do_set_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_power", false]], "do_set_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_pulse_delay", false]], "do_set_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status", false]], "do_set_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_ALC", false]], "do_set_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_modulation", false]], "double_delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_delay", false]], "double_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_width", false]], "download_device_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.download_device_node_tree", false]], "drsdaylightsolutions_mircat (class in qcodes_contrib_drivers.drivers.daylightsolutions.mircat)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat", false]], "dtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.dtype", false]], "dualmtsmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.DualMTSModule", false]], "dualspdtmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.DualSPDTModule", false]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.dwell", false]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.dwell", false]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.dwell", false]], "e36313a (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A", false]], "e36313achannel (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel", false]], "edge (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.edge", false]], "el320p (class in qcodes_contrib_drivers.drivers.aimtti.el320p)": [[3, "qcodes_contrib_drivers.drivers.AimTTi.EL320P.EL320P", false]], "embedded_version (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.embedded_version", false]], "enable_3v3() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.enable_3V3", false]], "enable_5v() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.enable_5V", false]], "enable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.enable_auto_move", false]], "enable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.enable_channel", false]], "enable_chopping() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.enable_chopping", false]], "enable_converter() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.enable_converter", false]], "enable_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.enable_detectors", false]], "enable_event_dlg() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.enable_event_dlg", false]], "enable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.enable_hw_channel", false]], "enable_negative_supply() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.enable_negative_supply", false]], "enable_ocp() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.enable_OCP", false]], "enable_output() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.enable_output", false]], "enable_output() (qcodes_contrib_drivers.drivers.tektronix.keithley_2401.keithley2400 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401.Keithley2400.enable_output", false]], "enable_output_channels() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.enable_output_channels", false]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_reset", false]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_reset", false]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_update", false]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_update", false]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_sensor", false]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_sensor", false]], "enabled (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.enabled", false]], "enabled (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p attribute)": [[51, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.enabled", false]], "encode() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.encode", false]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.EncPosition", false]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncPosition", false]], "encsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncSts", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.end_marker", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.end_marker", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.end_marker", false]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.end_marker", false]], "enter_persistent_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.enter_persistent_mode", false]], "enumerate_devices() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.enumerate_devices", false]], "erasynth (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth", false]], "erasynthbase (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase", false]], "erasynthplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus", false]], "erasynthplusplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus", false]], "error() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.error", false]], "error() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.error", false]], "error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.error", false]], "error_check() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.dispatcher method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.error_check", false]], "error_check() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.error_check", false]], "error_message() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.error_message", false]], "errormsg (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 attribute)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.ERRORMSG", false]], "errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.errors", false]], "errors() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.errors", false]], "esp8266_upload_mode() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.esp8266_upload_mode", false]], "ethernet_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.ETHERNET_cmd", false]], "examine() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.examine", false]], "exception_type (qcodes_contrib_drivers.drivers.attocube.amc100.attocubeamc100 property)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100.exception_type", false]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.execute", false]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.execute", false]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.execute", false]], "exp_start (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.exp_start", false]], "exp_stop (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.exp_stop", false]], "expand_channel_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.expand_channel_list", false]], "ext_ref_detect (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_detect", false]], "ext_ref_lock_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_lock_enable", false]], "f1d (class in qcodes_contrib_drivers.drivers.qutech.f1d)": [[35, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d", false]], "factory_reset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.factory_reset", false]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Falling", false]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Falling", false]], "fca3100 (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.FCA3100", false]], "fhrclient (class in qcodes_contrib_drivers.drivers.horiba.private.fhr_client)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient", false]], "fhrserver (class in qcodes_contrib_drivers.drivers.horiba.private.fhr_server)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer", false]], "filter (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.filter", false]], "find_modules() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.find_modules", false]], "fine_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.fine_pll_ld", false]], "firmware (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.firmware", false]], "firmware_build (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_build", false]], "firmware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.firmware_revision", false]], "firmware_version (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_version", false]], "firmware_version (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.firmware_version", false]], "flags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Flags", false]], "flash() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.flash", false]], "flash_utils() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.FLASH_utils", false]], "floats_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.floats_to_comma_separated_list", false]], "flush_input_buffer() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.flush_input_buffer", false]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.flush_waveform", false]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.flush_waveform", false]], "force_logicjump() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_logicjump", false]], "force_trigger() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_trigger", false]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.FORWARD", false]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.FORWARD", false]], "forward_and_back() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.forward_and_back", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Fps", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Fps", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Fps", false]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Fps", false]], "free_all_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_all_triggers", false]], "free_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_trigger", false]], "freq_manual (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_manual", false]], "freq_max (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_max", false]], "freq_min (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_min", false]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.frequency", false]], "frequency (qcodes_contrib_drivers.drivers.windfreak.windfreak_synthusb3.windfreaksynthusb3 attribute)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3.WindfreakSynthUSB3.frequency", false]], "frequencymodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation", false]], "frequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep", false]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase", false]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase", false]], "full_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.full_range", false]], "g2 (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.g2", false]], "gain (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.gain", false]], "gated_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.gated_trigger_acquisition", false]], "gen_trigger_pulse() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.gen_trigger_pulse", false]], "generate_csv_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 static method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.generate_csv_sequence_program", false]], "generatedsetpoints (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints", false]], "generatedsetpoints (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.GeneratedSetPoints", false]], "generator (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Generator", false]], "gentec_maestro (class in qcodes_contrib_drivers.drivers.gentec.gentec_maestro)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro", false]], "get_acquired_data() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquired_data", false]], "get_acquisition_timings() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquisition_timings", false]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_name", false]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_name", false]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_type", false]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_type", false]], "get_all() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_all", false]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.get_all", false]], "get_all_labels() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_all_labels", false]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_amplitude", false]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_amplitude", false]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.get_attribute", false]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.get_attribute", false]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_axis_status", false]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_axis_status", false]], "get_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_current", false]], "get_bias_voltage() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_bias_voltage", false]], "get_bias_voltage() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_voltage", false]], "get_buffer_length() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.get_buffer_length", false]], "get_buffers_enabled() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_buffers_enabled", false]], "get_calibration() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_calibration", false]], "get_camera_handle() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_handle", false]], "get_camera_serial_number() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_serial_number", false]], "get_capture_duration() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermeasurement method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerMeasurement.get_capture_duration", false]], "get_card_memory() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_memory", false]], "get_card_type() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_type", false]], "get_channel() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggervirtualchannel method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel.get_channel", false]], "get_channel_waveform() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_channel_waveform", false]], "get_channel_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_channel_waveform_data", false]], "get_channels() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggervirtualchannel method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel.get_channels", false]], "get_chassis() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_chassis", false]], "get_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_frequency", false]], "get_clock_sync_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_sync_frequency", false]], "get_configuration() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_configuration", false]], "get_configuration() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggerinstrumentbase method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase.get_configuration", false]], "get_converter_voltage() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_converter_voltage", false]], "get_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_coupling", false]], "get_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_current_folder_name", false]], "get_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_data", false]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_dc_voltage", false]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_dc_voltage", false]], "get_detector() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_detector", false]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_config", false]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_config", false]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_info", false]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_info", false]], "get_device_name() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_device_name", false]], "get_diagnostic_status() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_diagnostic_status", false]], "get_display_value() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.get_display_value", false]], "get_error() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_error", false]], "get_error_info32bit() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_error_info32bit", false]], "get_filenames() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_filenames", false]], "get_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_filter_mode", false]], "get_filter_value() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_filter_value", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_firmware_version", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_firmware_version", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_firmware_version", false]], "get_firmware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_firmware_version", false]], "get_folder_contents() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_folder_contents", false]], "get_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_fpga_pc_port", false]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_frequency", false]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_frequency", false]], "get_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_full_scale", false]], "get_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating", false]], "get_grating_info() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating_info", false]], "get_hardware_version() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_hardware_version", false]], "get_hardware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hardware_version", false]], "get_hardware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_hardware_version", false]], "get_head_model() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_head_model", false]], "get_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hvi_register", false]], "get_hw_info() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.get_hw_info", false]], "get_hw_revision() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_HW_revision", false]], "get_hw_serial_num_ex() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.get_hw_serial_num_ex", false]], "get_id() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.get_id", false]], "get_id() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_id", false]], "get_idn() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.ametek.sr_7270.signalrecovery7270 method)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.attocube.amc100.attocubeamc100 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosysippower9258s method)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313a method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.f1d.f1d method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.m2j.m2j method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.s5i.s5i method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570.sr570 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[51, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 method)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x method)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 method)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.get_idn", false]], "get_idn() (qcodes_contrib_drivers.drivers.windfreak.windfreak_synthhd.windfreaksynthhd method)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD.WindfreakSynthHD.get_idn", false]], "get_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_impedance", false]], "get_input_delay() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_input_delay", false]], "get_internal_temperature() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_internal_temperature", false]], "get_ip() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_ip", false]], "get_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_jumpmode", false]], "get_label() (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.get_label", false]], "get_label() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_label", false]], "get_last_error() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_last_error", false]], "get_limits() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_limits", false]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_lut_name", false]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_lut_name", false]], "get_math_vdiv() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_math_vdiv", false]], "get_math_waveform() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_math_waveform", false]], "get_max_current() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[38, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.get_max_current", false]], "get_max_sample_rate() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_max_sample_rate", false]], "get_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_measurement_periode", false]], "get_mode() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_mode", false]], "get_module_count() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_module_count", false]], "get_module_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_idn", false]], "get_module_status() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_status", false]], "get_n() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.get_n", false]], "get_num_samples() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_num_samples", false]], "get_number_devices() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_devices", false]], "get_number_gratings() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_gratings", false]], "get_number_of_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_number_of_detectors", false]], "get_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_pixels", false]], "get_ocp_status() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_OCP_status", false]], "get_ofst() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_ofst", false]], "get_open() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_open", false]], "get_options() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_options", false]], "get_output_state() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_output_state", false]], "get_overload() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.get_overload", false]], "get_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_pixel_width", false]], "get_pol_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_pol_dac", false]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_position", false]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_position", false]], "get_position() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_position", false]], "get_power_status() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_power_status", false]], "get_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_prescaler", false]], "get_pressure() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_pressure", false]], "get_pressure() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.get_pressure", false]], "get_product_name() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name", false]], "get_product_name_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_index", false]], "get_product_name_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_slot", false]], "get_pulse_history() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_pulse_history", false]], "get_pulse_parameters() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_pulse_parameters", false]], "get_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_pxi_trigger", false]], "get_ranges() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_ranges", false]], "get_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxispositionparameter method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointiq method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanaloginputvoltages method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magnetcurrentparameters method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magneticfieldparameters method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacmultichannelparameter method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.channelarray method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.timearray method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.tektronix.fca3100.completetimestatistics method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.CompleteTimeStatistics.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.tektronix.fca3100.generatedsetpoints method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.GeneratedSetPoints.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.tektronix.fca3100.timestatistics method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics.get_raw", false]], "get_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.get_raw", false]], "get_raw_analog_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_raw_analog_waveform_data", false]], "get_raw_digital_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_raw_digital_waveform_data", false]], "get_raw_math_waveform_data() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_raw_math_waveform_data", false]], "get_recorded_scpi_commands() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.get_recorded_scpi_commands", false]], "get_recorded_scpi_commands() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.get_recorded_scpi_commands", false]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_ref_position", false]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_ref_position", false]], "get_remote_settings() (qcodes_contrib_drivers.drivers.qutech.f1d.f1d method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d.get_remote_settings", false]], "get_s() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.get_s", false]], "get_sample_rate() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_sample_rate", false]], "get_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number", false]], "get_serial_number() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_serial_number", false]], "get_serial_number_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_index", false]], "get_serial_number_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_slot", false]], "get_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_slit", false]], "get_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_slot", false]], "get_state() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_state", false]], "get_status() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_status", false]], "get_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_status", false]], "get_status() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.get_status", false]], "get_status() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_status", false]], "get_sub_net_mask() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_sub_net_mask", false]], "get_switches_state() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_switches_state", false]], "get_switches_state() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.get_switches_state", false]], "get_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature", false]], "get_temperature() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[10, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_temperature", false]], "get_temperature() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_temperature", false]], "get_temperature() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.get_temperature", false]], "get_temperature_range() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature_range", false]], "get_test_signal() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_test_signal", false]], "get_time_base() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_time_base", false]], "get_trace() (qcodes_contrib_drivers.drivers.rohdeschwarz.fsv_3013.rfspectrumanalyzer method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013.RFSpectrumAnalyzer.get_trace", false]], "get_trig_mode() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_trig_mode", false]], "get_trigger_by_name() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.get_trigger_by_name", false]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_trigger_io", false]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_io", false]], "get_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_trigger_level", false]], "get_trigger_level() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.get_trigger_level", false]], "get_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_mode", false]], "get_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_threshold", false]], "get_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type", false]], "get_type_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_index", false]], "get_type_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_slot", false]], "get_uids() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_UIDs", false]], "get_uninitialized_slots() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.get_uninitialized_slots", false]], "get_v_ref() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.get_V_ref", false]], "get_validator() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency class method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.get_validator", false]], "get_vdiv() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_vdiv", false]], "get_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_voltage", false]], "get_waveform_setup() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.get_waveform_setup", false]], "get_waveform_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_status", false]], "get_waveform_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_type", false]], "get_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength", false]], "get_wavelength_limits() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength_limits", false]], "getall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.getall", false]], "getall() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.getall", false]], "getposition (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition", false]], "giga() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA", false]], "giga_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA_B", false]], "gm349 (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349", false]], "gm349attenuation (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Goniometer", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Goniometer", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Goniometer", false]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Goniometer", false]], "goto_root() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.goto_root", false]], "gpio_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.gpio_cmd", false]], "gpioflags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.GPIOFlags", false]], "gratingchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel", false]], "ground() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.ground", false]], "half_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.half_range", false]], "hardware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.hardware_revision", false]], "harmonic_ss (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.harmonic_ss", false]], "head_model (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.head_model", false]], "heater_off() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.heater_off", false]], "heater_on() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.heater_on", false]], "hf2li (class in qcodes_contrib_drivers.drivers.zurichinstruments.hf2li)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.High", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.High", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.High", false]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.High", false]], "histogramlogbinsmeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement", false]], "hold() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.hold", false]], "hold_field() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.hold_field", false]], "homelimitswitch (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch", false]], "horibafhr (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR", false]], "hour (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.hour", false]], "hs900 (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900", false]], "hs9008b (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B", false]], "hs9008bchannel (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel", false]], "hs900channel (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel", false]], "hsswp_acqchsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_AcqChsGet", false]], "hsswp_acqchsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_AcqChsSet", false]], "hsswp_autoreverseget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_AutoReverseGet", false]], "hsswp_autoreverseset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_AutoReverseSet", false]], "hsswp_endsettlget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_EndSettlGet", false]], "hsswp_endsettlset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_EndSettlSet", false]], "hsswp_numsweepsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_NumSweepsGet", false]], "hsswp_numsweepsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_NumSweepsSet", false]], "hsswp_resetsignalsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_ResetSignalsGet", false]], "hsswp_resetsignalsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_ResetSignalsSet", false]], "hsswp_savebasenameget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SaveBasenameGet", false]], "hsswp_savebasenameset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SaveBasenameSet", false]], "hsswp_savedataget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SaveDataGet", false]], "hsswp_savedataset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SaveDataSet", false]], "hsswp_saveoptionsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SaveOptionsGet", false]], "hsswp_saveoptionsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SaveOptionsSet", false]], "hsswp_start() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_Start", false]], "hsswp_statusget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_StatusGet", false]], "hsswp_stop() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_Stop", false]], "hsswp_swpchbwddelayget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChBwdDelayGet", false]], "hsswp_swpchbwddelayset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChBwdDelaySet", false]], "hsswp_swpchbwdswget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChBwdSwGet", false]], "hsswp_swpchbwdswset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChBwdSwSet", false]], "hsswp_swpchlimitsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChLimitsGet", false]], "hsswp_swpchlimitsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChLimitsSet", false]], "hsswp_swpchnumptsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChNumPtsGet", false]], "hsswp_swpchnumptsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChNumPtsSet", false]], "hsswp_swpchsiglistget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChSigListGet", false]], "hsswp_swpchsignalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChSignalGet", false]], "hsswp_swpchsignalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChSignalSet", false]], "hsswp_swpchtimingget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChTimingGet", false]], "hsswp_swpchtimingset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_SwpChTimingSet", false]], "hsswp_zctrloffget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_ZCtrlOffGet", false]], "hsswp_zctrloffset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.HSSwp_ZCtrlOffSet", false]], "hw_trigger (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.hw_trigger", false]], "hwtriggert (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT", false]], "i_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_bias", false]], "i_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_offset", false]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.IcHaus", false]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.IcHaus", false]], "identify() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.identify", false]], "identify() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.identify", false]], "impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.impedance", false]], "implementations() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggermodule class method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule.implementations", false]], "increment_sensitivity() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.increment_sensitivity", false]], "init() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.init", false]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.init", false]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.init", false]], "init() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.init", false]], "init_hw_device() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.init_hw_device", false]], "initialize() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.initialize", false]], "initialize() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.initialize", false]], "initialize_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.initialize_channels", false]], "initiate() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.initiate", false]], "initiate_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.initiate_correction", false]], "input_buffer() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.input_buffer", false]], "ints_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.ints_to_comma_separated_list", false]], "invalidate_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.invalidate_trace", false]], "io_expander_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.IO_expander_cmd", false]], "ipwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Ipwr", false]], "iqchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel", false]], "iqmodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation", false]], "is_cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.is_cooler_on", false]], "is_running() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.is_running", false]], "is_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.is_uploaded", false]], "itest (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest", false]], "itestchannel (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel", false]], "itestmultichannelparameter (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestMultiChannelParameter", false]], "iusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Iusb", false]], "ivvi (class in qcodes_contrib_drivers.drivers.qutech.ivvi)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI", false]], "jog() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.jog", false]], "k10cr1 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.K10CR1", false]], "kdc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.KDC101", false]], "keithley2400 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2401)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401.Keithley2400", false]], "keithley_2000_scan_channel (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel", false]], "keithley_2700 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700", false]], "keithley_6430 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6430)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430", false]], "keithley_6500 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500", false]], "keithley_sense (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense", false]], "keysight_e8267d (class in qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D", false]], "keysight_j7211 (class in qcodes_contrib_drivers.drivers.keysight.keysight_j7211)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211.Keysight_J7211", false]], "keysight_m3201a (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3201a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A.Keysight_M3201A", false]], "kilo() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO", false]], "kilo_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO_B", false]], "l490mz (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.L490MZ", false]], "labphox (class in qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox", false]], "lakeshore625 (class in qcodes_contrib_drivers.drivers.lakeshore.model_625)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625", false]], "lda (in module qcodes_contrib_drivers.drivers.vaunix.lda)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LDA", false]], "ldaattenuation (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation", false]], "ldachannel (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaChannel", false]], "ldaparameter (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter", false]], "ldaworkingfrequency (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency", false]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.leakage", false]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.leakage", false]], "leave_persistent_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.leave_persistent_mode", false]], "leave_persistent_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.leave_persistent_mode", false]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.level", false]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.level", false]], "level (qcodes_contrib_drivers.drivers.windfreak.windfreak_synthusb3.windfreaksynthusb3 attribute)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3.WindfreakSynthUSB3.level", false]], "level_dac_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.level_dac_value", false]], "lfoutputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel", false]], "lfoutputsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep", false]], "libximc (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc", false]], "lighthousephotonicssproutg (class in qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG", false]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.lin_step", false]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.lin_step", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Linear", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Linear", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Linear", false]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Linear", false]], "linspace() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.linspace", false]], "list_available_devices() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.list_available_devices", false]], "list_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context", false]], "list_mode_running (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.list_mode_running", false]], "list_mode_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.list_mode_t", false]], "listmodet (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT", false]], "load_and_set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.load_and_set_sequence", false]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_fpga_image", false]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.load_fpga_image", false]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.load_lut_file", false]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.load_lut_file", false]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform", false]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform", false]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform_int16", false]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform_int16", false]], "local() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.local", false]], "local() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.local", false]], "local() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.local", false]], "local() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.local", false]], "lockin_demodharmonicget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodHarmonicGet", false]], "lockin_demodharmonicset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodHarmonicSet", false]], "lockin_demodhpfilterget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodHPFilterGet", false]], "lockin_demodhpfilterset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodHPFilterSet", false]], "lockin_demodlpfilterget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodLPFilterGet", false]], "lockin_demodlpfilterset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodLPFilterSet", false]], "lockin_demodphasget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodPhasGet", false]], "lockin_demodphasregget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodPhasRegGet", false]], "lockin_demodphasregset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodPhasRegSet", false]], "lockin_demodphasset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodPhasSet", false]], "lockin_demodrtsignalsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodRTSignalsGet", false]], "lockin_demodrtsignalsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodRTSignalsSet", false]], "lockin_demodsignalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodSignalGet", false]], "lockin_demodsignalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodSignalSet", false]], "lockin_demodsyncfilterget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodSyncFilterGet", false]], "lockin_demodsyncfilterset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_DemodSyncFilterSet", false]], "lockin_modampget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModAmpGet", false]], "lockin_modampset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModAmpSet", false]], "lockin_modharmonicget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModHarmonicGet", false]], "lockin_modharmonicset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModHarmonicSet", false]], "lockin_modonoffget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModOnOffGet", false]], "lockin_modonoffset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModOnOffSet", false]], "lockin_modphasfreqget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModPhasFreqGet", false]], "lockin_modphasfreqset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModPhasFreqSet", false]], "lockin_modphasget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModPhasGet", false]], "lockin_modphasregget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModPhasRegGet", false]], "lockin_modphasregset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModPhasRegSet", false]], "lockin_modphasset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModPhasSet", false]], "lockin_modsignalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModSignalGet", false]], "lockin_modsignalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockIn_ModSignalSet", false]], "lockinfreqswp_limitsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_LimitsGet", false]], "lockinfreqswp_limitsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_LimitsSet", false]], "lockinfreqswp_open() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_Open", false]], "lockinfreqswp_propsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_PropsGet", false]], "lockinfreqswp_propsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_PropsSet", false]], "lockinfreqswp_signalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_SignalGet", false]], "lockinfreqswp_signalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_SignalSet", false]], "lockinfreqswp_start() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.LockInFreqSwp_Start", false]], "log_pulse() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.log_pulse", false]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.log_step", false]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.log_step", false]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.log_step", false]], "log_wav_init() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.log_wav_init", false]], "log_waveform() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.log_waveform", false]], "logger_init() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.logger_init", false]], "logging() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.logging", false]], "logspacenumvalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceNumValidator", false]], "logspacestartvalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceStartValidator", false]], "logspacestopvalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceStopValidator", false]], "losc_input (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_input", false]], "losc_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_mode", false]], "losc_output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_output", false]], "losc_state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_state", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.Low", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.Low", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.Low", false]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.Low", false]], "ltsxxx (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.LTSxxx", false]], "m2j (class in qcodes_contrib_drivers.drivers.qutech.m2j)": [[35, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j", false]], "m2solstis3 (class in qcodes_contrib_drivers.drivers.m2.m2_solstis_3)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3", false]], "m3202a (class in qcodes_contrib_drivers.drivers.keysight.m3202a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.M3202A.M3202A", false]], "m3300a_awg (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_AWG", false]], "m3300a_dig (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_DIG", false]], "m4i (class in qcodes_contrib_drivers.drivers.spectrum.m4i)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i", false]], "m5180 (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180", false]], "m81_ssm (class in qcodes_contrib_drivers.drivers.lakeshore.m81_ssm)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM.M81_SSM", false]], "mac() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.mac", false]], "magnetcurrentparameters (class in qcodes_contrib_drivers.drivers.oxfordinstruments.proteox)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters", false]], "magneticfieldparameters (class in qcodes_contrib_drivers.drivers.oxfordinstruments.proteox)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters", false]], "main() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.main", false]], "major (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Major", false]], "make_directory() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.make_directory", false]], "man_date (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.man_date", false]], "mandate (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate", false]], "manufacturer (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Manufacturer", false]], "manufacturerid (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ManufacturerId", false]], "max_status_age (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.max_status_age", false]], "measure_adc() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.measure_ADC", false]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.measure_capacitance", false]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.measure_capacitance", false]], "measure_current() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.measure_current", false]], "measure_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.measure_position", false]], "measure_power() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.measure_power", false]], "measure_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.fsv_3013.rfspectrumanalyzer method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013.RFSpectrumAnalyzer.measure_power", false]], "measure_voltage() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.measure_voltage", false]], "measurement() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.measurement", false]], "measurement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context", false]], "measurement_lists (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger property)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.measurement_lists", false]], "measurementcontrolmixin (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin", false]], "mega() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA", false]], "mega_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA_B", false]], "mem_usage() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.mem_usage", false]], "memory_manager (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.memory_manager", false]], "memory_sizes (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.memory_sizes", false]], "memorymanager (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager", false]], "memorymanager.allocatedslot (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot", false]], "mercury (class in qcodes_contrib_drivers.drivers.physik_instrumente.mercury)": [[58, "qcodes_contrib_drivers.drivers.physik_instrumente.mercury.mercury", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.message", false]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.message", false]], "mff10x (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.MFF10x", false]], "minicircuitsmodularsystem (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.MiniCircuitsModularSystem", false]], "minicircuitsmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.MiniCircuitsModule", false]], "minor (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Minor", false]], "mixing_chamber_heater_off() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.mixing_chamber_heater_off", false]], "mockvisa (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa", false]], "mockvisa (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa", false]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle", false]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle", false]], "mode (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode", false]], "mode (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.mode", false]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.mode", false]], "model (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.model", false]], "model (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.model", false]], "model (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.model", false]], "model (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.model", false]], "model (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.model", false]], "model_331 (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.Model_331", false]], "modulation_am_depth (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_am_depth", false]], "modulation_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_en", false]], "modulation_fm_deviation (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_fm_deviation", false]], "modulation_freq (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_freq", false]], "modulation_pulse_period (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_period", false]], "modulation_pulse_width (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_width", false]], "modulation_signal_waveform (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_signal_waveform", false]], "modulation_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_source", false]], "modulation_type (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_type", false]], "module": [[0, "module-qcodes_contrib_drivers.drivers", false], [0, "module-qcodes_contrib_drivers.drivers.CMTS5048", false], [1, "module-qcodes_contrib_drivers.drivers.Advantech", false], [1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751", false], [2, "module-qcodes_contrib_drivers.drivers.Agilent", false], [2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A", false], [3, "module-qcodes_contrib_drivers.drivers.AimTTi", false], [3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P", false], [4, "module-qcodes_contrib_drivers.drivers.Ametek", false], [4, "module-qcodes_contrib_drivers.drivers.Ametek.SR_7270", false], [5, "module-qcodes_contrib_drivers.drivers.Andor", false], [5, "module-qcodes_contrib_drivers.drivers.Andor.DU401", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.AMC100", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim", false], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3", false], [7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4", false], [8, "module-qcodes_contrib_drivers.drivers.Aviosys", false], [8, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S", false], [9, "module-qcodes_contrib_drivers.drivers.Bilt", false], [9, "module-qcodes_contrib_drivers.drivers.Bilt.ITest", false], [10, "module-qcodes_contrib_drivers.drivers.BlueFors", false], [10, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors", false], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain", false], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180", false], [11, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048", false], [12, "module-qcodes_contrib_drivers.drivers.Cryocon", false], [12, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26", false], [13, "module-qcodes_contrib_drivers.drivers.Cryogenic", false], [13, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C", false], [14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions", false], [14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat", false], [15, "module-qcodes_contrib_drivers.drivers.ERAInstruments", false], [15, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth", false], [16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave", false], [16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349", false], [17, "module-qcodes_contrib_drivers.drivers.Gentec", false], [17, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro", false], [18, "module-qcodes_contrib_drivers.drivers.Holzworth", false], [18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900", false], [18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B", false], [19, "module-qcodes_contrib_drivers.drivers.Horiba", false], [19, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR", false], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private", false], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client", false], [20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A", false], [21, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module", false], [22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager", false], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore", false], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM", false], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331", false], [23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.cm10", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.vm10", false], [24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10", false], [25, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics", false], [25, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G", false], [26, "module-qcodes_contrib_drivers.drivers.M2", false], [26, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3", false], [27, "module-qcodes_contrib_drivers.drivers.Minicircuits", false], [27, "module-qcodes_contrib_drivers.drivers.Minicircuits.ZTM", false], [28, "module-qcodes_contrib_drivers.drivers.MontanaInstruments", false], [28, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument", false], [29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types", false], [30, "module-qcodes_contrib_drivers.drivers.Newport", false], [30, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8", false], [31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments", false], [31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200", false], [31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120", false], [31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox", false], [31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Triton", false], [31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox", false], [32, "module-qcodes_contrib_drivers.drivers.QDevil", false], [32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1", false], [32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2", false], [32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array", false], [32, "module-qcodes_contrib_drivers.drivers.QDevil.QSwitch", false], [33, "module-qcodes_contrib_drivers.drivers.QphoX", false], [34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController", false], [34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController", false], [34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox", false], [34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver", false], [35, "module-qcodes_contrib_drivers.drivers.QuTech", false], [35, "module-qcodes_contrib_drivers.drivers.QuTech.D4", false], [35, "module-qcodes_contrib_drivers.drivers.QuTech.D5a", false], [35, "module-qcodes_contrib_drivers.drivers.QuTech.F1d", false], [35, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI", false], [35, "module-qcodes_contrib_drivers.drivers.QuTech.M2j", false], [35, "module-qcodes_contrib_drivers.drivers.QuTech.S5i", false], [36, "module-qcodes_contrib_drivers.drivers.Rigol", false], [36, "module-qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932", false], [36, "module-qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim", false], [37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13", false], [38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private", false], [38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x", false], [38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP", false], [39, "module-qcodes_contrib_drivers.drivers.SPECS", false], [39, "module-qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea", false], [40, "module-qcodes_contrib_drivers.drivers.Shamrock", false], [40, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750", false], [41, "module-qcodes_contrib_drivers.drivers.Siglent", false], [41, "module-qcodes_contrib_drivers.drivers.Siglent.sdg", false], [41, "module-qcodes_contrib_drivers.drivers.Siglent.sdg_channel", false], [41, "module-qcodes_contrib_drivers.drivers.Siglent.sds", false], [41, "module-qcodes_contrib_drivers.drivers.Siglent.sdx", false], [42, "module-qcodes_contrib_drivers.drivers.SignalCore", false], [42, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore", false], [43, "module-qcodes_contrib_drivers.drivers.SingleQuantum", false], [43, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum", false], [44, "module-qcodes_contrib_drivers.drivers.Spectrum", false], [44, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i", false], [45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header", false], [45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py", false], [45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs", false], [45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr", false], [46, "module-qcodes_contrib_drivers.drivers.Standa", false], [46, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168", false], [47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems", false], [47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580", false], [47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645", false], [47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928", false], [47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570", false], [47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844", false], [48, "module-qcodes_contrib_drivers.drivers.SwabianInstruments", false], [48, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger", false], [49, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private", false], [49, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.FCA3100", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430", false], [50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500", false], [51, "module-qcodes_contrib_drivers.drivers.Thermotek", false], [51, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8", false], [52, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001", false], [53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private", false], [53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT", false], [53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC", false], [53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS", false], [53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis", false], [54, "module-qcodes_contrib_drivers.drivers.Valon", false], [54, "module-qcodes_contrib_drivers.drivers.Valon.Valon_5015", false], [55, "module-qcodes_contrib_drivers.drivers.Vaunix", false], [55, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA", false], [56, "module-qcodes_contrib_drivers.drivers.Windfreak", false], [56, "module-qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD", false], [56, "module-qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3", false], [57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments", false], [57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI", false], [57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8", false], [58, "module-qcodes_contrib_drivers.drivers.physik_instrumente", false], [58, "module-qcodes_contrib_drivers.drivers.physik_instrumente.mercury", false]], "modulebase (class in qcodes_contrib_drivers.drivers.lakeshore.modules.modulebase)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase.moduleBase", false]], "montanainstruments_cryostation (class in qcodes_contrib_drivers.drivers.montanainstruments.cryostation)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation", false]], "month (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.month", false]], "mot_get_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_home_parameters", false]], "mot_get_position() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_position", false]], "mot_get_status_bits() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_status_bits", false]], "mot_get_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_velocity_parameters", false]], "mot_move_absolute_ex() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_absolute_ex", false]], "mot_move_home() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_home", false]], "mot_move_jog() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_jog", false]], "mot_move_velocity() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_velocity", false]], "mot_set_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_set_home_parameters", false]], "mot_set_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_set_velocity_parameters", false]], "mot_stop_profiled() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_stop_profiled", false]], "motorchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel", false]], "move (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.move", false]], "move_abs() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_abs", false]], "move_limit() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_limit", false]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.move_reference", false]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.move_reference", false]], "move_rel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_rel", false]], "move_to_reference_position() (qcodes_contrib_drivers.drivers.attocube.amc100.amc100axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis.move_to_reference_position", false]], "movests (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MoveSts", false]], "mst601 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.MST601", false]], "mtsmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.MTSModule", false]], "multiaxisposition (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition", false]], "multiaxispositionparameter (class in qcodes_contrib_drivers.drivers.attocube.amc100)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter", false]], "multiple_steps() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.multiple_steps", false]], "multiple_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.multiple_trigger_acquisition", false]], "mvcmdsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MvCmdSts", false]], "n_available() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_available", false]], "n_bins (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.n_bins", false]], "n_bins (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.n_bins", false]], "n_channels() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_channels", false]], "n_cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_cycles_remaining", false]], "n_errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_errors", false]], "n_external_inputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_inputs", false]], "n_external_outputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_outputs", false]], "n_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_triggers", false]], "n_values (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.n_values", false]], "na_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.na_mode", false]], "name (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.name", false]], "name (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.name", false]], "name (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.name", false]], "name (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.name", false]], "namedargtype (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType", false]], "names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.names", false]], "nanonistramea (class in qcodes_contrib_drivers.drivers.specs.specs_tramea)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea", false]], "nationalinstruments_pxie_5654 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NationalInstruments_PXIe_5654", false]], "nationalinstruments_rfsg (class in qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG", false]], "new_waveform_from_double() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_double", false]], "new_waveform_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_file", false]], "new_waveform_from_int() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_int", false]], "newport_ag_uc8 (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8", false]], "newport_ag_uc8_axis (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis", false]], "newport_ag_uc8_channel (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel", false]], "newport_ag_uc8_errorcode": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_ErrorCode", false]], "newport_ag_uc8_exception": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Exception", false]], "ni_pxie_2597 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597.NI_PXIe_2597", false]], "ni_pxie_5654 (in module qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NI_PXIe_5654", false]], "ni_rfsg (in module qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NI_RFSG", false]], "ni_switch (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch", false]], "nidllinstrument (class in qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument", false]], "nidllwrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper", false]], "normal (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.NORMAL", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Nothing", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Nothing", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Nothing", false]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Nothing", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Num", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Num", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Num", false]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Num", false]], "num_points (qcodes_contrib_drivers.drivers.siglent.sds.waveformsetup attribute)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup.num_points", false]], "number (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.number", false]], "number (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.number", false]], "number_gratings (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.number_gratings", false]], "ocp_value (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.OCP_value", false]], "odc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.ODC001", false]], "off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.off", false]], "off() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.off", false]], "off() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.off", false]], "off() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.off", false]], "off() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off", false]], "off_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off_modulation", false]], "offset (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.offset", false]], "offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.offset", false]], "oidecs (class in qcodes_contrib_drivers.drivers.oxfordinstruments.proteox)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS", false]], "on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.on", false]], "on() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.on", false]], "on() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.on", false]], "on() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on", false]], "on_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on_modulation", false]], "onedswp_acqchsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_AcqChsGet", false]], "onedswp_acqchsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_AcqChsSet", false]], "onedswp_limitsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_LimitsGet", false]], "onedswp_limitsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_LimitsSet", false]], "onedswp_open() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_Open", false]], "onedswp_propsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_PropsGet", false]], "onedswp_propsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_PropsSet", false]], "onedswp_start() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_Start", false]], "onedswp_stop() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_Stop", false]], "onedswp_swpsignalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_SwpSignalGet", false]], "onedswp_swpsignalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OneDSwp_SwpSignalSet", false]], "oneormore (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.OneOrMore", false]], "open_device() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.open_device", false]], "open_relay() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.open_relay", false]], "open_relays() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.open_relays", false]], "open_switch() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.open_switch", false]], "open_with_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_serial_number", false]], "open_with_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_slot", false]], "operate_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.operate_status_t", false]], "operatestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT", false]], "optimize_for_frequency() (qcodes_contrib_drivers.drivers.qutech.s5i.s5i method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i.optimize_for_frequency", false]], "oscihr_calibrmodeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_CalibrModeGet", false]], "oscihr_calibrmodeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_CalibrModeSet", false]], "oscihr_chget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_ChGet", false]], "oscihr_chset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_ChSet", false]], "oscihr_oscidataget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_OsciDataGet", false]], "oscihr_oversamplget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_OversamplGet", false]], "oscihr_oversamplset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_OversamplSet", false]], "oscihr_pretrigget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PreTrigGet", false]], "oscihr_pretrigset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PreTrigSet", false]], "oscihr_psdavrgcountget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDAvrgCountGet", false]], "oscihr_psdavrgcountset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDAvrgCountSet", false]], "oscihr_psdavrgrestart() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDAvrgRestart", false]], "oscihr_psdavrgtypeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDAvrgTypeGet", false]], "oscihr_psdavrgtypeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDAvrgTypeSet", false]], "oscihr_psddataget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDDataGet", false]], "oscihr_psdshow() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDShow", false]], "oscihr_psdweightget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDWeightGet", false]], "oscihr_psdweightset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDWeightSet", false]], "oscihr_psdwindowget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDWindowGet", false]], "oscihr_psdwindowset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_PSDWindowSet", false]], "oscihr_run() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_Run", false]], "oscihr_samplesget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_SamplesGet", false]], "oscihr_samplesset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_SamplesSet", false]], "oscihr_trigarmmodeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigArmModeGet", false]], "oscihr_trigarmmodeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigArmModeSet", false]], "oscihr_trigdigchget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigDigChGet", false]], "oscihr_trigdigchset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigDigChSet", false]], "oscihr_trigdigslopeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigDigSlopeGet", false]], "oscihr_trigdigslopeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigDigSlopeSet", false]], "oscihr_triglevchget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevChGet", false]], "oscihr_triglevchset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevChSet", false]], "oscihr_triglevhystget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevHystGet", false]], "oscihr_triglevhystset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevHystSet", false]], "oscihr_triglevslopeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevSlopeGet", false]], "oscihr_triglevslopeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevSlopeSet", false]], "oscihr_triglevvalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevValGet", false]], "oscihr_triglevvalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigLevValSet", false]], "oscihr_trigmodeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigModeGet", false]], "oscihr_trigmodeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigModeSet", false]], "oscihr_trigrearm() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.OsciHR_TrigRearm", false]], "ost001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.OST001", false]], "output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.output", false]], "output_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.output_enable", false]], "output_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.OUTPUT_MAPPING", false]], "output_mapping (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li attribute)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.OUTPUT_MAPPING", false]], "output_mode (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_mode", false]], "output_mode() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.output_mode", false]], "output_off() (qcodes_contrib_drivers.drivers.lakeshore.modules.sourcebase.sourcebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase.sourceBase.output_off", false]], "output_on() (qcodes_contrib_drivers.drivers.lakeshore.modules.sourcebase.sourcebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase.sourceBase.output_on", false]], "output_power (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_power", false]], "output_setpoint (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_setpoint", false]], "output_voltage (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.output_voltage", false]], "outputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel", false]], "outputfrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep", false]], "outputlevelsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep", false]], "over_temp (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.over_temp", false]], "oxfordinstruments_ilm200 (class in qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200", false]], "oxfordinstruments_ips120 (class in qcodes_contrib_drivers.drivers.oxfordinstruments.ips120)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120", false]], "oxfordinstruments_kelvinox_igh (class in qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH", false]], "packet_handler() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.packet_handler", false]], "parameterwithsetsideeffect (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ParameterWithSetSideEffect", false]], "parent (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.parent", false]], "parse_binary() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.parse_binary", false]], "parse_on_off() (in module qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.parse_on_off", false]], "parse_response() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.parse_response", false]], "parsebool() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsebool", false]], "parseint() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parseint", false]], "parsestr() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsestr", false]], "pci_clk_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.pci_clk_enable", false]], "peek_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.peek_A", false]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.period", false]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.period", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_end_marker", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_end_marker", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_end_marker", false]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_end_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_start_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_start_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_start_marker", false]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_start_marker", false]], "phasemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation", false]], "pin_map() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349 method)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349.pin_map", false]], "pll_lmx1_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx1_status", false]], "pll_lmx2_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx2_status", false]], "pll_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.pll_status_t", false]], "pll_xtal_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_xtal_status", false]], "pllstatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT", false]], "plotting_function() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.plotting_function", false]], "pointiq (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ", false]], "pointmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase", false]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.points", false]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.points", false]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.points", false]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.points", false]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.points", false]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.polarity", false]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.polarity", false]], "polarity_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.POLARITY_MAPPING", false]], "poll_move_wave_t() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.poll_move_wave_t", false]], "poll_raw_binary_data() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.poll_raw_binary_data", false]], "poll_wave_m() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.poll_wave_m", false]], "port_count() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.port_count", false]], "portchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel", false]], "position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.position", false]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Position", false]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Position", false]], "position (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.Position", false]], "power (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.power", false]], "power_level (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.power_level", false]], "power_parser() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.power_parser", false]], "power_status (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.power_status", false]], "powerchannel (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[8, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel", false]], "precisionmotorchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel", false]], "prepare_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.prepare_trace", false]], "prescale_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.PRESCALE_MAPPING", false]], "preset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.preset", false]], "print_dac_voltages() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.print_dac_voltages", false]], "print_overview() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_overview", false]], "print_pyvisa_resources() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase static method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.print_pyvisa_resources", false]], "print_slopes() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_slopes", false]], "print_syncs() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_syncs", false]], "prm1z8 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.PRM1Z8", false]], "process() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.process", false]], "product_serial_number (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.product_serial_number", false]], "productdescription (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ProductDescription", false]], "publish() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.publish", false]], "pulse_duration (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.pulse_duration", false]], "pulse_logging_init() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.pulse_logging_init", false]], "pulsegenerator (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator", false]], "pulsemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation", false]], "pwrsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.PWRSts", false]], "pxi_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_enable", false]], "pxi_line (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_line", false]], "pytify() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[45, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.pytify", false]], "q_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_bias", false]], "q_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_offset", false]], "qcodes_contrib_drivers.drivers": [[0, "module-qcodes_contrib_drivers.drivers", false]], "qcodes_contrib_drivers.drivers.advantech": [[1, "module-qcodes_contrib_drivers.drivers.Advantech", false]], "qcodes_contrib_drivers.drivers.advantech.pcie_1751": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751", false]], "qcodes_contrib_drivers.drivers.agilent": [[2, "module-qcodes_contrib_drivers.drivers.Agilent", false]], "qcodes_contrib_drivers.drivers.agilent.agilent_n9000a": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A", false]], "qcodes_contrib_drivers.drivers.aimtti": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi", false]], "qcodes_contrib_drivers.drivers.aimtti.el320p": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P", false]], "qcodes_contrib_drivers.drivers.ametek": [[4, "module-qcodes_contrib_drivers.drivers.Ametek", false]], "qcodes_contrib_drivers.drivers.ametek.sr_7270": [[4, "module-qcodes_contrib_drivers.drivers.Ametek.SR_7270", false]], "qcodes_contrib_drivers.drivers.andor": [[5, "module-qcodes_contrib_drivers.drivers.Andor", false]], "qcodes_contrib_drivers.drivers.andor.du401": [[5, "module-qcodes_contrib_drivers.drivers.Andor.DU401", false]], "qcodes_contrib_drivers.drivers.attocube": [[6, "module-qcodes_contrib_drivers.drivers.Attocube", false]], "qcodes_contrib_drivers.drivers.attocube.amc100": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.AMC100", false]], "qcodes_contrib_drivers.drivers.attocube.anc300": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300", false]], "qcodes_contrib_drivers.drivers.attocube.anc300sim": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim", false]], "qcodes_contrib_drivers.drivers.attocube.anc350": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.interface": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v3": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3", false]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v4": [[7, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4", false]], "qcodes_contrib_drivers.drivers.aviosys": [[8, "module-qcodes_contrib_drivers.drivers.Aviosys", false]], "qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s": [[8, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S", false]], "qcodes_contrib_drivers.drivers.bilt": [[9, "module-qcodes_contrib_drivers.drivers.Bilt", false]], "qcodes_contrib_drivers.drivers.bilt.itest": [[9, "module-qcodes_contrib_drivers.drivers.Bilt.ITest", false]], "qcodes_contrib_drivers.drivers.bluefors": [[10, "module-qcodes_contrib_drivers.drivers.BlueFors", false]], "qcodes_contrib_drivers.drivers.bluefors.bluefors": [[10, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors", false]], "qcodes_contrib_drivers.drivers.cmts5048": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048", false]], "qcodes_contrib_drivers.drivers.coppermountain": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain", false]], "qcodes_contrib_drivers.drivers.coppermountain.m5180": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180", false]], "qcodes_contrib_drivers.drivers.coppermountain.s5048": [[11, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048", false]], "qcodes_contrib_drivers.drivers.cryocon": [[12, "module-qcodes_contrib_drivers.drivers.Cryocon", false]], "qcodes_contrib_drivers.drivers.cryocon.cryocon_26": [[12, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26", false]], "qcodes_contrib_drivers.drivers.cryogenic": [[13, "module-qcodes_contrib_drivers.drivers.Cryogenic", false]], "qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c": [[13, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C", false]], "qcodes_contrib_drivers.drivers.daylightsolutions": [[14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions", false]], "qcodes_contrib_drivers.drivers.daylightsolutions.mircat": [[14, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat", false]], "qcodes_contrib_drivers.drivers.erainstruments": [[15, "module-qcodes_contrib_drivers.drivers.ERAInstruments", false]], "qcodes_contrib_drivers.drivers.erainstruments.erasynth": [[15, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth", false]], "qcodes_contrib_drivers.drivers.generalmicrowave": [[16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave", false]], "qcodes_contrib_drivers.drivers.generalmicrowave.gm349": [[16, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349", false]], "qcodes_contrib_drivers.drivers.gentec": [[17, "module-qcodes_contrib_drivers.drivers.Gentec", false]], "qcodes_contrib_drivers.drivers.gentec.gentec_maestro": [[17, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro", false]], "qcodes_contrib_drivers.drivers.holzworth": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth", false]], "qcodes_contrib_drivers.drivers.holzworth.hs900": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900", false]], "qcodes_contrib_drivers.drivers.holzworth.hs9008b": [[18, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B", false]], "qcodes_contrib_drivers.drivers.horiba": [[19, "module-qcodes_contrib_drivers.drivers.Horiba", false]], "qcodes_contrib_drivers.drivers.horiba.horiba_fhr": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR", false]], "qcodes_contrib_drivers.drivers.horiba.private": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private", false]], "qcodes_contrib_drivers.drivers.horiba.private.fhr_client": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client", false]], "qcodes_contrib_drivers.drivers.horiba.private.fhr_server": [[20, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server", false]], "qcodes_contrib_drivers.drivers.keysight": [[21, "module-qcodes_contrib_drivers.drivers.Keysight", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_e36313a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_e8267d": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_j7211": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3201a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A", false]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3300a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A", false]], "qcodes_contrib_drivers.drivers.keysight.m3202a": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG", false]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module": [[22, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module", false]], "qcodes_contrib_drivers.drivers.lakeshore": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore", false]], "qcodes_contrib_drivers.drivers.lakeshore.m81_ssm": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM", false]], "qcodes_contrib_drivers.drivers.lakeshore.model_331": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331", false]], "qcodes_contrib_drivers.drivers.lakeshore.model_625": [[23, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules.bcs10": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules.cm10": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.cm10", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules.modulebase": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules.sourcebase": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules.vm10": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.vm10", false]], "qcodes_contrib_drivers.drivers.lakeshore.modules.vs10": [[24, "module-qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10", false]], "qcodes_contrib_drivers.drivers.lighthousephotonics": [[25, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics", false]], "qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g": [[25, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G", false]], "qcodes_contrib_drivers.drivers.m2": [[26, "module-qcodes_contrib_drivers.drivers.M2", false]], "qcodes_contrib_drivers.drivers.m2.m2_solstis_3": [[26, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3", false]], "qcodes_contrib_drivers.drivers.minicircuits": [[27, "module-qcodes_contrib_drivers.drivers.Minicircuits", false]], "qcodes_contrib_drivers.drivers.minicircuits.ztm": [[27, "module-qcodes_contrib_drivers.drivers.Minicircuits.ZTM", false]], "qcodes_contrib_drivers.drivers.montanainstruments": [[28, "module-qcodes_contrib_drivers.drivers.MontanaInstruments", false]], "qcodes_contrib_drivers.drivers.montanainstruments.cryostation": [[28, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation", false]], "qcodes_contrib_drivers.drivers.nationalinstruments": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.daq": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.rfsg": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.switch": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch", false]], "qcodes_contrib_drivers.drivers.nationalinstruments.visa_types": [[29, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types", false]], "qcodes_contrib_drivers.drivers.newport": [[30, "module-qcodes_contrib_drivers.drivers.Newport", false]], "qcodes_contrib_drivers.drivers.newport.ag_uc8": [[30, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.ips120": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.proteox": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox", false]], "qcodes_contrib_drivers.drivers.oxfordinstruments.triton": [[31, "module-qcodes_contrib_drivers.drivers.OxfordInstruments.Triton", false]], "qcodes_contrib_drivers.drivers.physik_instrumente": [[58, "module-qcodes_contrib_drivers.drivers.physik_instrumente", false]], "qcodes_contrib_drivers.drivers.physik_instrumente.mercury": [[58, "module-qcodes_contrib_drivers.drivers.physik_instrumente.mercury", false]], "qcodes_contrib_drivers.drivers.qdevil": [[32, "module-qcodes_contrib_drivers.drivers.QDevil", false]], "qcodes_contrib_drivers.drivers.qdevil.qdac1": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1", false]], "qcodes_contrib_drivers.drivers.qdevil.qdac2": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2", false]], "qcodes_contrib_drivers.drivers.qdevil.qdac2_array": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array", false]], "qcodes_contrib_drivers.drivers.qdevil.qswitch": [[32, "module-qcodes_contrib_drivers.drivers.QDevil.QSwitch", false]], "qcodes_contrib_drivers.drivers.qphox": [[33, "module-qcodes_contrib_drivers.drivers.QphoX", false]], "qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller": [[34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController", false]], "qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller": [[34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController", false]], "qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox": [[34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox", false]], "qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver": [[34, "module-qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver", false]], "qcodes_contrib_drivers.drivers.qutech": [[35, "module-qcodes_contrib_drivers.drivers.QuTech", false]], "qcodes_contrib_drivers.drivers.qutech.d4": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.D4", false]], "qcodes_contrib_drivers.drivers.qutech.d5a": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.D5a", false]], "qcodes_contrib_drivers.drivers.qutech.f1d": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.F1d", false]], "qcodes_contrib_drivers.drivers.qutech.ivvi": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI", false]], "qcodes_contrib_drivers.drivers.qutech.m2j": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.M2j", false]], "qcodes_contrib_drivers.drivers.qutech.s5i": [[35, "module-qcodes_contrib_drivers.drivers.QuTech.S5i", false]], "qcodes_contrib_drivers.drivers.rigol": [[36, "module-qcodes_contrib_drivers.drivers.Rigol", false]], "qcodes_contrib_drivers.drivers.rigol.rigol_dp932": [[36, "module-qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932", false]], "qcodes_contrib_drivers.drivers.rigol.rigol_dsg3136b": [[36, "module-qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.fsv_3013": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private": [[38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x": [[38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp": [[38, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smr40": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim", false]], "qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13": [[37, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13", false]], "qcodes_contrib_drivers.drivers.shamrock": [[40, "module-qcodes_contrib_drivers.drivers.Shamrock", false]], "qcodes_contrib_drivers.drivers.shamrock.sr750": [[40, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750", false]], "qcodes_contrib_drivers.drivers.siglent": [[41, "module-qcodes_contrib_drivers.drivers.Siglent", false]], "qcodes_contrib_drivers.drivers.siglent.sdg": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sdg", false]], "qcodes_contrib_drivers.drivers.siglent.sdg_channel": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sdg_channel", false]], "qcodes_contrib_drivers.drivers.siglent.sds": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sds", false]], "qcodes_contrib_drivers.drivers.siglent.sdx": [[41, "module-qcodes_contrib_drivers.drivers.Siglent.sdx", false]], "qcodes_contrib_drivers.drivers.signalcore": [[42, "module-qcodes_contrib_drivers.drivers.SignalCore", false]], "qcodes_contrib_drivers.drivers.signalcore.signalcore": [[42, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore", false]], "qcodes_contrib_drivers.drivers.singlequantum": [[43, "module-qcodes_contrib_drivers.drivers.SingleQuantum", false]], "qcodes_contrib_drivers.drivers.singlequantum.singlequantum": [[43, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum", false]], "qcodes_contrib_drivers.drivers.specs": [[39, "module-qcodes_contrib_drivers.drivers.SPECS", false]], "qcodes_contrib_drivers.drivers.specs.specs_tramea": [[39, "module-qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea", false]], "qcodes_contrib_drivers.drivers.spectrum": [[44, "module-qcodes_contrib_drivers.drivers.Spectrum", false]], "qcodes_contrib_drivers.drivers.spectrum.m4i": [[44, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header": [[45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header.h2py": [[45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header.regs": [[45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs", false]], "qcodes_contrib_drivers.drivers.spectrum.py_header.spcerr": [[45, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr", false]], "qcodes_contrib_drivers.drivers.standa": [[46, "module-qcodes_contrib_drivers.drivers.Standa", false]], "qcodes_contrib_drivers.drivers.standa.standa_10mwa168": [[46, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570", false]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844": [[47, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844", false]], "qcodes_contrib_drivers.drivers.swabianinstruments": [[48, "module-qcodes_contrib_drivers.drivers.SwabianInstruments", false]], "qcodes_contrib_drivers.drivers.swabianinstruments.private": [[49, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private", false]], "qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger": [[49, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger", false]], "qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger": [[48, "module-qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger", false]], "qcodes_contrib_drivers.drivers.tektronix": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix", false]], "qcodes_contrib_drivers.drivers.tektronix.afg3000": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000", false]], "qcodes_contrib_drivers.drivers.tektronix.awg520": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520", false]], "qcodes_contrib_drivers.drivers.tektronix.fca3100": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.FCA3100", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2401": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2700": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6430": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430", false]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6500": [[50, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500", false]], "qcodes_contrib_drivers.drivers.thermotek": [[51, "module-qcodes_contrib_drivers.drivers.Thermotek", false]], "qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p": [[51, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p", false]], "qcodes_contrib_drivers.drivers.thorlabs": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs", false]], "qcodes_contrib_drivers.drivers.thorlabs.k10cr1": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1", false]], "qcodes_contrib_drivers.drivers.thorlabs.kdc101": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101", false]], "qcodes_contrib_drivers.drivers.thorlabs.kls1550": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550", false]], "qcodes_contrib_drivers.drivers.thorlabs.mff10x": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x", false]], "qcodes_contrib_drivers.drivers.thorlabs.pm100d": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D", false]], "qcodes_contrib_drivers.drivers.thorlabs.private": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.apt": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.cc": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.kinesis": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis", false]], "qcodes_contrib_drivers.drivers.thorlabs.private.ls": [[53, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS", false]], "qcodes_contrib_drivers.drivers.thorlabs.prm1z8": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8", false]], "qcodes_contrib_drivers.drivers.thorlabs.tdc001": [[52, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001", false]], "qcodes_contrib_drivers.drivers.valon": [[54, "module-qcodes_contrib_drivers.drivers.Valon", false]], "qcodes_contrib_drivers.drivers.valon.valon_5015": [[54, "module-qcodes_contrib_drivers.drivers.Valon.Valon_5015", false]], "qcodes_contrib_drivers.drivers.vaunix": [[55, "module-qcodes_contrib_drivers.drivers.Vaunix", false]], "qcodes_contrib_drivers.drivers.vaunix.lda": [[55, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA", false]], "qcodes_contrib_drivers.drivers.windfreak": [[56, "module-qcodes_contrib_drivers.drivers.Windfreak", false]], "qcodes_contrib_drivers.drivers.windfreak.windfreak_synthhd": [[56, "module-qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD", false]], "qcodes_contrib_drivers.drivers.windfreak.windfreak_synthusb3": [[56, "module-qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3", false]], "qcodes_contrib_drivers.drivers.zurichinstruments": [[57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments", false]], "qcodes_contrib_drivers.drivers.zurichinstruments.hf2li": [[57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI", false]], "qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8": [[57, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8", false]], "qdac (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac", false]], "qdac2 (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2", false]], "qdac2_array (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array", false]], "qdac2channel (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel", false]], "qdac2externaltrigger (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2ExternalTrigger", false]], "qdac2trigger_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context", false]], "qdac_names() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.qdac_names", false]], "qdacchannel (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel", false]], "qdacmultichannelparameter (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter", false]], "qswitch (class in qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Quadratur", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Quadratur", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Quadratur", false]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Quadratur", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Quadrature", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Quadrature", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Quadrature", false]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Quadrature", false]], "query() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.query", false]], "query() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[13, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.query", false]], "query() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.query", false]], "query_line() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.query_line", false]], "rad_to_deg() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.rad_to_deg", false]], "raise_value_mismatch() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.raise_value_mismatch", false]], "ramp_up() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.ramp_up", false]], "ramp_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages", false]], "ramp_voltages_2d() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages_2d", false]], "ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.ratio", false]], "read() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.read", false]], "read() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.read", false]], "read() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.read", false]], "read() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.read", false]], "read() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.read", false]], "read_buffer() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.read_buffer", false]], "read_dc() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_DC", false]], "read_dc_relative() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_DC_relative", false]], "read_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga", false]], "read_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga_array", false]], "read_frequency() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_frequency", false]], "read_lia_dc() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_LIA_DC", false]], "read_line() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.read_line", false]], "read_npeak() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_npeak", false]], "read_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_pin", false]], "read_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_port", false]], "read_ppeak() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_ppeak", false]], "read_ptpeak() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_ptpeak", false]], "read_r() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_r", false]], "read_rms() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_RMS", false]], "read_rms_relative() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_RMS_relative", false]], "read_theta() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_theta", false]], "read_x() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_x", false]], "read_y() (qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase.sensebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase.read_y", false]], "recall() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.recall", false]], "reconnect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.reconnect", false]], "ref_100_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_100_pll_ld", false]], "ref_10_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_10_pll_ld", false]], "ref_osc_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ref_osc_source", false]], "ref_out_select (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ref_out_select", false]], "refer_to_api_doc() (in module qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.refer_to_api_doc", false]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynth attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth.reference_tcxo_ocxo", false]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplus attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus.reference_tcxo_ocxo", false]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplusplus attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus.reference_tcxo_ocxo", false]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.register_external_ip", false]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.register_external_ip", false]], "register_measurement() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.register_measurement", false]], "release (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Release", false]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.release", false]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.release", false]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.release", false]], "release_all() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.release_all", false]], "release_waveform_memory() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.release_waveform_memory", false]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform", false]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform", false]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform_int16", false]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform_int16", false]], "remote() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.remote", false]], "remote() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.remote", false]], "remote() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.remote", false]], "remote() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.remote", false]], "remove_all_measurements() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.remove_all_measurements", false]], "remove_all_virtual_channels() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.remove_all_virtual_channels", false]], "remove_traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.remove_traces", false]], "request32() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.request32", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Res", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Res", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Res", false]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Res", false]], "resend_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.resend_waveform", false]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.reset", false]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.reset", false]], "reset() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.reset", false]], "reset() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.reset", false]], "reset() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset", false]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.reset", false]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.reset", false]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.reset", false]], "reset() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.fsv_3013.rfspectrumanalyzer method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013.RFSpectrumAnalyzer.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.reset", false]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.reset", false]], "reset() (qcodes_contrib_drivers.drivers.siglent.sdx.siglentsdx method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx.reset", false]], "reset() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.reset", false]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.reset", false]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.reset", false]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570.sr570 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570.reset", false]], "reset() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset", false]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.reset", false]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.reset", false]], "reset_averages() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.reset_averages", false]], "reset_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_channel_phase", false]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_clock_phase", false]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.reset_clock_phase", false]], "reset_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.reset_cmd", false]], "reset_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset_delay", false]], "reset_edit_memory() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset_edit_memory", false]], "reset_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.reset_module", false]], "reset_multiple_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_multiple_channel_phase", false]], "reset_ocp() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.reset_OCP", false]], "reset_output_supervisor() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.reset_output_supervisor", false]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.reset_position", false]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.reset_position", false]], "reset_to_default() (qcodes_contrib_drivers.drivers.lakeshore.modules.modulebase.modulebase method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase.moduleBase.reset_to_default", false]], "resolution (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.resolution", false]], "result (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task property)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.result", false]], "result_parser() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.result_parser", false]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.retrace", false]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.retrace", false]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.retrace", false]], "retrieve_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.retrieve_data", false]], "return_self() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.return_self", false]], "return_to_start (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.return_to_start", false]], "returndebuginfo() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ReturnDebugInfo", false]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.REVERSE", false]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.REVERSE", false]], "rf1_lock_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_lock_mode", false]], "rf1_loop_gain (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_loop_gain", false]], "rf_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf_mode", false]], "rf_phase_offset (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.rf_phase_offset", false]], "rfspectrumanalyzer (class in qcodes_contrib_drivers.drivers.rohdeschwarz.fsv_3013)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013.RFSpectrumAnalyzer", false]], "rigoldp932e (class in qcodes_contrib_drivers.drivers.rigol.rigol_dp932)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E", false]], "rigoldsg3136b (class in qcodes_contrib_drivers.drivers.rigol.rigol_dsg3136b)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B.RigolDSG3136B", false]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Rising", false]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Rising", false]], "rohdeschwarz_smb100a (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A", false]], "rohdeschwarz_smr40 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smr40)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40", false]], "rohdeschwarz_smw200a (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A", false]], "rohdeschwarzhmc8041 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041.RohdeSchwarzHMC8041", false]], "rohdeschwarzhmc8042 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042.RohdeSchwarzHMC8042", false]], "rohdeschwarzhmc8043 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043.RohdeSchwarzHMC8043", false]], "rohdeschwarzhmc804xchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x)": [[38, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x.RohdeSchwarzHMC804xChannel", false]], "rohdeschwarzhmp4030 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030.RohdeSchwarzHMP4030", false]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020.RohdeSchwarzHMP4040", false]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030.RohdeSchwarzHMP4040", false]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040.RohdeSchwarzHMP4040", false]], "rohdeschwarzhmpchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp)": [[38, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel", false]], "rolling (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.rolling", false]], "rotate_nvalve() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.rotate_Nvalve", false]], "rotationdirection (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Rotator", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Rotator", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Rotator", false]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Rotator", false]], "round_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.round_dac", false]], "run() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.run", false]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.run", false]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.run", false]], "run_continously() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_continously", false]], "run_n_times() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_N_times", false]], "run_self_test() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.run_self_test", false]], "run_self_test() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.run_self_test", false]], "run_self_tests() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.run_self_tests", false]], "run_to_field() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.run_to_field", false]], "run_to_field_wait() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.run_to_field_wait", false]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.running", false]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.running", false]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.running", false]], "s5i (class in qcodes_contrib_drivers.drivers.qutech.s5i)": [[35, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i", false]], "sa_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.sa_mode", false]], "safrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep", false]], "sample() (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.sample", false]], "save() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.save", false]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.save_params", false]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.save_params", false]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.save_params", false]], "save_settings() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.save_settings", false]], "save_settings() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.save_settings", false]], "save_switch_state() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.save_switch_state", false]], "sc5521a (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A", false]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaattenuation attribute)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation.scaling", false]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter attribute)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.scaling", false]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency attribute)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.scaling", false]], "scc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.SCC001", false]], "scdp_bmp_bytes() (qcodes_contrib_drivers.drivers.siglent.sdx.siglentsdx method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx.scdp_bmp_bytes", false]], "screen_dump_bmp() (qcodes_contrib_drivers.drivers.siglent.sdx.siglentsdx method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx.screen_dump_bmp", false]], "script_autosave() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_Autosave", false]], "script_chsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_ChsGet", false]], "script_chsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_ChsSet", false]], "script_dataget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_DataGet", false]], "script_deploy() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_Deploy", false]], "script_load() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_Load", false]], "script_run() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_Run", false]], "script_save() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_Save", false]], "script_stop() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_Stop", false]], "script_undeploy() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Script_Undeploy", false]], "sd_awg (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG", false]], "sd_awg_async (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async", false]], "sd_dig (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG", false]], "sd_module (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module", false]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.select_actuator", false]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.select_actuator", false]], "select_and_pulse() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.select_and_pulse", false]], "select_output_channel() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.select_output_channel", false]], "select_switch_model() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.select_switch_model", false]], "self_calibrate() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_calibrate", false]], "self_calibrate() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_calibrate", false]], "self_test() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_test", false]], "self_test() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_test", false]], "send() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.send", false]], "send_cmd() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[38, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.send_cmd", false]], "send_message() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.send_message", false]], "send_pattern() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_pattern", false]], "send_pulse() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.send_pulse", false]], "send_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence", false]], "send_sequence2() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence2", false]], "send_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_waveform", false]], "sensebase (class in qcodes_contrib_drivers.drivers.lakeshore.modules.sensebase)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase", false]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.sensitivity", false]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.sensitivity", false]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.sensitivity", false]], "sensitivity_value_map (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.sensitivity_value_map", false]], "sensorchannel (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel", false]], "serial (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.serial", false]], "serial_number (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.serial_number", false]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.serial_number", false]], "set_accumulation_cycle_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_accumulation_cycle_time", false]], "set_acquisition_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_acquisition_mode", false]], "set_address() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisa method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa.set_address", false]], "set_address() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[18, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.set_address", false]], "set_address() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisa method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa.set_address", false]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_amplitude", false]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_amplitude", false]], "set_analog_trigger_mask() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_analog_trigger_mask", false]], "set_asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_asynchronous", false]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.set_attribute", false]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.set_attribute", false]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_axis_output", false]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_axis_output", false]], "set_baud_rate() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.set_baud_rate", false]], "set_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_bias_current", false]], "set_channel_amplitude() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_amplitude", false]], "set_channel_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_frequency", false]], "set_channel_grouping() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.set_channel_grouping", false]], "set_channel_offset() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_offset", false]], "set_channel_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_OR_trigger_settings", false]], "set_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_phase", false]], "set_channel_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_settings", false]], "set_channel_wave_shape() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_wave_shape", false]], "set_clksys_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig static method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_clksys_frequency", false]], "set_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_clock_frequency", false]], "set_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_coupling", false]], "set_current() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.set_current", false]], "set_current_camera() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_current_camera", false]], "set_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_current_folder_name", false]], "set_dac_unit() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.set_dac_unit", false]], "set_dacs_zero() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.set_dacs_zero", false]], "set_dacs_zero() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_dacs_zero", false]], "set_daq_trigger_delay() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_delay", false]], "set_daq_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_mode", false]], "set_dark_counts_auto_iv() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_dark_counts_auto_iv", false]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_dc_voltage", false]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_dc_voltage", false]], "set_defaults() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_defaults", false]], "set_digital_filter_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_digital_filter_mode", false]], "set_digital_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_mode", false]], "set_digital_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_source", false]], "set_exposure_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_exposure_time", false]], "set_ext0_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_ext0_OR_trigger_settings", false]], "set_ext_trig() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.set_ext_trig", false]], "set_ext_trigger_behaviour() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_behaviour", false]], "set_ext_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_source", false]], "set_field() (qcodes_contrib_drivers.drivers.lakeshore.model_625.lakeshore625 method)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625.set_field", false]], "set_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_filter_mode", false]], "set_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_fpga_pc_port", false]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_frequency", false]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_frequency", false]], "set_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_full_scale", false]], "set_fw_upgrade_mode() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.set_FW_upgrade_mode", false]], "set_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_grating", false]], "set_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_hvi_register", false]], "set_id() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.set_id", false]], "set_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_impedance", false]], "set_ini_params() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.gratingchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel.set_ini_params", false]], "set_input_delay() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.set_input_delay", false]], "set_ip() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.set_ip", false]], "set_iq_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_iq_modulation", false]], "set_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_jumpmode", false]], "set_magnet_state() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.set_magnet_state", false]], "set_magnet_target() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.set_magnet_target", false]], "set_marker_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_marker_config", false]], "set_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_measurement_periode", false]], "set_mix_chamber_heater_mode() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_mode", false]], "set_mix_chamber_heater_power_range() (qcodes_contrib_drivers.drivers.oxfordinstruments.kelvinox.oxfordinstruments_kelvinox_igh method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_power_range", false]], "set_mode() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode", false]], "set_mode_volt_dc() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode_volt_dc", false]], "set_n_cycles() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_cycles", false]], "set_n_points() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_points", false]], "set_number_accumulations() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_number_accumulations", false]], "set_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_number_pixels", false]], "set_ocp_ma() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.set_OCP_mA", false]], "set_output_current_target() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.set_output_current_target", false]], "set_output_state() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.set_output_state", false]], "set_output_voltage() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.set_output_voltage", false]], "set_parameter_bounds() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_parameter_bounds", false]], "set_persistent() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.set_persistent", false]], "set_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_pixel_width", false]], "set_points_per_cycle() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_points_per_cycle", false]], "set_pol_dacrack() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_pol_dacrack", false]], "set_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_prescaler", false]], "set_pulse_duration_ms() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.set_pulse_duration_ms", false]], "set_pulse_parameters() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[14, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.set_pulse_parameters", false]], "set_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_pxi_trigger", false]], "set_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.attocube.amc100.multiaxispositionparameter method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[16, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqdigitaloutputstate method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magnetcurrentparameters method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.magneticfieldparameters method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.set_raw", false]], "set_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.set_raw", false]], "set_read_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_read_mode", false]], "set_remote_status() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.set_remote_status", false]], "set_sampling_frequency_khz() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.set_sampling_frequency_khz", false]], "set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_sequence", false]], "set_setup() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.set_setup", false]], "set_setup_filename() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_setup_filename", false]], "set_shutter() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_shutter", false]], "set_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_slit", false]], "set_smooth() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_smooth", false]], "set_sub_net_mask() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.set_sub_net_mask", false]], "set_sweep() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.set_sweep", false]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.set_sweep", false]], "set_sweep_parameters() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.set_sweep_parameters", false]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.set_target_ground", false]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.set_target_ground", false]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_position", false]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_position", false]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_range", false]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_range", false]], "set_temp_and_wait() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.set_temp_and_wait", false]], "set_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_temperature", false]], "set_test_signal() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.set_test_signal", false]], "set_timeout() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.set_timeout", false]], "set_timeout() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_timeout", false]], "set_to_fast() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.set_to_fast", false]], "set_to_fft() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.set_to_fft", false]], "set_to_slow() (qcodes_contrib_drivers.drivers.oxfordinstruments.ilm200.oxfordinstruments_ilm200 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200.set_to_slow", false]], "set_trig_mode() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.set_trig_mode", false]], "set_trigger_immediate() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.set_trigger_immediate", false]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_trigger_io", false]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_io", false]], "set_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_trigger_level", false]], "set_trigger_level() (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger method)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.set_trigger_level", false]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_trigger_mode", false]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_mode", false]], "set_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_threshold", false]], "set_virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltage", false]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltages", false]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.set_virtual_voltages", false]], "set_voltage() (qcodes_contrib_drivers.drivers.rigol.rigol_dp932.rigoldp932e method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E.set_voltage", false]], "set_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_voltage", false]], "set_voltage() (qcodes_contrib_drivers.drivers.tektronix.keithley_2401.keithley2400 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401.Keithley2400.set_voltage", false]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.set_waveform_limit", false]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_waveform_limit", false]], "set_waveform_setup() (qcodes_contrib_drivers.drivers.siglent.sds.siglent_sds_120nxe method)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE.set_waveform_setup", false]], "set_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_wavelength", false]], "set_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[17, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.set_zero_offset", false]], "setup_multi_recording() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.setup_multi_recording", false]], "shamrock_sr750 (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750", false]], "shamrockcif (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF", false]], "shamrockcif (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.ShamrockCIF", false]], "shape (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.shape", false]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.shape", false]], "shape_duty_cycle (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_duty_cycle", false]], "shape_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_period", false]], "shape_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_width", false]], "show_system_info() (qcodes_contrib_drivers.drivers.lakeshore.m81_ssm.m81_ssm method)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM.M81_SSM.show_system_info", false]], "shut_down() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.shut_down", false]], "siglent_sdg_2042x (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_2042X", false]], "siglent_sdg_20xx (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_20xx", false]], "siglent_sdg_6022x (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_6022X", false]], "siglent_sdg_60xx (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdg.Siglent_SDG_60xx", false]], "siglent_sds_120nxe (class in qcodes_contrib_drivers.drivers.siglent.sds)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE", false]], "siglentchannel (class in qcodes_contrib_drivers.drivers.siglent.sdx)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentChannel", false]], "siglentsdgchannel (class in qcodes_contrib_drivers.drivers.siglent.sdg_channel)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdg_channel.SiglentSDGChannel", false]], "siglentsdgx (class in qcodes_contrib_drivers.drivers.siglent.sdg)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdg.SiglentSDGx", false]], "siglentsdx (class in qcodes_contrib_drivers.drivers.siglent.sdx)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx", false]], "signalrecovery7270 (class in qcodes_contrib_drivers.drivers.ametek.sr_7270)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270", false]], "signals_addrtget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Signals_AddRTGet", false]], "signals_addrtset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Signals_AddRTSet", false]], "signals_calibrget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Signals_CalibrGet", false]], "signals_measnamesget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Signals_MeasNamesGet", false]], "signals_namesget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Signals_NamesGet", false]], "signals_rangeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Signals_RangeGet", false]], "sim928 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928", false]], "sine (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.sine", false]], "sine_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context", false]], "sine_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.sine_wave", false]], "single (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.SINGLE", false]], "single_software_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition", false]], "single_software_trigger_acquisition_boxcar() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition_boxcar", false]], "single_step() (qcodes_contrib_drivers.drivers.attocube.amc100.amc100axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis.single_step", false]], "single_step() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.single_step", false]], "single_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_trigger_acquisition", false]], "size (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.size", false]], "slitchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel", false]], "slow_command_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.slow_command_timeout", false]], "smart_connect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.smart_connect", false]], "smart_connect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchchannel method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel.smart_connect", false]], "smart_connect() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.smart_connect", false]], "snap() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.snap", false]], "snap_parameters (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.SNAP_PARAMETERS", false]], "snapshot() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggerinstrumentbase method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase.snapshot_base", false]], "snapshot_base() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot_base", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.source", false]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.source", false]], "source_path (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source_path", false]], "sourcebase (class in qcodes_contrib_drivers.drivers.lakeshore.modules.sourcebase)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase.sourceBase", false]], "sp4tmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SP4TModule", false]], "sp6tmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SP6TModule", false]], "sp8tmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SP8TModule", false]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.spacing", false]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.spacing", false]], "spacing (qcodes_contrib_drivers.drivers.siglent.sds.waveformsetup attribute)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup.spacing", false]], "spdtmodule (class in qcodes_contrib_drivers.drivers.minicircuits.ztm)": [[27, "qcodes_contrib_drivers.drivers.Minicircuits.ZTM.SPDTModule", false]], "specommand() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommand", false]], "specommand() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommand", false]], "specommandiniparams() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommandIniParams", false]], "specommandiniparams() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommandIniParams", false]], "specommandsetup() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommandSetup", false]], "specommandsetup() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[20, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommandSetup", false]], "spectrum (class in qcodes_contrib_drivers.drivers.andor.du401)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum", false]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Speed", false]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Speed", false]], "speed_table (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis attribute)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.SPEED_TABLE", false]], "speerror": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SpeError", false]], "split_version_string_into_components() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.split_version_string_into_components", false]], "sqcounts (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts", false]], "sqtalk (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk", false]], "square (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.square", false]], "square_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context", false]], "square_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.square_wave", false]], "sr570 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr570)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570", false]], "sr844 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844", false]], "staircase (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.staircase", false]], "standa_10mwa168 (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Standa_10MWA168", false]], "standard_reply_parser() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.standard_reply_parser", false]], "standby() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.standby", false]], "standby() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.standby", false]], "start (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.start", false]], "start() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.start", false]], "start() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.start", false]], "start() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.start", false]], "start() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.start", false]], "start_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.start_acquisition", false]], "start_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_acquisition", false]], "start_all() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_all", false]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_auto_move", false]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_auto_move", false]], "start_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.start_awg", false]], "start_channel (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.start_channel", false]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.start_continuous_move", false]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_continuous_move", false]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_continuous_move", false]], "start_cooldown() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.start_cooldown", false]], "start_for() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.start_for", false]], "start_gate (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.start_gate", false]], "start_idx (qcodes_contrib_drivers.drivers.siglent.sds.waveformsetup attribute)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup.start_idx", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_marker", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_marker", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_marker", false]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_marker", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on", false]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on_external", false]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on_external", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_once_on", false]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_once_on", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_once_on_external", false]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_once_on_external", false]], "start_recording_scpi() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_recording_scpi", false]], "start_recording_scpi() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.start_recording_scpi", false]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_single_step", false]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_single_step", false]], "start_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.start_sweep", false]], "start_triggered() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_triggered", false]], "start_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start_V", false]], "start_warmup() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.start_warmup", false]], "startup() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.startup", false]], "state (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.state", false]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.state", false]], "state_force_update() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.state_force_update", false]], "state_to_compressed_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.state_to_compressed_list", false]], "state_to_expanded_list() (in module qcodes_contrib_drivers.drivers.qdevil.qswitch)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.state_to_expanded_list", false]], "status (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status", false]], "status (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.status", false]], "status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.status", false]], "status (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.status", false]], "status() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[51, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.status", false]], "step_on_hw_trig (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.step_on_hw_trig", false]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.StepSize", false]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.StepSize", false]], "still_heater_off() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.still_heater_off", false]], "stop (qcodes_contrib_drivers.drivers.siglent.sds.triggermode attribute)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode.STOP", false]], "stop() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[9, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.stop", false]], "stop() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.stop", false]], "stop() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.stop", false]], "stop() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.stop", false]], "stop() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.stop", false]], "stop_automation() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.stop_automation", false]], "stop_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.stop_awg", false]], "stop_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.stop_continuous_move", false]], "stop_move_wave_t() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.stop_move_wave_t", false]], "stop_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.stop_V", false]], "stop_wave_m() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[26, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.stop_wave_m", false]], "stopall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.stopall", false]], "stopmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.stopMove", false]], "stream_data() (qcodes_contrib_drivers.drivers.lakeshore.m81_ssm.m81_ssm method)": [[23, "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM.M81_SSM.stream_data", false]], "sub_jsons() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.sub_jsons", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.SUCCESS_CODES", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.SUCCESS_CODES", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.SUCCESS_CODES", false]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.SUCCESS_CODES", false]], "sum_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.sum_pll_ld", false]], "swap (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.swap", false]], "sweep_center (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_center", false]], "sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context", false]], "sweep_cycles (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_cycles", false]], "sweep_dir (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_dir", false]], "sweep_dwell (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_dwell", false]], "sweep_dwell_time (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_dwell_time", false]], "sweep_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_en", false]], "sweep_execute() (qcodes_contrib_drivers.drivers.rigol.rigol_dsg3136b.rigoldsg3136b method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B.RigolDSG3136B.sweep_execute", false]], "sweep_field() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.sweep_field", false]], "sweep_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_mode", false]], "sweep_psu_output() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.sweep_psu_output", false]], "sweep_reset() (qcodes_contrib_drivers.drivers.rigol.rigol_dsg3136b.rigoldsg3136b method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B.RigolDSG3136B.sweep_reset", false]], "sweep_small_field_step() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.sweep_small_field_step", false]], "sweep_span (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_span", false]], "sweep_start (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_start", false]], "sweep_start_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_start_freq", false]], "sweep_step_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_step_freq", false]], "sweep_stop (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_stop", false]], "sweep_stop_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_stop_freq", false]], "sweep_trigger (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_trigger", false]], "sweep_voltage_measure() (qcodes_contrib_drivers.drivers.tektronix.keithley_2401.keithley2400 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401.Keithley2400.sweep_voltage_measure", false]], "switch_model (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.qcodes_driver.cryoswitchcontrollerdriver attribute)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver.switch_model", false]], "switchable() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.switchable", false]], "switchchannel (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel", false]], "sync() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.sync", false]], "synchronize_phase() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.synchronize_phase", false]], "synthesizer_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.synthesizer_mode", false]], "synthhdchannel (class in qcodes_contrib_drivers.drivers.windfreak.windfreak_synthhd)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD.SynthHDChannel", false]], "sztypetoname() (in module qcodes_contrib_drivers.drivers.spectrum.m4i)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.szTypeToName", false]], "target_position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_position", false]], "target_range (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_range", false]], "task (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task", false]], "tcp_communication_handler() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.TCP_communication_handler", false]], "tcplog_chsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.TCPLog_ChsSet", false]], "tcplog_oversamplset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.TCPLog_OversamplSet", false]], "tcplog_start() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.TCPLog_Start", false]], "tcplog_statusget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.TCPLog_StatusGet", false]], "tcplog_stop() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.TCPLog_Stop", false]], "tdc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.TDC001", false]], "tektronix_awg520 (class in qcodes_contrib_drivers.drivers.tektronix.awg520)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520", false]], "temperature (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.temperature", false]], "test_internals() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.test_internals", false]], "thermotekt255p (class in qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p)": [[51, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p", false]], "thorlab_pm100d (class in qcodes_contrib_drivers.drivers.thorlabs.pm100d)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.PM100D.Thorlab_PM100D", false]], "thorlabs_apt (class in qcodes_contrib_drivers.drivers.thorlabs.private.apt)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT", false]], "thorlabs_k10cr1 (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1", false]], "thorlabs_kdc101 (class in qcodes_contrib_drivers.drivers.thorlabs.kdc101)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.KDC101.Thorlabs_KDC101", false]], "thorlabs_kls1550 (class in qcodes_contrib_drivers.drivers.thorlabs.kls1550)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550.Thorlabs_KLS1550", false]], "thorlabs_mff10x (class in qcodes_contrib_drivers.drivers.thorlabs.mff10x)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x", false]], "thorlabs_prm1z8 (class in qcodes_contrib_drivers.drivers.thorlabs.prm1z8)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8", false]], "thorlabs_tdc001 (class in qcodes_contrib_drivers.drivers.thorlabs.tdc001)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.TDC001.Thorlabs_TDC001", false]], "thorlabsexception": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsException", false]], "thorlabshwtype (class in qcodes_contrib_drivers.drivers.thorlabs.private.apt)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType", false]], "threaded() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.threaded", false]], "threedswp_filepathsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_FilePathsGet", false]], "threedswp_stpch1limitsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1LimitsGet", false]], "threedswp_stpch1limitsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1LimitsSet", false]], "threedswp_stpch1propsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1PropsGet", false]], "threedswp_stpch1propsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1PropsSet", false]], "threedswp_stpch1signalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1SignalGet", false]], "threedswp_stpch1signalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1SignalSet", false]], "threedswp_stpch1timingget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1TimingGet", false]], "threedswp_stpch1timingset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh1TimingSet", false]], "threedswp_stpch2limitsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2LimitsGet", false]], "threedswp_stpch2limitsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2LimitsSet", false]], "threedswp_stpch2propsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2PropsGet", false]], "threedswp_stpch2propsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2PropsSet", false]], "threedswp_stpch2signalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2SignalGet", false]], "threedswp_stpch2signalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2SignalSet", false]], "threedswp_stpch2timingget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2TimingGet", false]], "threedswp_stpch2timingset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_StpCh2TimingSet", false]], "threedswp_swpacqchsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpAcqChsGet", false]], "threedswp_swpacqchsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpAcqChsSet", false]], "threedswp_swpchlimitsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChLimitsGet", false]], "threedswp_swpchlimitsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChLimitsSet", false]], "threedswp_swpchmlsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChMLSGet", false]], "threedswp_swpchmlsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChMLSSet", false]], "threedswp_swpchmodeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChModeGet", false]], "threedswp_swpchmodeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChModeSet", false]], "threedswp_swpchpropsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChPropsGet", false]], "threedswp_swpchpropsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChPropsSet", false]], "threedswp_swpchsignalget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChSignalGet", false]], "threedswp_swpchsignalset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChSignalSet", false]], "threedswp_swpchtimingget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChTimingGet", false]], "threedswp_swpchtimingset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpChTimingSet", false]], "threedswp_swpsaveoptionsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpSaveOptionsGet", false]], "threedswp_swpsaveoptionsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpSaveOptionsSet", false]], "threedswp_swpstatusget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_SwpStatusGet", false]], "threedswp_timingenable() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingEnable", false]], "threedswp_timingrowlimitget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingRowLimitGet", false]], "threedswp_timingrowlimitset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingRowLimitSet", false]], "threedswp_timingrowmethodsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingRowMethodsGet", false]], "threedswp_timingrowmethodsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingRowMethodsSet", false]], "threedswp_timingrowvalsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingRowValsGet", false]], "threedswp_timingrowvalsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingRowValsSet", false]], "threedswp_timingsend() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwp_TimingSend", false]], "threedswpopen() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwpOpen", false]], "threedswpstart() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwpStart", false]], "threedswpstop() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.ThreeDSwpStop", false]], "time_bin_edges (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.time_bin_edges", false]], "time_bins (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.correlationmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement.time_bins", false]], "time_bins (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.countermeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement.time_bins", false]], "time_bins (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.histogramlogbinsmeasurement attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement.time_bins", false]], "time_s() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.time_s", false]], "timearray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray", false]], "timer_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.timer_cmd", false]], "timestamp (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.coincidencevirtualchannel attribute)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel.timestamp", false]], "timestatistics (class in qcodes_contrib_drivers.drivers.tektronix.fca3100)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics", false]], "timetagger (class in qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger", false]], "timetaggerinstrumentbase (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase", false]], "timetaggermeasurement (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerMeasurement", false]], "timetaggermodule (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule", false]], "timetaggersynchronizedmeasurements (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements", false]], "timetaggervirtualchannel (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel", false]], "to_setpoint() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.to_setpoint", false]], "to_zero() (qcodes_contrib_drivers.drivers.oxfordinstruments.ips120.oxfordinstruments_ips120 method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120.to_zero", false]], "total_depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.total_depth", false]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.total_deviation", false]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.total_deviation", false]], "trace_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context", false]], "tracenotready": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.TraceNotReady", false]], "traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.traces", false]], "tracking_init() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.tracking_init", false]], "transition_type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.transition_type", false]], "trapez_fall (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_fall", false]], "trapez_height (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_height", false]], "trapez_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_period", false]], "trapez_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_rise", false]], "tri_waveform (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.tri_waveform", false]], "triangle (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.triangle", false]], "triangle_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context", false]], "triangle_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_period", false]], "triangle_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_rise", false]], "triangle_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.triangle_wave", false]], "trig_out_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_enable", false]], "trig_out_on_cycle (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_on_cycle", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Trigger", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Trigger", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Trigger", false]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Trigger", false]], "trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger", false]], "trigger() (qcodes_contrib_drivers.drivers.rigol.rigol_dsg3136b.rigoldsg3136b method)": [[36, "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B.RigolDSG3136B.trigger", false]], "trigger() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.trigger", false]], "trigger_impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_impedance", false]], "trigger_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.TRIGGER_MAPPING", false]], "trigger_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_mode", false]], "trigger_out (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger_out", false]], "triggerdown (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerDown", false]], "triggermode (class in qcodes_contrib_drivers.drivers.siglent.sds)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode", false]], "triggerup (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerUp", false]], "triton (class in qcodes_contrib_drivers.drivers.oxfordinstruments.triton)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton", false]], "tst001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.TST001", false]], "type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.type", false]], "type() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel class method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.type", false]], "typevalidator (class in qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TypeValidator", false]], "ucurposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurPosition", false]], "ucurspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurSpeed", false]], "udp_communication_handler() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.UDP_communication_handler", false]], "udp_packet_handler() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.UDP_packet_handler", false]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.gratingchannel property)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel.unit", false]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel property)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.unit", false]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.slitchannel property)": [[19, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel.unit", false]], "unregister_measurement() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.timetaggersynchronizedmeasurements method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements.unregister_measurement", false]], "update_ch_unit() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.update_ch_unit", false]], "update_lin_traces() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[11, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.update_lin_traces", false]], "update_traces() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.update_traces", false]], "update_unit() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.update_unit", false]], "update_units_if_constant_sample_rate() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.update_units_if_constant_sample_rate", false]], "upgrade_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.UPGRADE_cmd", false]], "upload_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_sequence_program", false]], "upload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.upload_waveform", false]], "upload_waveform() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.upload_waveform", false]], "upload_waveform() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_waveform", false]], "uploader_ready() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.uploader_ready", false]], "uposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.uPosition", false]], "upwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Upwr", false]], "usb_communication_handler() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.USB_communication_handler", false]], "usb_packet_handler() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.USB_packet_handler", false]], "userin_calibrset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserIn_CalibrSet", false]], "userout_calcsignalconfigget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_CalcSignalConfigGet", false]], "userout_calcsignalconfigset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_CalcSignalConfigSet", false]], "userout_calcsignalnameget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_CalcSignalNameGet", false]], "userout_calcsignalnameset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_CalcSignalNameSet", false]], "userout_calibrset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_CalibrSet", false]], "userout_limitsget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_LimitsGet", false]], "userout_limitsset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_LimitsSet", false]], "userout_modeget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_ModeGet", false]], "userout_modeset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_ModeSet", false]], "userout_monitorchget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_MonitorChGet", false]], "userout_monitorchset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_MonitorChSet", false]], "userout_slewrateget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_SlewRateGet", false]], "userout_slewrateset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.UserOut_SlewRateSet", false]], "util_acqperiodget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_AcqPeriodGet", false]], "util_acqperiodset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_AcqPeriodSet", false]], "util_layoutload() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_LayoutLoad", false]], "util_layoutsave() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_LayoutSave", false]], "util_lock() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_Lock", false]], "util_quit() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_Quit", false]], "util_rtfreqget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_RTFreqGet", false]], "util_rtfreqset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_RTFreqSet", false]], "util_rtoversamplget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_RTOversamplGet", false]], "util_rtoversamplset() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_RTOversamplSet", false]], "util_sessionpathget() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_SessionPathGet", false]], "util_settingsload() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_SettingsLoad", false]], "util_settingssave() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_SettingsSave", false]], "util_unlock() (qcodes_contrib_drivers.drivers.specs.specs_tramea.nanonistramea method)": [[39, "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea.Util_UnLock", false]], "utility_cmd() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.utility_cmd", false]], "uusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Uusb", false]], "validate() (qcodes_contrib_drivers.drivers.lakeshore.modules.bcs10.validateinput method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10.ValidateInput.validate", false]], "validate() (qcodes_contrib_drivers.drivers.lakeshore.modules.vs10.validateinput method)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10.ValidateInput.validate", false]], "validate() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.arraylikevalidator method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ArrayLikeValidator.validate", false]], "validate() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.logspacenumvalidator method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceNumValidator.validate", false]], "validate() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.logspacestartvalidator method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceStartValidator.validate", false]], "validate() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.logspacestopvalidator method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceStopValidator.validate", false]], "validate() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.typevalidator method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TypeValidator.validate", false]], "validate_port_contact() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.validate_port_contact", false]], "validate_reply() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.validate_reply", false]], "validate_selected_channel() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.cryoswitchcontroller.cryoswitch method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch.validate_selected_channel", false]], "validateinput (class in qcodes_contrib_drivers.drivers.lakeshore.modules.bcs10)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10.ValidateInput", false]], "validateinput (class in qcodes_contrib_drivers.drivers.lakeshore.modules.vs10)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10.ValidateInput", false]], "validators (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.delegateparameterwithoutparentvalidator property)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.DelegateParameterWithoutParentValidator.validators", false]], "valon5015 (class in qcodes_contrib_drivers.drivers.valon.valon_5015)": [[54, "qcodes_contrib_drivers.drivers.Valon.Valon_5015.Valon5015", false]], "value (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.value", false]], "value (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2trigger_context property)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context.value", false]], "value_sensitivity_map (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.value_sensitivity_map", false]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.values_V", false]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.values_V", false]], "vaunix_lda (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[55, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA", false]], "vcl2csv() (qcodes_contrib_drivers.drivers.oxfordinstruments.triton.triton method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton.vcl2csv", false]], "vendor (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.vendor", false]], "verbose (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task attribute)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[40, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.verbose", false]], "verbose (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt attribute)": [[53, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.verbose", false]], "version (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.version", false]], "version (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.version", false]], "version (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[52, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.version", false]], "version() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.version", false]], "vhigh_ihigh (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ihigh", false]], "vhigh_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ilow", false]], "video_polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.video_polarity", false]], "virtual_channel_lists (qcodes_contrib_drivers.drivers.swabianinstruments.swabian_instruments_time_tagger.timetagger property)": [[48, "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger.virtual_channel_lists", false]], "virtual_detune() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_detune", false]], "virtual_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep", false]], "virtual_sweep2d() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep2d", false]], "virtual_sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context", false]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_voltage", false]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.virtual_voltage", false]], "vlow_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vlow_ilow", false]], "vm10 (class in qcodes_contrib_drivers.drivers.lakeshore.modules.vm10)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.vm10.vm10", false]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.voltage", false]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.voltage", false]], "voltage (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.voltage", false]], "voltage (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.voltage", false]], "vs10 (class in qcodes_contrib_drivers.drivers.lakeshore.modules.vs10)": [[24, "qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10.vs10", false]], "wait() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.wait", false]], "wait() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[50, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.wait", false]], "wait_for_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.wait_for_acquisition", false]], "wait_ready() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[44, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.wait_ready", false]], "wait_stability() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[28, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.wait_stability", false]], "wait_until_field_depersisted() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_field_depersisted", false]], "wait_until_field_persistent() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_field_persistent", false]], "wait_until_field_stable() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_field_stable", false]], "wait_until_field_stable_timeout() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_field_stable_timeout", false]], "wait_until_finished() (qcodes_contrib_drivers.drivers.swabianinstruments.private.time_tagger.measurementcontrolmixin method)": [[49, "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin.wait_until_finished", false]], "wait_until_temperature_stable_std_control() (qcodes_contrib_drivers.drivers.oxfordinstruments.proteox.oidecs method)": [[31, "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS.wait_until_temperature_stable_std_control", false]], "wait_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wait_uploaded", false]], "waitmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.waitMove", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.WARNING_CODES", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.WARNING_CODES", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.WARNING_CODES", false]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[7, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.WARNING_CODES", false]], "wave_number (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wave_number", false]], "waveform (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform", false]], "waveform() (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.waveform", false]], "waveform_to_csv() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_csv", false]], "waveform_to_wave() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_wave", false]], "waveformreference (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference", false]], "waveformsetup (class in qcodes_contrib_drivers.drivers.siglent.sds)": [[41, "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup", false]], "websqcontrolqcode (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[43, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.WebSQControlqcode", false]], "wideband (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.wideband", false]], "width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.width", false]], "wifi_gateway_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_gateway_address", false]], "wifi_hotspot_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_password", false]], "wifi_hotspot_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_ssid", false]], "wifi_ip_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_ip_address", false]], "wifi_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_mode", false]], "wifi_off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_off", false]], "wifi_on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_on", false]], "wifi_rssi (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_rssi", false]], "wifi_station_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_password", false]], "wifi_station_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_ssid", false]], "wifi_subnet_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_subnet_address", false]], "windfreaksynthhd (class in qcodes_contrib_drivers.drivers.windfreak.windfreak_synthhd)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD.WindfreakSynthHD", false]], "windfreaksynthusb3 (class in qcodes_contrib_drivers.drivers.windfreak.windfreak_synthusb3)": [[56, "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3.WindfreakSynthUSB3", false]], "windsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[46, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.WindSts", false]], "work_hours (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.work_hours", false]], "wrap_dll_function() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function", false]], "wrap_dll_function_checked() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[29, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function_checked", false]], "write() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.write", false]], "write() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write", false]], "write() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[25, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.write", false]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write", false]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write", false]], "write() (qcodes_contrib_drivers.drivers.qdevil.qswitch.qswitch method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch.write", false]], "write() (qcodes_contrib_drivers.drivers.qphox.cryoswitchcontroller.libphox.labphox method)": [[34, "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox.write", false]], "write() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[35, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.write", false]], "write() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.write", false]], "write() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[51, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.write", false]], "write_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write_channel", false]], "write_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel", false]], "write_channel_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel_floats", false]], "write_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[32, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write_floats", false]], "write_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga", false]], "write_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[22, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga_array", false]], "write_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[47, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.write_module", false]], "write_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_pin", false]], "write_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_port", false]], "write_raw() (qcodes_contrib_drivers.drivers.ametek.sr_7270.signalrecovery7270 method)": [[4, "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270.write_raw", false]], "write_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.write_raw", false]], "write_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[15, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write_raw", false]], "x_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.x_pixels", false]], "y_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[5, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.y_pixels", false]], "year (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[42, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.year", false]], "zero_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[30, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.zero_position", false]], "zihdawg8 (class in qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8)": [[57, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8", false]], "zvl13 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[37, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13", false]]}, "objects": {"qcodes_contrib_drivers": [[0, 0, 0, "-", "drivers"]], "qcodes_contrib_drivers.drivers": [[1, 0, 0, "-", "Advantech"], [2, 0, 0, "-", "Agilent"], [3, 0, 0, "-", "AimTTi"], [4, 0, 0, "-", "Ametek"], [5, 0, 0, "-", "Andor"], [6, 0, 0, "-", "Attocube"], [8, 0, 0, "-", "Aviosys"], [9, 0, 0, "-", "Bilt"], [10, 0, 0, "-", "BlueFors"], [0, 0, 0, "-", "CMTS5048"], [11, 0, 0, "-", "CopperMountain"], [12, 0, 0, "-", "Cryocon"], [13, 0, 0, "-", "Cryogenic"], [14, 0, 0, "-", "DaylightSolutions"], [15, 0, 0, "-", "ERAInstruments"], [16, 0, 0, "-", "GeneralMicrowave"], [17, 0, 0, "-", "Gentec"], [18, 0, 0, "-", "Holzworth"], [19, 0, 0, "-", "Horiba"], [21, 0, 0, "-", "Keysight"], [23, 0, 0, "-", "Lakeshore"], [25, 0, 0, "-", "LighthousePhotonics"], [26, 0, 0, "-", "M2"], [27, 0, 0, "-", "Minicircuits"], [28, 0, 0, "-", "MontanaInstruments"], [29, 0, 0, "-", "NationalInstruments"], [30, 0, 0, "-", "Newport"], [31, 0, 0, "-", "OxfordInstruments"], [32, 0, 0, "-", "QDevil"], [33, 0, 0, "-", "QphoX"], [35, 0, 0, "-", "QuTech"], [36, 0, 0, "-", "Rigol"], [37, 0, 0, "-", "RohdeSchwarz"], [39, 0, 0, "-", "SPECS"], [40, 0, 0, "-", "Shamrock"], [41, 0, 0, "-", "Siglent"], [42, 0, 0, "-", "SignalCore"], [43, 0, 0, "-", "SingleQuantum"], [44, 0, 0, "-", "Spectrum"], [46, 0, 0, "-", "Standa"], [47, 0, 0, "-", "StanfordResearchSystems"], [48, 0, 0, "-", "SwabianInstruments"], [50, 0, 0, "-", "Tektronix"], [51, 0, 0, "-", "Thermotek"], [52, 0, 0, "-", "Thorlabs"], [54, 0, 0, "-", "Valon"], [55, 0, 0, "-", "Vaunix"], [56, 0, 0, "-", "Windfreak"], [57, 0, 0, "-", "ZurichInstruments"], [58, 0, 0, "-", "physik_instrumente"]], "qcodes_contrib_drivers.drivers.Advantech": [[1, 0, 0, "-", "PCIE_1751"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751": [[1, 1, 1, "", "Advantech_PCIE_1751"], [1, 4, 1, "", "DAQNaviException"], [1, 4, 1, "", "DAQNaviWarning"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751": [[1, 2, 1, "", "ERRORMSG"], [1, 3, 1, "", "check"], [1, 3, 1, "", "close"], [1, 3, 1, "", "get_idn"], [1, 3, 1, "", "port_count"], [1, 3, 1, "", "read_pin"], [1, 3, 1, "", "read_port"], [1, 3, 1, "", "write_pin"], [1, 3, 1, "", "write_port"]], "qcodes_contrib_drivers.drivers.Agilent": [[2, 0, 0, "-", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A": [[2, 1, 1, "", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "power_parser"]], "qcodes_contrib_drivers.drivers.AimTTi": [[3, 0, 0, "-", "EL320P"]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P": [[3, 1, 1, "", "EL320P"]], "qcodes_contrib_drivers.drivers.Ametek": [[4, 0, 0, "-", "SR_7270"]], "qcodes_contrib_drivers.drivers.Ametek.SR_7270": [[4, 1, 1, "", "Signalrecovery7270"]], "qcodes_contrib_drivers.drivers.Ametek.SR_7270.Signalrecovery7270": [[4, 3, 1, "", "ask_raw"], [4, 3, 1, "", "get_idn"], [4, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.Andor": [[5, 0, 0, "-", "DU401"]], "qcodes_contrib_drivers.drivers.Andor.DU401": [[5, 1, 1, "", "Andor_DU401"], [5, 1, 1, "", "Spectrum"], [5, 1, 1, "", "atmcd64d"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401": [[5, 3, 1, "", "close"], [5, 2, 1, "", "firmware_build"], [5, 2, 1, "", "firmware_version"], [5, 3, 1, "", "get_idn"], [5, 2, 1, "", "head_model"], [5, 2, 1, "", "serial_number"], [5, 2, 1, "", "x_pixels"], [5, 2, 1, "", "y_pixels"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum": [[5, 3, 1, "", "get_raw"], [5, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d": [[5, 3, 1, "", "cooler_off"], [5, 3, 1, "", "cooler_on"], [5, 2, 1, "", "dll"], [5, 3, 1, "", "error_check"], [5, 3, 1, "", "get_acquired_data"], [5, 3, 1, "", "get_acquisition_timings"], [5, 3, 1, "", "get_camera_handle"], [5, 3, 1, "", "get_camera_serial_number"], [5, 3, 1, "", "get_detector"], [5, 3, 1, "", "get_filter_mode"], [5, 3, 1, "", "get_hardware_version"], [5, 3, 1, "", "get_head_model"], [5, 3, 1, "", "get_status"], [5, 3, 1, "", "get_temperature"], [5, 3, 1, "", "get_temperature_range"], [5, 3, 1, "", "initialize"], [5, 3, 1, "", "is_cooler_on"], [5, 3, 1, "", "set_accumulation_cycle_time"], [5, 3, 1, "", "set_acquisition_mode"], [5, 3, 1, "", "set_current_camera"], [5, 3, 1, "", "set_exposure_time"], [5, 3, 1, "", "set_filter_mode"], [5, 3, 1, "", "set_number_accumulations"], [5, 3, 1, "", "set_read_mode"], [5, 3, 1, "", "set_shutter"], [5, 3, 1, "", "set_temperature"], [5, 3, 1, "", "set_trigger_mode"], [5, 3, 1, "", "shut_down"], [5, 3, 1, "", "start_acquisition"], [5, 2, 1, "", "verbose"], [5, 3, 1, "", "wait_for_acquisition"]], "qcodes_contrib_drivers.drivers.Attocube": [[6, 0, 0, "-", "AMC100"], [6, 0, 0, "-", "ANC300"], [6, 0, 0, "-", "ANC300sim"], [6, 0, 0, "-", "ANC350"], [7, 0, 0, "-", "ANC350Lib"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100": [[6, 1, 1, "", "AMC100Axis"], [6, 1, 1, "", "AttocubeAMC100"], [6, 1, 1, "", "MultiAxisPosition"], [6, 1, 1, "", "MultiAxisPositionParameter"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.AMC100Axis": [[6, 3, 1, "", "move_to_reference_position"], [6, 3, 1, "", "single_step"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.AttocubeAMC100": [[6, 3, 1, "", "close"], [6, 5, 1, "", "exception_type"], [6, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPosition": [[6, 2, 1, "", "axis_1"], [6, 2, 1, "", "axis_2"], [6, 2, 1, "", "axis_3"]], "qcodes_contrib_drivers.drivers.Attocube.AMC100.MultiAxisPositionParameter": [[6, 3, 1, "", "get_raw"], [6, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300": [[6, 1, 1, "", "ANC300"], [6, 1, 1, "", "Anc300Axis"], [6, 1, 1, "", "Anc300TriggerOut"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300": [[6, 3, 1, "", "ask_raw"], [6, 3, 1, "", "close"], [6, 3, 1, "", "getall"], [6, 3, 1, "", "stopall"], [6, 3, 1, "", "version"], [6, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "ac"], [6, 2, 1, "", "amplitude"], [6, 2, 1, "", "dc"], [6, 2, 1, "", "filter"], [6, 2, 1, "", "frequency"], [6, 2, 1, "", "mode"], [6, 2, 1, "", "move"], [6, 2, 1, "", "offset"], [6, 2, 1, "", "start"], [6, 3, 1, "", "stopMove"], [6, 2, 1, "", "triggerDown"], [6, 2, 1, "", "triggerUp"], [6, 2, 1, "", "voltage"], [6, 3, 1, "", "waitMove"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim": [[6, 1, 1, "", "MockVisa"], [6, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa": [[6, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle": [[6, 3, 1, "", "ask"], [6, 3, 1, "", "clear"], [6, 3, 1, "", "close"], [6, 2, 1, "", "cmddef"], [6, 3, 1, "", "query"], [6, 3, 1, "", "read"], [6, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350": [[6, 1, 1, "", "ANC350"], [6, 1, 1, "", "Anc350Axis"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350": [[6, 3, 1, "", "close"], [6, 3, 1, "", "get_idn"], [6, 3, 1, "", "save_params"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis": [[6, 2, 1, "", "actuator"], [6, 2, 1, "", "actuator_name"], [6, 2, 1, "", "amplitude"], [6, 2, 1, "", "capacitance"], [6, 3, 1, "", "disable_auto_move"], [6, 3, 1, "", "enable_auto_move"], [6, 2, 1, "", "frequency"], [6, 3, 1, "", "multiple_steps"], [6, 2, 1, "", "position"], [6, 3, 1, "", "single_step"], [6, 3, 1, "", "start_continuous_move"], [6, 2, 1, "", "status"], [6, 3, 1, "", "stop_continuous_move"], [6, 2, 1, "", "target_position"], [6, 2, 1, "", "target_range"], [6, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibAmplitudeControlMode"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibSignalEdge"], [7, 1, 1, "", "ANC350LibTriggerInputMode"], [7, 1, 1, "", "ANC350LibTriggerOutputMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"], [7, 1, 1, "", "ANC350v3Lib"], [7, 4, 1, "", "ANC350v3LibError"], [7, 1, 1, "", "ANC350v4Lib"], [7, 0, 0, "-", "interface"], [7, 0, 0, "-", "v3"], [7, 0, 0, "-", "v4"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode": [[7, 2, 1, "", "Amplitude"], [7, 2, 1, "", "Speed"], [7, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge": [[7, 2, 1, "", "Falling"], [7, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode": [[7, 2, 1, "", "Coarse"], [7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "IcHaus"], [7, 2, 1, "", "Position"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "configure_a_quad_b_in"], [7, 3, 1, "", "configure_a_quad_b_out"], [7, 3, 1, "", "configure_duty_cycle"], [7, 3, 1, "", "configure_ext_trigger"], [7, 3, 1, "", "configure_nsl_trigger"], [7, 3, 1, "", "configure_nsl_trigger_axis"], [7, 3, 1, "", "configure_rng_trigger"], [7, 3, 1, "", "configure_rng_trigger_eps"], [7, 3, 1, "", "configure_rng_trigger_pol"], [7, 3, 1, "", "connect"], [7, 3, 1, "", "disconnect"], [7, 3, 1, "", "discover"], [7, 3, 1, "", "enable_ref_auto_reset"], [7, 3, 1, "", "enable_ref_auto_update"], [7, 3, 1, "", "enable_sensor"], [7, 3, 1, "", "get_actuator_name"], [7, 3, 1, "", "get_actuator_type"], [7, 3, 1, "", "get_amplitude"], [7, 3, 1, "", "get_axis_status"], [7, 3, 1, "", "get_device_config"], [7, 3, 1, "", "get_device_info"], [7, 3, 1, "", "get_firmware_version"], [7, 3, 1, "", "get_frequency"], [7, 3, 1, "", "get_position"], [7, 3, 1, "", "get_ref_position"], [7, 3, 1, "", "measure_capacitance"], [7, 3, 1, "", "move_reference"], [7, 3, 1, "", "reset_position"], [7, 3, 1, "", "save_params"], [7, 3, 1, "", "select_actuator"], [7, 3, 1, "", "set_amplitude"], [7, 3, 1, "", "set_axis_output"], [7, 3, 1, "", "set_dc_voltage"], [7, 3, 1, "", "set_frequency"], [7, 3, 1, "", "set_target_position"], [7, 3, 1, "", "set_target_range"], [7, 3, 1, "", "start_auto_move"], [7, 3, 1, "", "start_continuous_move"], [7, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError": [[7, 3, 1, "", "__init__"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "get_dc_voltage"], [7, 3, 1, "", "get_lut_name"], [7, 3, 1, "", "load_lut_file"], [7, 3, 1, "", "register_external_ip"], [7, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibAmplitudeControlMode"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibSignalEdge"], [7, 1, 1, "", "ANC350LibTriggerInputMode"], [7, 1, 1, "", "ANC350LibTriggerOutputMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode": [[7, 2, 1, "", "Amplitude"], [7, 2, 1, "", "Speed"], [7, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge": [[7, 2, 1, "", "Falling"], [7, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode": [[7, 2, 1, "", "Coarse"], [7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "IcHaus"], [7, 2, 1, "", "Position"], [7, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"], [7, 1, 1, "", "ANC350v3Lib"], [7, 4, 1, "", "ANC350v3LibError"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "configure_a_quad_b_in"], [7, 3, 1, "", "configure_a_quad_b_out"], [7, 3, 1, "", "configure_duty_cycle"], [7, 3, 1, "", "configure_ext_trigger"], [7, 3, 1, "", "configure_nsl_trigger"], [7, 3, 1, "", "configure_nsl_trigger_axis"], [7, 3, 1, "", "configure_rng_trigger"], [7, 3, 1, "", "configure_rng_trigger_eps"], [7, 3, 1, "", "configure_rng_trigger_pol"], [7, 3, 1, "", "connect"], [7, 3, 1, "", "disconnect"], [7, 3, 1, "", "discover"], [7, 3, 1, "", "enable_ref_auto_reset"], [7, 3, 1, "", "enable_ref_auto_update"], [7, 3, 1, "", "enable_sensor"], [7, 3, 1, "", "get_actuator_name"], [7, 3, 1, "", "get_actuator_type"], [7, 3, 1, "", "get_amplitude"], [7, 3, 1, "", "get_axis_status"], [7, 3, 1, "", "get_device_config"], [7, 3, 1, "", "get_device_info"], [7, 3, 1, "", "get_firmware_version"], [7, 3, 1, "", "get_frequency"], [7, 3, 1, "", "get_position"], [7, 3, 1, "", "get_ref_position"], [7, 3, 1, "", "measure_capacitance"], [7, 3, 1, "", "move_reference"], [7, 3, 1, "", "reset_position"], [7, 3, 1, "", "save_params"], [7, 3, 1, "", "select_actuator"], [7, 3, 1, "", "set_amplitude"], [7, 3, 1, "", "set_axis_output"], [7, 3, 1, "", "set_dc_voltage"], [7, 3, 1, "", "set_frequency"], [7, 3, 1, "", "set_target_position"], [7, 3, 1, "", "set_target_range"], [7, 3, 1, "", "start_auto_move"], [7, 3, 1, "", "start_continuous_move"], [7, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError": [[7, 3, 1, "", "__init__"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4": [[7, 1, 1, "", "ANC350LibActuatorType"], [7, 1, 1, "", "ANC350LibDeviceType"], [7, 4, 1, "", "ANC350LibError"], [7, 1, 1, "", "ANC350LibExternalTriggerMode"], [7, 1, 1, "", "ANC350LibTriggerPolarity"], [7, 4, 1, "", "ANC350v3LibError"], [7, 1, 1, "", "ANC350v4Lib"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType": [[7, 2, 1, "", "Goniometer"], [7, 2, 1, "", "Linear"], [7, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType": [[7, 2, 1, "", "Fps"], [7, 2, 1, "", "Nothing"], [7, 2, 1, "", "Num"], [7, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError": [[7, 2, 1, "", "SUCCESS_CODES"], [7, 2, 1, "", "WARNING_CODES"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "check_error"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode": [[7, 2, 1, "", "Disable"], [7, 2, 1, "", "Quadrature"], [7, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity": [[7, 2, 1, "", "High"], [7, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError": [[7, 3, 1, "", "__init__"], [7, 2, 1, "", "code"], [7, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib": [[7, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [7, 3, 1, "", "__init__"], [7, 3, 1, "", "get_dc_voltage"], [7, 3, 1, "", "get_lut_name"], [7, 3, 1, "", "load_lut_file"], [7, 3, 1, "", "register_external_ip"], [7, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Aviosys": [[8, 0, 0, "-", "IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S": [[8, 1, 1, "", "AviosysIPPower9258S"], [8, 1, 1, "", "Aviosys_IP_Power_9258S"], [8, 1, 1, "", "PowerChannel"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.AviosysIPPower9258S": [[8, 2, 1, "", "address"], [8, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel": [[8, 2, 1, "", "CHANNEL_IDS"], [8, 2, 1, "", "CHANNEL_NAMES"]], "qcodes_contrib_drivers.drivers.Bilt": [[9, 0, 0, "-", "ITest"]], "qcodes_contrib_drivers.drivers.Bilt.ITest": [[9, 1, 1, "", "ITest"], [9, 1, 1, "", "iTestChannel"], [9, 1, 1, "", "iTestMultiChannelParameter"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest": [[9, 3, 1, "", "__init__"], [9, 3, 1, "", "chan_to_ic"], [9, 3, 1, "", "chan_to_id"], [9, 3, 1, "", "print_dac_voltages"], [9, 3, 1, "", "set_dacs_zero"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel": [[9, 3, 1, "", "__init__"], [9, 3, 1, "", "clear_alarm"], [9, 3, 1, "", "start"], [9, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.BlueFors": [[10, 0, 0, "-", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors": [[10, 1, 1, "", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_pressure"], [10, 3, 1, "", "get_temperature"]], "qcodes_contrib_drivers.drivers.CopperMountain": [[11, 0, 0, "-", "M5180"], [11, 0, 0, "-", "S5048"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180": [[11, 1, 1, "", "FrequencySweepMagPhase"], [11, 1, 1, "", "M5180"], [11, 1, 1, "", "PointIQ"], [11, 1, 1, "", "PointMagPhase"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_raw"], [11, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_s"], [11, 3, 1, "", "reset_averages"], [11, 3, 1, "", "update_lin_traces"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048": [[11, 6, 1, "", "CMTIntParser"], [11, 1, 1, "", "CMTS5048"], [11, 1, 1, "", "CMTS5048Trace"], [11, 4, 1, "", "TraceNotReady"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048": [[11, 3, 1, "", "invalidate_trace"], [11, 3, 1, "", "reset"], [11, 3, 1, "", "run_N_times"], [11, 3, 1, "", "run_continously"], [11, 3, 1, "", "startup"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace": [[11, 3, 1, "", "get_raw"], [11, 3, 1, "", "prepare_trace"]], "qcodes_contrib_drivers.drivers.Cryocon": [[12, 0, 0, "-", "cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26": [[12, 1, 1, "", "Cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic": [[13, 0, 0, "-", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C": [[13, 1, 1, "", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C": [[13, 2, 1, "", "default_current_ramp_limit"], [13, 2, 1, "", "default_max_current_ramp_limit"], [13, 3, 1, "", "get_idn"], [13, 3, 1, "", "query"]], "qcodes_contrib_drivers.drivers.DaylightSolutions": [[14, 0, 0, "-", "MIRcat"]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat": [[14, 1, 1, "", "DRSDaylightSolutions_MIRcat"]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat": [[14, 3, 1, "", "arm"], [14, 3, 1, "", "check_tune"], [14, 3, 1, "", "disarm"], [14, 2, 1, "", "dll_path"], [14, 3, 1, "", "get_idn"], [14, 3, 1, "", "get_limits"], [14, 3, 1, "", "get_pulse_parameters"], [14, 3, 1, "", "get_ranges"], [14, 3, 1, "", "set_pulse_parameters"]], "qcodes_contrib_drivers.drivers.ERAInstruments": [[15, 0, 0, "-", "erasynth"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth": [[15, 1, 1, "", "ERASynth"], [15, 1, 1, "", "ERASynthBase"], [15, 1, 1, "", "ERASynthPlus"], [15, 1, 1, "", "ERASynthPlusPlus"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth": [[15, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "ask"], [15, 3, 1, "", "ask_raw"], [15, 3, 1, "", "clear_read_buffer"], [15, 2, 1, "", "current"], [15, 2, 1, "", "debug_messages_en"], [15, 2, 1, "", "embedded_version"], [15, 3, 1, "", "esp8266_upload_mode"], [15, 3, 1, "", "factory_reset"], [15, 3, 1, "", "get_configuration"], [15, 3, 1, "", "get_diagnostic_status"], [15, 3, 1, "", "get_idn"], [15, 2, 1, "", "modulation_am_depth"], [15, 2, 1, "", "modulation_en"], [15, 2, 1, "", "modulation_fm_deviation"], [15, 2, 1, "", "modulation_freq"], [15, 2, 1, "", "modulation_pulse_period"], [15, 2, 1, "", "modulation_pulse_width"], [15, 2, 1, "", "modulation_signal_waveform"], [15, 2, 1, "", "modulation_source"], [15, 2, 1, "", "modulation_type"], [15, 3, 1, "", "off"], [15, 3, 1, "", "on"], [15, 2, 1, "", "pll_lmx1_status"], [15, 2, 1, "", "pll_lmx2_status"], [15, 2, 1, "", "pll_xtal_status"], [15, 2, 1, "", "power"], [15, 3, 1, "", "preset"], [15, 3, 1, "", "print_pyvisa_resources"], [15, 2, 1, "", "ref_osc_source"], [15, 3, 1, "", "run_self_test"], [15, 2, 1, "", "status"], [15, 2, 1, "", "sweep_dwell"], [15, 2, 1, "", "sweep_en"], [15, 2, 1, "", "sweep_trigger"], [15, 2, 1, "", "synthesizer_mode"], [15, 2, 1, "", "temperature"], [15, 2, 1, "", "voltage"], [15, 2, 1, "", "wifi_gateway_address"], [15, 2, 1, "", "wifi_hotspot_password"], [15, 2, 1, "", "wifi_hotspot_ssid"], [15, 2, 1, "", "wifi_ip_address"], [15, 2, 1, "", "wifi_mode"], [15, 3, 1, "", "wifi_off"], [15, 3, 1, "", "wifi_on"], [15, 2, 1, "", "wifi_rssi"], [15, 2, 1, "", "wifi_station_password"], [15, 2, 1, "", "wifi_station_ssid"], [15, 2, 1, "", "wifi_subnet_address"], [15, 3, 1, "", "write"], [15, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus": [[15, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus": [[15, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave": [[16, 0, 0, "-", "GM349"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349": [[16, 1, 1, "", "GM349"], [16, 1, 1, "", "GM349Attenuation"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349": [[16, 3, 1, "", "pin_map"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation": [[16, 3, 1, "", "get_raw"], [16, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Gentec": [[17, 0, 0, "-", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro": [[17, 1, 1, "", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro": [[17, 3, 1, "", "clear_zero_offset"], [17, 2, 1, "", "firmware_version"], [17, 3, 1, "", "get_idn"], [17, 2, 1, "", "model"], [17, 3, 1, "", "set_zero_offset"]], "qcodes_contrib_drivers.drivers.Holzworth": [[18, 0, 0, "-", "HS900"], [18, 0, 0, "-", "HS9008B"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900": [[18, 1, 1, "", "HS900"], [18, 1, 1, "", "HS900Channel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900": [[18, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel": [[18, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B": [[18, 1, 1, "", "HS9008B"], [18, 1, 1, "", "HS9008BChannel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel": [[18, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Horiba": [[19, 0, 0, "-", "Horiba_FHR"], [20, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR": [[19, 1, 1, "", "DCChannel"], [19, 1, 1, "", "Dispatcher"], [19, 1, 1, "", "GratingChannel"], [19, 1, 1, "", "HoribaFHR"], [19, 1, 1, "", "MotorChannel"], [19, 1, 1, "", "PortChannel"], [19, 1, 1, "", "PrecisionMotorChannel"], [19, 1, 1, "", "SlitChannel"], [19, 4, 1, "", "SpeError"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher": [[19, 3, 1, "", "error_check"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel": [[19, 3, 1, "", "set_ini_params"], [19, 5, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR": [[19, 2, 1, "", "active_grating"], [19, 3, 1, "", "close"], [19, 3, 1, "", "disconnect"], [19, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel": [[19, 3, 1, "", "get_id"], [19, 3, 1, "", "set_id"], [19, 3, 1, "", "stop"], [19, 3, 1, "", "type"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel": [[19, 3, 1, "", "set_baud_rate"], [19, 3, 1, "", "set_timeout"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel": [[19, 3, 1, "", "init"], [19, 3, 1, "", "set_setup"], [19, 5, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel": [[19, 5, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.private": [[20, 0, 0, "-", "fhr_client"], [20, 0, 0, "-", "fhr_server"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client": [[20, 1, 1, "", "FHRClient"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient": [[20, 3, 1, "", "CreateSpe"], [20, 3, 1, "", "DeleteSpe"], [20, 3, 1, "", "SpeCommand"], [20, 3, 1, "", "SpeCommandIniParams"], [20, 3, 1, "", "SpeCommandSetup"], [20, 3, 1, "", "request32"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server": [[20, 1, 1, "", "FHRServer"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer": [[20, 3, 1, "", "CreateSpe"], [20, 3, 1, "", "DeleteSpe"], [20, 3, 1, "", "SpeCommand"], [20, 3, 1, "", "SpeCommandIniParams"], [20, 3, 1, "", "SpeCommandSetup"]], "qcodes_contrib_drivers.drivers.Keysight": [[21, 0, 0, "-", "Keysight_E36313A"], [21, 0, 0, "-", "Keysight_E8267D"], [21, 0, 0, "-", "Keysight_J7211"], [21, 0, 0, "-", "Keysight_M3201A"], [21, 0, 0, "-", "Keysight_M3300A"], [21, 0, 0, "-", "M3202A"], [22, 0, 0, "-", "SD_common"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A": [[21, 1, 1, "", "E36313A"], [21, 1, 1, "", "E36313AChannel"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A": [[21, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel": [[21, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D": [[21, 1, 1, "", "Keysight_E8267D"], [21, 6, 1, "", "parse_on_off"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D": [[21, 3, 1, "", "deg_to_rad"], [21, 3, 1, "", "off"], [21, 3, 1, "", "on"], [21, 3, 1, "", "rad_to_deg"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211": [[21, 1, 1, "", "Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A": [[21, 1, 1, "", "Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A": [[21, 1, 1, "", "M3300A_AWG"], [21, 1, 1, "", "M3300A_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A": [[21, 1, 1, "", "M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common": [[22, 0, 0, "-", "SD_AWG"], [22, 0, 0, "-", "SD_AWG_Async"], [22, 0, 0, "-", "SD_DIG"], [22, 0, 0, "-", "SD_Module"], [22, 0, 0, "-", "memory_manager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG": [[22, 1, 1, "", "SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG": [[22, 3, 1, "", "awg_config_external_trigger"], [22, 3, 1, "", "awg_flush"], [22, 3, 1, "", "awg_from_array"], [22, 3, 1, "", "awg_from_file"], [22, 3, 1, "", "awg_is_running"], [22, 3, 1, "", "awg_jump_next_waveform"], [22, 3, 1, "", "awg_pause"], [22, 3, 1, "", "awg_pause_multiple"], [22, 3, 1, "", "awg_queue_config"], [22, 3, 1, "", "awg_queue_waveform"], [22, 3, 1, "", "awg_resume"], [22, 3, 1, "", "awg_resume_multiple"], [22, 3, 1, "", "awg_start"], [22, 3, 1, "", "awg_start_multiple"], [22, 3, 1, "", "awg_stop"], [22, 3, 1, "", "awg_stop_multiple"], [22, 3, 1, "", "awg_trigger"], [22, 3, 1, "", "awg_trigger_multiple"], [22, 3, 1, "", "config_amplitude_modulation"], [22, 3, 1, "", "config_angle_modulation"], [22, 3, 1, "", "config_clock_io"], [22, 3, 1, "", "config_fpga_trigger"], [22, 3, 1, "", "config_trigger_io"], [22, 3, 1, "", "convert_prescaler_to_sample_rate"], [22, 3, 1, "", "convert_sample_rate_to_prescaler"], [22, 3, 1, "", "flush_waveform"], [22, 3, 1, "", "get_clock_frequency"], [22, 3, 1, "", "get_clock_sync_frequency"], [22, 3, 1, "", "get_trigger_io"], [22, 3, 1, "", "get_waveform_status"], [22, 3, 1, "", "get_waveform_type"], [22, 3, 1, "", "load_fpga_image"], [22, 3, 1, "", "load_waveform"], [22, 3, 1, "", "load_waveform_int16"], [22, 3, 1, "", "new_waveform_from_double"], [22, 3, 1, "", "new_waveform_from_file"], [22, 3, 1, "", "new_waveform_from_int"], [22, 3, 1, "", "off"], [22, 3, 1, "", "read_fpga"], [22, 3, 1, "", "read_fpga_array"], [22, 3, 1, "", "reload_waveform"], [22, 3, 1, "", "reload_waveform_int16"], [22, 3, 1, "", "reset_channel_phase"], [22, 3, 1, "", "reset_clock_phase"], [22, 3, 1, "", "reset_multiple_channel_phase"], [22, 3, 1, "", "set_channel_amplitude"], [22, 3, 1, "", "set_channel_frequency"], [22, 3, 1, "", "set_channel_offset"], [22, 3, 1, "", "set_channel_phase"], [22, 3, 1, "", "set_channel_wave_shape"], [22, 3, 1, "", "set_clock_frequency"], [22, 3, 1, "", "set_digital_filter_mode"], [22, 3, 1, "", "set_iq_modulation"], [22, 3, 1, "", "set_marker_config"], [22, 3, 1, "", "set_trigger_io"], [22, 3, 1, "", "write_fpga"], [22, 3, 1, "", "write_fpga_array"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async": [[22, 1, 1, "", "SD_AWG_Async"], [22, 1, 1, "", "Task"], [22, 1, 1, "", "WaveformReference"], [22, 6, 1, "", "switchable"], [22, 6, 1, "", "threaded"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async": [[22, 3, 1, "", "asynchronous"], [22, 3, 1, "", "awg_flush"], [22, 3, 1, "", "awg_from_array"], [22, 3, 1, "", "awg_from_file"], [22, 3, 1, "", "awg_queue_waveform"], [22, 3, 1, "", "close"], [22, 3, 1, "", "flush_waveform"], [22, 3, 1, "", "load_waveform"], [22, 3, 1, "", "load_waveform_int16"], [22, 3, 1, "", "release_waveform_memory"], [22, 3, 1, "", "reload_waveform"], [22, 3, 1, "", "reload_waveform_int16"], [22, 3, 1, "", "set_asynchronous"], [22, 3, 1, "", "set_waveform_limit"], [22, 3, 1, "", "upload_waveform"], [22, 3, 1, "", "uploader_ready"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task": [[22, 5, 1, "", "result"], [22, 3, 1, "", "run"], [22, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference": [[22, 5, 1, "", "awg_name"], [22, 3, 1, "", "is_uploaded"], [22, 3, 1, "", "release"], [22, 3, 1, "", "wait_uploaded"], [22, 5, 1, "", "wave_number"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG": [[22, 1, 1, "", "SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG": [[22, 3, 1, "", "__init__"], [22, 3, 1, "", "daq_flush"], [22, 3, 1, "", "daq_flush_multiple"], [22, 3, 1, "", "daq_read"], [22, 3, 1, "", "daq_start"], [22, 3, 1, "", "daq_start_multiple"], [22, 3, 1, "", "daq_stop"], [22, 3, 1, "", "daq_stop_multiple"], [22, 3, 1, "", "daq_trigger"], [22, 3, 1, "", "daq_trigger_multiple"], [22, 3, 1, "", "get_coupling"], [22, 3, 1, "", "get_full_scale"], [22, 3, 1, "", "get_impedance"], [22, 3, 1, "", "get_prescaler"], [22, 3, 1, "", "get_trigger_io"], [22, 3, 1, "", "get_trigger_mode"], [22, 3, 1, "", "get_trigger_threshold"], [22, 3, 1, "", "reset_clock_phase"], [22, 3, 1, "", "set_analog_trigger_mask"], [22, 3, 1, "", "set_clksys_frequency"], [22, 3, 1, "", "set_coupling"], [22, 3, 1, "", "set_daq_trigger_delay"], [22, 3, 1, "", "set_daq_trigger_mode"], [22, 3, 1, "", "set_digital_trigger_mode"], [22, 3, 1, "", "set_digital_trigger_source"], [22, 3, 1, "", "set_ext_trigger_behaviour"], [22, 3, 1, "", "set_ext_trigger_source"], [22, 3, 1, "", "set_full_scale"], [22, 3, 1, "", "set_impedance"], [22, 3, 1, "", "set_n_cycles"], [22, 3, 1, "", "set_n_points"], [22, 3, 1, "", "set_points_per_cycle"], [22, 3, 1, "", "set_prescaler"], [22, 3, 1, "", "set_timeout"], [22, 3, 1, "", "set_trigger_io"], [22, 3, 1, "", "set_trigger_mode"], [22, 3, 1, "", "set_trigger_threshold"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module": [[22, 1, 1, "", "SD_Module"], [22, 6, 1, "", "result_parser"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module": [[22, 3, 1, "", "close"], [22, 3, 1, "", "close_soft"], [22, 3, 1, "", "get_chassis"], [22, 3, 1, "", "get_firmware_version"], [22, 3, 1, "", "get_fpga_pc_port"], [22, 3, 1, "", "get_hardware_version"], [22, 3, 1, "", "get_hvi_register"], [22, 3, 1, "", "get_idn"], [22, 3, 1, "", "get_module_count"], [22, 3, 1, "", "get_open"], [22, 3, 1, "", "get_product_name"], [22, 3, 1, "", "get_product_name_by_index"], [22, 3, 1, "", "get_product_name_by_slot"], [22, 3, 1, "", "get_pxi_trigger"], [22, 3, 1, "", "get_serial_number"], [22, 3, 1, "", "get_serial_number_by_index"], [22, 3, 1, "", "get_serial_number_by_slot"], [22, 3, 1, "", "get_slot"], [22, 3, 1, "", "get_status"], [22, 3, 1, "", "get_temperature"], [22, 3, 1, "", "get_type"], [22, 3, 1, "", "get_type_by_index"], [22, 3, 1, "", "get_type_by_slot"], [22, 3, 1, "", "load_fpga_image"], [22, 3, 1, "", "open_with_serial_number"], [22, 3, 1, "", "open_with_slot"], [22, 3, 1, "", "run_self_test"], [22, 3, 1, "", "set_fpga_pc_port"], [22, 3, 1, "", "set_hvi_register"], [22, 3, 1, "", "set_pxi_trigger"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager": [[22, 1, 1, "", "MemoryManager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager": [[22, 1, 1, "", "AllocatedSlot"], [22, 3, 1, "", "allocate"], [22, 3, 1, "", "allocation_state"], [22, 3, 1, "", "get_uninitialized_slots"], [22, 3, 1, "", "mem_usage"], [22, 2, 1, "", "memory_sizes"], [22, 3, 1, "", "release"], [22, 3, 1, "", "release_all"], [22, 3, 1, "", "set_waveform_limit"], [22, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot": [[22, 2, 1, "", "allocation_ref"], [22, 2, 1, "", "memory_manager"], [22, 2, 1, "", "number"], [22, 3, 1, "", "release"]], "qcodes_contrib_drivers.drivers.Lakeshore": [[23, 0, 0, "-", "M81_SSM"], [23, 0, 0, "-", "Model_331"], [23, 0, 0, "-", "Model_625"], [24, 0, 0, "-", "modules"]], "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM": [[23, 1, 1, "", "M81_SSM"]], "qcodes_contrib_drivers.drivers.Lakeshore.M81_SSM.M81_SSM": [[23, 3, 1, "", "close"], [23, 2, 1, "", "data_source_types"], [23, 3, 1, "", "show_system_info"], [23, 3, 1, "", "stream_data"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331": [[23, 1, 1, "", "Model_331"], [23, 1, 1, "", "SensorChannel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel": [[23, 2, 1, "", "channel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625": [[23, 1, 1, "", "Lakeshore625"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625": [[23, 3, 1, "", "set_field"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules": [[24, 0, 0, "-", "bcs10"], [24, 0, 0, "-", "cm10"], [24, 0, 0, "-", "moduleBase"], [24, 0, 0, "-", "senseBase"], [24, 0, 0, "-", "sourceBase"], [24, 0, 0, "-", "vm10"], [24, 0, 0, "-", "vs10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10": [[24, 1, 1, "", "ValidateInput"], [24, 1, 1, "", "bcs10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.bcs10.ValidateInput": [[24, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.cm10": [[24, 1, 1, "", "cm10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase": [[24, 1, 1, "", "moduleBase"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.moduleBase.moduleBase": [[24, 3, 1, "", "reset_to_default"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase": [[24, 1, 1, "", "senseBase"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.senseBase.senseBase": [[24, 3, 1, "", "calculated_resistance"], [24, 3, 1, "", "read_DC"], [24, 3, 1, "", "read_DC_relative"], [24, 3, 1, "", "read_LIA_DC"], [24, 3, 1, "", "read_RMS"], [24, 3, 1, "", "read_RMS_relative"], [24, 3, 1, "", "read_frequency"], [24, 3, 1, "", "read_npeak"], [24, 3, 1, "", "read_ppeak"], [24, 3, 1, "", "read_ptpeak"], [24, 3, 1, "", "read_r"], [24, 3, 1, "", "read_theta"], [24, 3, 1, "", "read_x"], [24, 3, 1, "", "read_y"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase": [[24, 1, 1, "", "sourceBase"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.sourceBase.sourceBase": [[24, 3, 1, "", "output_off"], [24, 3, 1, "", "output_on"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.vm10": [[24, 1, 1, "", "vm10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10": [[24, 1, 1, "", "ValidateInput"], [24, 1, 1, "", "vs10"]], "qcodes_contrib_drivers.drivers.Lakeshore.modules.vs10.ValidateInput": [[24, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics": [[25, 0, 0, "-", "Lighthouse_Photonics_Sprout_G"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G": [[25, 1, 1, "", "LighthousePhotonicsSproutG"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG": [[25, 3, 1, "", "ask"], [25, 2, 1, "", "device_info"], [25, 2, 1, "", "enabled"], [25, 3, 1, "", "get_idn"], [25, 2, 1, "", "output_mode"], [25, 2, 1, "", "output_power"], [25, 2, 1, "", "output_setpoint"], [25, 3, 1, "", "ramp_up"], [25, 2, 1, "", "status"], [25, 2, 1, "", "work_hours"], [25, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.M2": [[26, 0, 0, "-", "M2_Solstis_3"]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3": [[26, 1, 1, "", "M2Solstis3"]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3": [[26, 3, 1, "", "get_idn"], [26, 3, 1, "", "get_status"], [26, 3, 1, "", "poll_move_wave_t"], [26, 3, 1, "", "poll_wave_m"], [26, 3, 1, "", "send_message"], [26, 3, 1, "", "snapshot_base"], [26, 3, 1, "", "stop_move_wave_t"], [26, 3, 1, "", "stop_wave_m"]], "qcodes_contrib_drivers.drivers.Minicircuits": [[27, 0, 0, "-", "ZTM"]], "qcodes_contrib_drivers.drivers.Minicircuits.ZTM": [[27, 1, 1, "", "AmplifierModule"], [27, 1, 1, "", "DualMTSModule"], [27, 1, 1, "", "DualSPDTModule"], [27, 1, 1, "", "MTSModule"], [27, 1, 1, "", "MiniCircuitsModularSystem"], [27, 1, 1, "", "MiniCircuitsModule"], [27, 1, 1, "", "SP4TModule"], [27, 1, 1, "", "SP6TModule"], [27, 1, 1, "", "SP8TModule"], [27, 1, 1, "", "SPDTModule"]], "qcodes_contrib_drivers.drivers.MontanaInstruments": [[28, 0, 0, "-", "cryostation"]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation": [[28, 1, 1, "", "MontanaInstruments_Cryostation"]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation": [[28, 3, 1, "", "get_idn"], [28, 3, 1, "", "set_temp_and_wait"], [28, 3, 1, "", "standby"], [28, 3, 1, "", "start_cooldown"], [28, 3, 1, "", "start_warmup"], [28, 3, 1, "", "stop_automation"], [28, 3, 1, "", "wait_stability"]], "qcodes_contrib_drivers.drivers.NationalInstruments": [[29, 0, 0, "-", "DAQ"], [29, 0, 0, "-", "PXIe_2597"], [29, 0, 0, "-", "PXIe_5654"], [29, 0, 0, "-", "RFSG"], [29, 0, 0, "-", "Switch"], [29, 0, 0, "-", "dll_wrapper"], [29, 0, 0, "-", "ni_dll_instrument"], [29, 0, 0, "-", "visa_types"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ": [[29, 1, 1, "", "DAQAnalogInputVoltages"], [29, 1, 1, "", "DAQAnalogInputs"], [29, 1, 1, "", "DAQAnalogOutputVoltage"], [29, 1, 1, "", "DAQAnalogOutputs"], [29, 1, 1, "", "DAQDigitalOutputState"], [29, 1, 1, "", "DAQDigitalOutputs"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages": [[29, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage": [[29, 3, 1, "", "get_raw"], [29, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState": [[29, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597": [[29, 1, 1, "", "NI_PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654": [[29, 2, 1, "", "NI_PXIe_5654"], [29, 1, 1, "", "NationalInstruments_PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG": [[29, 2, 1, "", "NI_RFSG"], [29, 1, 1, "", "NationalInstruments_RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG": [[29, 3, 1, "", "abort"], [29, 2, 1, "", "dll_path"], [29, 5, 1, "", "firmware"], [29, 3, 1, "", "get_idn"], [29, 3, 1, "", "initiate"], [29, 5, 1, "", "model"], [29, 5, 1, "", "serial"], [29, 5, 1, "", "vendor"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch": [[29, 1, 1, "", "NI_Switch"], [29, 1, 1, "", "SwitchChannel"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch": [[29, 3, 1, "", "close"], [29, 3, 1, "", "disconnect_all"], [29, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel": [[29, 3, 1, "", "connect_to"], [29, 3, 1, "", "disconnect_from"], [29, 3, 1, "", "disconnect_from_all"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper": [[29, 1, 1, "", "AttributeWrapper"], [29, 1, 1, "", "NIDLLWrapper"], [29, 1, 1, "", "NamedArgType"], [29, 6, 1, "", "c_str"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper": [[29, 2, 1, "", "dtype"], [29, 2, 1, "", "value"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper": [[29, 3, 1, "", "error_message"], [29, 3, 1, "", "get_attribute"], [29, 3, 1, "", "init"], [29, 3, 1, "", "set_attribute"], [29, 3, 1, "", "wrap_dll_function"], [29, 3, 1, "", "wrap_dll_function_checked"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType": [[29, 2, 1, "", "argtype"], [29, 2, 1, "", "name"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument": [[29, 1, 1, "", "NIDLLInstrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument": [[29, 3, 1, "", "close"], [29, 3, 1, "", "get_attribute"], [29, 3, 1, "", "init"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "set_attribute"]], "qcodes_contrib_drivers.drivers.Newport": [[30, 0, 0, "-", "AG_UC8"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8": [[30, 1, 1, "", "Newport_AG_UC8"], [30, 1, 1, "", "Newport_AG_UC8_Axis"], [30, 1, 1, "", "Newport_AG_UC8_Channel"], [30, 4, 1, "", "Newport_AG_UC8_ErrorCode"], [30, 4, 1, "", "Newport_AG_UC8_Exception"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8": [[30, 3, 1, "", "ask_channel"], [30, 2, 1, "", "command_delay"], [30, 2, 1, "", "default_timeout"], [30, 3, 1, "", "get_idn"], [30, 3, 1, "", "get_last_error"], [30, 3, 1, "", "reset"], [30, 2, 1, "", "reset_delay"], [30, 2, 1, "", "slow_command_timeout"], [30, 3, 1, "", "write"], [30, 3, 1, "", "write_channel"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis": [[30, 2, 1, "", "SPEED_TABLE"], [30, 3, 1, "", "jog"], [30, 3, 1, "", "measure_position"], [30, 3, 1, "", "move_abs"], [30, 3, 1, "", "move_limit"], [30, 3, 1, "", "move_rel"], [30, 3, 1, "", "stop"], [30, 3, 1, "", "zero_position"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel": [[30, 3, 1, "", "ask"], [30, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.OxfordInstruments": [[31, 0, 0, "-", "ILM200"], [31, 0, 0, "-", "IPS120"], [31, 0, 0, "-", "Proteox"], [31, 0, 0, "-", "Triton"], [31, 0, 0, "-", "kelvinox"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200": [[31, 1, 1, "", "OxfordInstruments_ILM200"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.ILM200.OxfordInstruments_ILM200": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "close"], [31, 3, 1, "", "get_all"], [31, 3, 1, "", "get_idn"], [31, 3, 1, "", "local"], [31, 3, 1, "", "remote"], [31, 3, 1, "", "set_remote_status"], [31, 3, 1, "", "set_to_fast"], [31, 3, 1, "", "set_to_slow"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120": [[31, 1, 1, "", "OxfordInstruments_IPS120"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.IPS120.OxfordInstruments_IPS120": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "close"], [31, 3, 1, "", "examine"], [31, 3, 1, "", "get_all"], [31, 3, 1, "", "get_idn"], [31, 3, 1, "", "heater_off"], [31, 3, 1, "", "heater_on"], [31, 3, 1, "", "hold"], [31, 3, 1, "", "identify"], [31, 3, 1, "", "leave_persistent_mode"], [31, 3, 1, "", "local"], [31, 3, 1, "", "remote"], [31, 3, 1, "", "run_to_field"], [31, 3, 1, "", "run_to_field_wait"], [31, 3, 1, "", "set_persistent"], [31, 3, 1, "", "to_setpoint"], [31, 3, 1, "", "to_zero"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox": [[31, 1, 1, "", "MagnetCurrentParameters"], [31, 1, 1, "", "MagneticFieldParameters"], [31, 1, 1, "", "oiDECS"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagnetCurrentParameters": [[31, 3, 1, "", "get_raw"], [31, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.MagneticFieldParameters": [[31, 3, 1, "", "get_raw"], [31, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Proteox.oiDECS": [[31, 3, 1, "", "ask"], [31, 3, 1, "", "close"], [31, 3, 1, "", "close_switch"], [31, 3, 1, "", "enter_persistent_mode"], [31, 3, 1, "", "hold_field"], [31, 3, 1, "", "leave_persistent_mode"], [31, 3, 1, "", "mixing_chamber_heater_off"], [31, 3, 1, "", "open_switch"], [31, 3, 1, "", "publish"], [31, 3, 1, "", "set_magnet_state"], [31, 3, 1, "", "set_magnet_target"], [31, 3, 1, "", "set_output_current_target"], [31, 3, 1, "", "still_heater_off"], [31, 3, 1, "", "sweep_field"], [31, 3, 1, "", "sweep_psu_output"], [31, 3, 1, "", "sweep_small_field_step"], [31, 3, 1, "", "wait_until_field_depersisted"], [31, 3, 1, "", "wait_until_field_persistent"], [31, 3, 1, "", "wait_until_field_stable"], [31, 3, 1, "", "wait_until_field_stable_timeout"], [31, 3, 1, "", "wait_until_temperature_stable_std_control"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton": [[31, 1, 1, "", "Triton"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.Triton.Triton": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "get_pressure"], [31, 3, 1, "", "get_temperature"], [31, 3, 1, "", "vcl2csv"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox": [[31, 1, 1, "", "OxfordInstruments_Kelvinox_IGH"]], "qcodes_contrib_drivers.drivers.OxfordInstruments.kelvinox.OxfordInstruments_Kelvinox_IGH": [[31, 3, 1, "", "__init__"], [31, 3, 1, "", "close"], [31, 3, 1, "", "get_all"], [31, 3, 1, "", "get_idn"], [31, 3, 1, "", "identify"], [31, 3, 1, "", "local"], [31, 3, 1, "", "remote"], [31, 3, 1, "", "rotate_Nvalve"], [31, 3, 1, "", "set_mix_chamber_heater_mode"], [31, 3, 1, "", "set_mix_chamber_heater_power_range"]], "qcodes_contrib_drivers.drivers.QDevil": [[32, 0, 0, "-", "QDAC1"], [32, 0, 0, "-", "QDAC2"], [32, 0, 0, "-", "QDAC2_Array"], [32, 0, 0, "-", "QSwitch"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1": [[32, 1, 1, "", "Generator"], [32, 1, 1, "", "Mode"], [32, 1, 1, "", "QDac"], [32, 1, 1, "", "QDacChannel"], [32, 1, 1, "", "QDacMultiChannelParameter"], [32, 1, 1, "", "Waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode": [[32, 3, 1, "", "get_label"], [32, 2, 1, "", "vhigh_ihigh"], [32, 2, 1, "", "vhigh_ilow"], [32, 2, 1, "", "vlow_ilow"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "clear_read_queue"], [32, 3, 1, "", "connect_message"], [32, 2, 1, "", "max_status_age"], [32, 3, 1, "", "print_overview"], [32, 3, 1, "", "print_slopes"], [32, 3, 1, "", "print_syncs"], [32, 3, 1, "", "ramp_voltages"], [32, 3, 1, "", "ramp_voltages_2d"], [32, 3, 1, "", "read"], [32, 3, 1, "", "reset"], [32, 3, 1, "", "snapshot_base"], [32, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "snapshot_base"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter": [[32, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform": [[32, 2, 1, "", "all_waveforms"], [32, 2, 1, "", "sine"], [32, 2, 1, "", "square"], [32, 2, 1, "", "staircase"], [32, 2, 1, "", "triangle"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2": [[32, 1, 1, "", "Arrangement_Context"], [32, 1, 1, "", "Awg_Context"], [32, 1, 1, "", "List_Context"], [32, 1, 1, "", "Measurement_Context"], [32, 1, 1, "", "QDac2"], [32, 1, 1, "", "QDac2Channel"], [32, 1, 1, "", "QDac2ExternalTrigger"], [32, 1, 1, "", "QDac2Trigger_Context"], [32, 1, 1, "", "Sine_Context"], [32, 1, 1, "", "Square_Context"], [32, 1, 1, "", "Sweep_Context"], [32, 1, 1, "", "Trace_Context"], [32, 1, 1, "", "Triangle_Context"], [32, 1, 1, "", "Virtual_Sweep_Context"], [32, 6, 1, "", "comma_sequence_to_list"], [32, 6, 1, "", "comma_sequence_to_list_of_floats"], [32, 6, 1, "", "diff_matrix"], [32, 6, 1, "", "floats_to_comma_separated_list"], [32, 6, 1, "", "forward_and_back"], [32, 6, 1, "", "ints_to_comma_separated_list"], [32, 6, 1, "", "split_version_string_into_components"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context": [[32, 3, 1, "", "actual_voltages"], [32, 3, 1, "", "add_correction"], [32, 3, 1, "", "channel"], [32, 5, 1, "", "channel_numbers"], [32, 3, 1, "", "close"], [32, 5, 1, "", "contact_names"], [32, 5, 1, "", "correction_matrix"], [32, 3, 1, "", "currents_A"], [32, 3, 1, "", "get_trigger_by_name"], [32, 3, 1, "", "initiate_correction"], [32, 3, 1, "", "leakage"], [32, 3, 1, "", "set_virtual_voltage"], [32, 3, 1, "", "set_virtual_voltages"], [32, 5, 1, "", "shape"], [32, 3, 1, "", "virtual_detune"], [32, 3, 1, "", "virtual_sweep"], [32, 3, 1, "", "virtual_sweep2d"], [32, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context": [[32, 3, 1, "", "abort"], [32, 3, 1, "", "close"], [32, 3, 1, "", "cycles_remaining"], [32, 3, 1, "", "end_marker"], [32, 3, 1, "", "period_end_marker"], [32, 3, 1, "", "period_start_marker"], [32, 3, 1, "", "start"], [32, 3, 1, "", "start_marker"], [32, 3, 1, "", "start_on"], [32, 3, 1, "", "start_on_external"], [32, 3, 1, "", "start_once_on"], [32, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context": [[32, 3, 1, "", "append"], [32, 3, 1, "", "cycles_remaining"], [32, 3, 1, "", "points"], [32, 3, 1, "", "start"], [32, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context": [[32, 3, 1, "", "abort"], [32, 3, 1, "", "available_A"], [32, 3, 1, "", "close"], [32, 3, 1, "", "n_available"], [32, 3, 1, "", "n_cycles_remaining"], [32, 3, 1, "", "peek_A"], [32, 3, 1, "", "start"], [32, 3, 1, "", "start_on"], [32, 3, 1, "", "start_on_external"], [32, 3, 1, "", "start_once_on"], [32, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "allocate_trace"], [32, 3, 1, "", "allocate_trigger"], [32, 3, 1, "", "arrange"], [32, 3, 1, "", "ask"], [32, 3, 1, "", "channel"], [32, 3, 1, "", "clear"], [32, 3, 1, "", "clear_read_queue"], [32, 3, 1, "", "connect_external_trigger"], [32, 3, 1, "", "error"], [32, 3, 1, "", "errors"], [32, 3, 1, "", "free_all_triggers"], [32, 3, 1, "", "free_trigger"], [32, 3, 1, "", "get_recorded_scpi_commands"], [32, 3, 1, "", "mac"], [32, 3, 1, "", "n_channels"], [32, 3, 1, "", "n_errors"], [32, 3, 1, "", "n_external_inputs"], [32, 3, 1, "", "n_external_outputs"], [32, 3, 1, "", "n_triggers"], [32, 3, 1, "", "remove_traces"], [32, 3, 1, "", "reset"], [32, 3, 1, "", "start_all"], [32, 3, 1, "", "start_recording_scpi"], [32, 3, 1, "", "traces"], [32, 3, 1, "", "write"], [32, 3, 1, "", "write_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel": [[32, 3, 1, "", "arbitrary_wave"], [32, 3, 1, "", "ask_channel"], [32, 3, 1, "", "clear_measurements"], [32, 3, 1, "", "dc_list"], [32, 3, 1, "", "dc_sweep"], [32, 3, 1, "", "measurement"], [32, 5, 1, "", "number"], [32, 3, 1, "", "output_mode"], [32, 3, 1, "", "sine_wave"], [32, 3, 1, "", "square_wave"], [32, 3, 1, "", "triangle_wave"], [32, 3, 1, "", "write"], [32, 3, 1, "", "write_channel"], [32, 3, 1, "", "write_channel_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context": [[32, 3, 1, "", "close"], [32, 5, 1, "", "value"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context": [[32, 3, 1, "", "abort"], [32, 3, 1, "", "close"], [32, 3, 1, "", "cycles_remaining"], [32, 3, 1, "", "end_marker"], [32, 3, 1, "", "period_end_marker"], [32, 3, 1, "", "period_start_marker"], [32, 3, 1, "", "start"], [32, 3, 1, "", "start_marker"], [32, 3, 1, "", "start_on"], [32, 3, 1, "", "start_on_external"], [32, 3, 1, "", "start_once_on"], [32, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context": [[32, 3, 1, "", "abort"], [32, 3, 1, "", "close"], [32, 3, 1, "", "cycles_remaining"], [32, 3, 1, "", "end_marker"], [32, 3, 1, "", "period_end_marker"], [32, 3, 1, "", "period_start_marker"], [32, 3, 1, "", "start"], [32, 3, 1, "", "start_marker"], [32, 3, 1, "", "start_on"], [32, 3, 1, "", "start_on_external"], [32, 3, 1, "", "start_once_on"], [32, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context": [[32, 3, 1, "", "cycles_remaining"], [32, 3, 1, "", "points"], [32, 3, 1, "", "start"], [32, 3, 1, "", "start_V"], [32, 3, 1, "", "stop_V"], [32, 3, 1, "", "time_s"], [32, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context": [[32, 5, 1, "", "name"], [32, 5, 1, "", "size"], [32, 3, 1, "", "waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context": [[32, 3, 1, "", "abort"], [32, 3, 1, "", "close"], [32, 3, 1, "", "cycles_remaining"], [32, 3, 1, "", "end_marker"], [32, 3, 1, "", "period_end_marker"], [32, 3, 1, "", "period_start_marker"], [32, 3, 1, "", "start"], [32, 3, 1, "", "start_marker"], [32, 3, 1, "", "start_on"], [32, 3, 1, "", "start_on_external"], [32, 3, 1, "", "start_once_on"], [32, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context": [[32, 3, 1, "", "actual_values_V"], [32, 3, 1, "", "close"], [32, 3, 1, "", "start"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array": [[32, 1, 1, "", "Array_Arrangement_Context"], [32, 1, 1, "", "QDac2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context": [[32, 3, 1, "", "channel"], [32, 5, 1, "", "contact_names"], [32, 3, 1, "", "currents_A"], [32, 3, 1, "", "leakage"], [32, 3, 1, "", "qdac_names"], [32, 3, 1, "", "set_virtual_voltages"], [32, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array": [[32, 3, 1, "", "allocate_trigger"], [32, 3, 1, "", "arrange"], [32, 5, 1, "", "common_trigger_in"], [32, 3, 1, "", "connect_external_trigger"], [32, 5, 1, "", "controller"], [32, 5, 1, "", "names"], [32, 3, 1, "", "sync"], [32, 3, 1, "", "trigger"], [32, 5, 1, "", "trigger_out"]], "qcodes_contrib_drivers.drivers.QDevil.QSwitch": [[32, 1, 1, "", "QSwitch"], [32, 6, 1, "", "channel_list_to_state"], [32, 6, 1, "", "compress_channel_list"], [32, 6, 1, "", "expand_channel_list"], [32, 6, 1, "", "state_to_compressed_list"], [32, 6, 1, "", "state_to_expanded_list"]], "qcodes_contrib_drivers.drivers.QDevil.QSwitch.QSwitch": [[32, 2, 1, "", "OneOrMore"], [32, 3, 1, "", "__init__"], [32, 3, 1, "", "arrange"], [32, 3, 1, "", "ask"], [32, 3, 1, "", "breakout"], [32, 3, 1, "", "clear_read_queue"], [32, 3, 1, "", "close_relay"], [32, 3, 1, "", "close_relays"], [32, 3, 1, "", "connect"], [32, 3, 1, "", "error"], [32, 3, 1, "", "errors"], [32, 3, 1, "", "get_recorded_scpi_commands"], [32, 3, 1, "", "ground"], [32, 3, 1, "", "open_relay"], [32, 3, 1, "", "open_relays"], [32, 3, 1, "", "reset"], [32, 3, 1, "", "start_recording_scpi"], [32, 3, 1, "", "state_force_update"], [32, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QphoX": [[34, 0, 0, "-", "CryoSwitchController"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController": [[34, 0, 0, "-", "CryoSwitchController"], [34, 6, 1, "", "create_json_structure"], [34, 6, 1, "", "create_port_template"], [34, 0, 0, "-", "libphox"], [34, 0, 0, "-", "qcodes_driver"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController": [[34, 1, 1, "", "Cryoswitch"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.CryoSwitchController.Cryoswitch": [[34, 3, 1, "", "calculate_OCP_code"], [34, 3, 1, "", "calculate_error"], [34, 3, 1, "", "calculate_output_code"], [34, 3, 1, "", "calculate_polarization_current_mA"], [34, 3, 1, "", "check_voltage"], [34, 3, 1, "", "connect"], [34, 3, 1, "", "disable_3V3"], [34, 3, 1, "", "disable_5V"], [34, 3, 1, "", "disable_chopping"], [34, 3, 1, "", "disable_converter"], [34, 3, 1, "", "disable_negative_supply"], [34, 3, 1, "", "disable_output_channels"], [34, 3, 1, "", "discharge"], [34, 3, 1, "", "disconnect"], [34, 3, 1, "", "disconnect_all"], [34, 3, 1, "", "enable_3V3"], [34, 3, 1, "", "enable_5V"], [34, 3, 1, "", "enable_OCP"], [34, 3, 1, "", "enable_chopping"], [34, 3, 1, "", "enable_converter"], [34, 3, 1, "", "enable_negative_supply"], [34, 3, 1, "", "enable_output_channels"], [34, 3, 1, "", "flash"], [34, 3, 1, "", "get_HW_revision"], [34, 3, 1, "", "get_OCP_status"], [34, 3, 1, "", "get_UIDs"], [34, 3, 1, "", "get_V_ref"], [34, 3, 1, "", "get_bias_voltage"], [34, 3, 1, "", "get_converter_voltage"], [34, 3, 1, "", "get_internal_temperature"], [34, 3, 1, "", "get_ip"], [34, 3, 1, "", "get_output_state"], [34, 3, 1, "", "get_power_status"], [34, 3, 1, "", "get_pulse_history"], [34, 3, 1, "", "get_sub_net_mask"], [34, 3, 1, "", "get_switches_state"], [34, 3, 1, "", "log_pulse"], [34, 3, 1, "", "log_wav_init"], [34, 3, 1, "", "log_waveform"], [34, 3, 1, "", "measure_ADC"], [34, 3, 1, "", "plotting_function"], [34, 3, 1, "", "pulse_logging_init"], [34, 3, 1, "", "reconnect"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "reset_OCP"], [34, 3, 1, "", "reset_output_supervisor"], [34, 3, 1, "", "save_switch_state"], [34, 3, 1, "", "select_and_pulse"], [34, 3, 1, "", "select_output_channel"], [34, 3, 1, "", "select_switch_model"], [34, 3, 1, "", "send_pulse"], [34, 3, 1, "", "set_FW_upgrade_mode"], [34, 3, 1, "", "set_OCP_mA"], [34, 3, 1, "", "set_ip"], [34, 3, 1, "", "set_output_voltage"], [34, 3, 1, "", "set_pulse_duration_ms"], [34, 3, 1, "", "set_sampling_frequency_khz"], [34, 3, 1, "", "set_sub_net_mask"], [34, 3, 1, "", "smart_connect"], [34, 3, 1, "", "standby"], [34, 3, 1, "", "start"], [34, 3, 1, "", "test_internals"], [34, 3, 1, "", "tracking_init"], [34, 3, 1, "", "validate_port_contact"], [34, 3, 1, "", "validate_selected_channel"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox": [[34, 1, 1, "", "Labphox"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.libphox.Labphox": [[34, 3, 1, "", "ADC3_cmd"], [34, 3, 1, "", "ADC_cmd"], [34, 3, 1, "", "DAC_cmd"], [34, 3, 1, "", "ETHERNET_cmd"], [34, 3, 1, "", "FLASH_utils"], [34, 3, 1, "", "IO_expander_cmd"], [34, 3, 1, "", "TCP_communication_handler"], [34, 3, 1, "", "UDP_communication_handler"], [34, 3, 1, "", "UDP_packet_handler"], [34, 3, 1, "", "UPGRADE_cmd"], [34, 3, 1, "", "USB_communication_handler"], [34, 3, 1, "", "USB_packet_handler"], [34, 3, 1, "", "application_cmd"], [34, 3, 1, "", "communication_handler"], [34, 3, 1, "", "compare_cmd"], [34, 3, 1, "", "connect"], [34, 3, 1, "", "debug_func"], [34, 3, 1, "", "decode_buffer"], [34, 3, 1, "", "decode_simple_response"], [34, 3, 1, "", "disconnect"], [34, 3, 1, "", "encode"], [34, 3, 1, "", "flush_input_buffer"], [34, 3, 1, "", "gpio_cmd"], [34, 3, 1, "", "input_buffer"], [34, 3, 1, "", "logger_init"], [34, 3, 1, "", "logging"], [34, 3, 1, "", "packet_handler"], [34, 3, 1, "", "parse_response"], [34, 3, 1, "", "query_line"], [34, 3, 1, "", "raise_value_mismatch"], [34, 3, 1, "", "read"], [34, 3, 1, "", "read_buffer"], [34, 3, 1, "", "read_line"], [34, 3, 1, "", "reset_cmd"], [34, 3, 1, "", "standard_reply_parser"], [34, 3, 1, "", "timer_cmd"], [34, 3, 1, "", "utility_cmd"], [34, 3, 1, "", "validate_reply"], [34, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver": [[34, 1, 1, "", "CryoSwitchChannel"], [34, 1, 1, "", "CryoSwitchControllerDriver"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchChannel": [[34, 3, 1, "", "__init__"], [34, 2, 1, "", "active_contact"], [34, 2, 1, "", "channel"], [34, 3, 1, "", "connect"], [34, 3, 1, "", "disconnect"], [34, 3, 1, "", "disconnect_all"], [34, 2, 1, "", "name"], [34, 2, 1, "", "parent"], [34, 3, 1, "", "smart_connect"]], "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController.qcodes_driver.CryoSwitchControllerDriver": [[34, 2, 1, "", "OCP_value"], [34, 3, 1, "", "__init__"], [34, 2, 1, "", "chopping"], [34, 3, 1, "", "close"], [34, 3, 1, "", "connect"], [34, 3, 1, "", "disconnect"], [34, 3, 1, "", "disconnect_all"], [34, 3, 1, "", "get_idn"], [34, 3, 1, "", "get_switches_state"], [34, 2, 1, "", "name"], [34, 2, 1, "", "output_voltage"], [34, 2, 1, "", "power_status"], [34, 2, 1, "", "pulse_duration"], [34, 3, 1, "", "smart_connect"], [34, 2, 1, "", "switch_model"]], "qcodes_contrib_drivers.drivers.QuTech": [[35, 0, 0, "-", "D4"], [35, 0, 0, "-", "D5a"], [35, 0, 0, "-", "F1d"], [35, 0, 0, "-", "IVVI"], [35, 0, 0, "-", "M2j"], [35, 0, 0, "-", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.D4": [[35, 1, 1, "", "D4"]], "qcodes_contrib_drivers.drivers.QuTech.D4.D4": [[35, 3, 1, "", "get_buffers_enabled"], [35, 3, 1, "", "get_filter_value"], [35, 3, 1, "", "get_idn"], [35, 3, 1, "", "get_mode"]], "qcodes_contrib_drivers.drivers.QuTech.D5a": [[35, 1, 1, "", "D5a"]], "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "get_idn"], [35, 3, 1, "", "set_dac_unit"]], "qcodes_contrib_drivers.drivers.QuTech.F1d": [[35, 1, 1, "", "F1d"]], "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d": [[35, 3, 1, "", "get_idn"], [35, 3, 1, "", "get_remote_settings"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI": [[35, 1, 1, "", "IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "adjust_parameter_validator"], [35, 3, 1, "", "ask"], [35, 2, 1, "", "dac_quata"], [35, 2, 1, "", "full_range"], [35, 3, 1, "", "get_all"], [35, 3, 1, "", "get_idn"], [35, 3, 1, "", "get_pol_dac"], [35, 2, 1, "", "half_range"], [35, 3, 1, "", "linspace"], [35, 3, 1, "", "read"], [35, 2, 1, "", "resolution"], [35, 3, 1, "", "round_dac"], [35, 3, 1, "", "set_dacs_zero"], [35, 3, 1, "", "set_parameter_bounds"], [35, 3, 1, "", "set_pol_dacrack"], [35, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QuTech.M2j": [[35, 1, 1, "", "M2j"]], "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.QuTech.S5i": [[35, 1, 1, "", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i": [[35, 3, 1, "", "get_idn"], [35, 3, 1, "", "optimize_for_frequency"]], "qcodes_contrib_drivers.drivers.Rigol": [[36, 0, 0, "-", "Rigol_DP932"], [36, 0, 0, "-", "Rigol_DSG3136B"]], "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932": [[36, 1, 1, "", "RigolDP932E"]], "qcodes_contrib_drivers.drivers.Rigol.Rigol_DP932.RigolDP932E": [[36, 3, 1, "", "disable_output"], [36, 3, 1, "", "enable_output"], [36, 3, 1, "", "measure_current"], [36, 3, 1, "", "measure_power"], [36, 3, 1, "", "measure_voltage"], [36, 3, 1, "", "reset"], [36, 3, 1, "", "set_current"], [36, 3, 1, "", "set_output_state"], [36, 3, 1, "", "set_voltage"]], "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B": [[36, 1, 1, "", "RigolDSG3136B"]], "qcodes_contrib_drivers.drivers.Rigol.Rigol_DSG3136B.RigolDSG3136B": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "sweep_execute"], [36, 3, 1, "", "sweep_reset"], [36, 3, 1, "", "trigger"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz": [[37, 0, 0, "-", "FSV_3013"], [37, 0, 0, "-", "HMC8041"], [37, 0, 0, "-", "HMC8042"], [37, 0, 0, "-", "HMC8043"], [37, 0, 0, "-", "HMP2020"], [37, 0, 0, "-", "HMP2030"], [37, 0, 0, "-", "HMP4030"], [37, 0, 0, "-", "HMP4040"], [37, 0, 0, "-", "SMB100A"], [37, 0, 0, "-", "SMR40"], [37, 0, 0, "-", "SMW200A"], [37, 0, 0, "-", "SMW200Asim"], [37, 0, 0, "-", "ZVL13"], [38, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013": [[37, 1, 1, "", "RFSpectrumAnalyzer"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.FSV_3013.RFSpectrumAnalyzer": [[37, 3, 1, "", "close"], [37, 3, 1, "", "get_trace"], [37, 3, 1, "", "measure_power"], [37, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041": [[37, 1, 1, "", "RohdeSchwarzHMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042": [[37, 1, 1, "", "RohdeSchwarzHMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043": [[37, 1, 1, "", "RohdeSchwarzHMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020": [[37, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030": [[37, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030": [[37, 1, 1, "", "RohdeSchwarzHMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040": [[37, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A": [[37, 1, 1, "", "RohdeSchwarz_SMB100A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A": [[37, 3, 1, "", "off"], [37, 3, 1, "", "on"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "run_self_tests"], [37, 3, 1, "", "start_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40": [[37, 1, 1, "", "RohdeSchwarz_SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40": [[37, 3, 1, "", "do_get_frequency"], [37, 3, 1, "", "do_get_power"], [37, 3, 1, "", "do_get_pulse_delay"], [37, 3, 1, "", "do_get_status"], [37, 3, 1, "", "do_get_status_of_ALC"], [37, 3, 1, "", "do_get_status_of_modulation"], [37, 3, 1, "", "do_set_frequency"], [37, 3, 1, "", "do_set_power"], [37, 3, 1, "", "do_set_pulse_delay"], [37, 3, 1, "", "do_set_status"], [37, 3, 1, "", "do_set_status_of_ALC"], [37, 3, 1, "", "do_set_status_of_modulation"], [37, 3, 1, "", "get_all"], [37, 3, 1, "", "off"], [37, 3, 1, "", "off_modulation"], [37, 3, 1, "", "on"], [37, 3, 1, "", "on_modulation"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "set_ext_trig"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A": [[37, 1, 1, "", "AmplitudeModulation"], [37, 1, 1, "", "FrequencyModulation"], [37, 1, 1, "", "IQChannel"], [37, 1, 1, "", "IQModulation"], [37, 1, 1, "", "LFOutputChannel"], [37, 1, 1, "", "LFOutputSweep"], [37, 1, 1, "", "OutputChannel"], [37, 1, 1, "", "OutputFrequencySweep"], [37, 1, 1, "", "OutputLevelSweep"], [37, 1, 1, "", "PhaseModulation"], [37, 1, 1, "", "PulseGenerator"], [37, 1, 1, "", "PulseModulation"], [37, 1, 1, "", "RohdeSchwarz_SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "coupling_mode"], [37, 2, 1, "", "depth"], [37, 2, 1, "", "deviation_ratio"], [37, 2, 1, "", "sensitivity"], [37, 2, 1, "", "source"], [37, 2, 1, "", "state"], [37, 2, 1, "", "total_depth"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "coupling_mode"], [37, 2, 1, "", "deviation"], [37, 2, 1, "", "deviation_ratio"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "sensitivity"], [37, 2, 1, "", "source"], [37, 2, 1, "", "state"], [37, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "coupling"], [37, 2, 1, "", "i_bias"], [37, 2, 1, "", "i_offset"], [37, 2, 1, "", "level"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "q_bias"], [37, 2, 1, "", "q_offset"], [37, 2, 1, "", "state"], [37, 2, 1, "", "type"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "crest_factor"], [37, 2, 1, "", "gain"], [37, 2, 1, "", "source"], [37, 2, 1, "", "state"], [37, 2, 1, "", "swap"], [37, 2, 1, "", "wideband"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "bandwidth"], [37, 2, 1, "", "freq_manual"], [37, 2, 1, "", "freq_max"], [37, 2, 1, "", "freq_min"], [37, 2, 1, "", "frequency"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "offset"], [37, 2, 1, "", "period"], [37, 2, 1, "", "shape"], [37, 2, 1, "", "shape_duty_cycle"], [37, 2, 1, "", "shape_period"], [37, 2, 1, "", "shape_width"], [37, 2, 1, "", "source"], [37, 2, 1, "", "source_path"], [37, 2, 1, "", "state"], [37, 2, 1, "", "trapez_fall"], [37, 2, 1, "", "trapez_height"], [37, 2, 1, "", "trapez_period"], [37, 2, 1, "", "trapez_rise"], [37, 2, 1, "", "triangle_period"], [37, 2, 1, "", "triangle_rise"], [37, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "dwell"], [37, 2, 1, "", "execute"], [37, 2, 1, "", "lin_step"], [37, 2, 1, "", "log_step"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "points"], [37, 2, 1, "", "retrace"], [37, 2, 1, "", "running"], [37, 2, 1, "", "shape"], [37, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "frequency"], [37, 2, 1, "", "level"], [37, 2, 1, "", "losc_input"], [37, 2, 1, "", "losc_mode"], [37, 2, 1, "", "losc_output"], [37, 2, 1, "", "losc_state"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "state"], [37, 2, 1, "", "sweep_center"], [37, 2, 1, "", "sweep_span"], [37, 2, 1, "", "sweep_start"], [37, 2, 1, "", "sweep_stop"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "dwell"], [37, 2, 1, "", "execute"], [37, 2, 1, "", "lin_step"], [37, 2, 1, "", "log_step"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "points"], [37, 2, 1, "", "reset"], [37, 2, 1, "", "retrace"], [37, 2, 1, "", "running"], [37, 2, 1, "", "shape"], [37, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "attenuator"], [37, 2, 1, "", "dwell"], [37, 2, 1, "", "execute"], [37, 2, 1, "", "log_step"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "points"], [37, 2, 1, "", "reset"], [37, 2, 1, "", "retrace"], [37, 2, 1, "", "running"], [37, 2, 1, "", "shape"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "coupling_mode"], [37, 2, 1, "", "deviation"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "ratio"], [37, 2, 1, "", "sensitivity"], [37, 2, 1, "", "source"], [37, 2, 1, "", "state"], [37, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "output"], [37, 2, 1, "", "polarity"], [37, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation": [[37, 3, 1, "", "__init__"], [37, 2, 1, "", "delay"], [37, 2, 1, "", "double_delay"], [37, 2, 1, "", "double_width"], [37, 2, 1, "", "impedance"], [37, 2, 1, "", "mode"], [37, 2, 1, "", "period"], [37, 2, 1, "", "polarity"], [37, 2, 1, "", "source"], [37, 2, 1, "", "state"], [37, 2, 1, "", "transition_type"], [37, 2, 1, "", "trigger_impedance"], [37, 2, 1, "", "trigger_mode"], [37, 2, 1, "", "video_polarity"], [37, 2, 1, "", "width"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A": [[37, 3, 1, "", "close"], [37, 3, 1, "", "gen_trigger_pulse"], [37, 3, 1, "", "get_error"], [37, 3, 1, "", "get_id"], [37, 3, 1, "", "get_options"], [37, 3, 1, "", "getall"], [37, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim": [[37, 1, 1, "", "MockVisa"], [37, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa": [[37, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle": [[37, 3, 1, "", "ask"], [37, 3, 1, "", "clear"], [37, 3, 1, "", "close"], [37, 2, 1, "", "cmddef"], [37, 3, 1, "", "query"], [37, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13": [[37, 1, 1, "", "ComplexSweep"], [37, 1, 1, "", "FrequencySweep"], [37, 1, 1, "", "FrequencySweepMagPhase"], [37, 1, 1, "", "SAFrequencySweep"], [37, 1, 1, "", "ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep": [[37, 3, 1, "", "get_raw"], [37, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep": [[37, 3, 1, "", "get_raw"], [37, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase": [[37, 3, 1, "", "get_raw"], [37, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep": [[37, 3, 1, "", "get_raw"], [37, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13": [[37, 3, 1, "", "calibration"], [37, 3, 1, "", "na_mode"], [37, 3, 1, "", "reset"], [37, 3, 1, "", "sa_mode"], [37, 3, 1, "", "update_traces"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private": [[38, 0, 0, "-", "HMC804x"], [38, 0, 0, "-", "HMP"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x": [[38, 1, 1, "", "RohdeSchwarzHMC804xChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP": [[38, 1, 1, "", "RohdeSchwarzHMPChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel": [[38, 3, 1, "", "get_max_current"], [38, 3, 1, "", "send_cmd"]], "qcodes_contrib_drivers.drivers.SPECS": [[39, 0, 0, "-", "Specs_Tramea"]], "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea": [[39, 1, 1, "", "NanonisTramea"]], "qcodes_contrib_drivers.drivers.SPECS.Specs_Tramea.NanonisTramea": [[39, 3, 1, "", "DataLog_ChsGet"], [39, 3, 1, "", "DataLog_ChsSet"], [39, 3, 1, "", "DataLog_Open"], [39, 3, 1, "", "DataLog_PropsGet"], [39, 3, 1, "", "DataLog_PropsSet"], [39, 3, 1, "", "DataLog_Start"], [39, 3, 1, "", "DataLog_StatusGet"], [39, 3, 1, "", "DataLog_Stop"], [39, 3, 1, "", "DigLines_OutStatusSet"], [39, 3, 1, "", "DigLines_PropsSet"], [39, 3, 1, "", "DigLines_Pulse"], [39, 3, 1, "", "DigLines_TTLValGet"], [39, 3, 1, "", "HSSwp_AcqChsGet"], [39, 3, 1, "", "HSSwp_AcqChsSet"], [39, 3, 1, "", "HSSwp_AutoReverseGet"], [39, 3, 1, "", "HSSwp_AutoReverseSet"], [39, 3, 1, "", "HSSwp_EndSettlGet"], [39, 3, 1, "", "HSSwp_EndSettlSet"], [39, 3, 1, "", "HSSwp_NumSweepsGet"], [39, 3, 1, "", "HSSwp_NumSweepsSet"], [39, 3, 1, "", "HSSwp_ResetSignalsGet"], [39, 3, 1, "", "HSSwp_ResetSignalsSet"], [39, 3, 1, "", "HSSwp_SaveBasenameGet"], [39, 3, 1, "", "HSSwp_SaveBasenameSet"], [39, 3, 1, "", "HSSwp_SaveDataGet"], [39, 3, 1, "", "HSSwp_SaveDataSet"], [39, 3, 1, "", "HSSwp_SaveOptionsGet"], [39, 3, 1, "", "HSSwp_SaveOptionsSet"], [39, 3, 1, "", "HSSwp_Start"], [39, 3, 1, "", "HSSwp_StatusGet"], [39, 3, 1, "", "HSSwp_Stop"], [39, 3, 1, "", "HSSwp_SwpChBwdDelayGet"], [39, 3, 1, "", "HSSwp_SwpChBwdDelaySet"], [39, 3, 1, "", "HSSwp_SwpChBwdSwGet"], [39, 3, 1, "", "HSSwp_SwpChBwdSwSet"], [39, 3, 1, "", "HSSwp_SwpChLimitsGet"], [39, 3, 1, "", "HSSwp_SwpChLimitsSet"], [39, 3, 1, "", "HSSwp_SwpChNumPtsGet"], [39, 3, 1, "", "HSSwp_SwpChNumPtsSet"], [39, 3, 1, "", "HSSwp_SwpChSigListGet"], [39, 3, 1, "", "HSSwp_SwpChSignalGet"], [39, 3, 1, "", "HSSwp_SwpChSignalSet"], [39, 3, 1, "", "HSSwp_SwpChTimingGet"], [39, 3, 1, "", "HSSwp_SwpChTimingSet"], [39, 3, 1, "", "HSSwp_ZCtrlOffGet"], [39, 3, 1, "", "HSSwp_ZCtrlOffSet"], [39, 3, 1, "", "LockInFreqSwp_LimitsGet"], [39, 3, 1, "", "LockInFreqSwp_LimitsSet"], [39, 3, 1, "", "LockInFreqSwp_Open"], [39, 3, 1, "", "LockInFreqSwp_PropsGet"], [39, 3, 1, "", "LockInFreqSwp_PropsSet"], [39, 3, 1, "", "LockInFreqSwp_SignalGet"], [39, 3, 1, "", "LockInFreqSwp_SignalSet"], [39, 3, 1, "", "LockInFreqSwp_Start"], [39, 3, 1, "", "LockIn_DemodHPFilterGet"], [39, 3, 1, "", "LockIn_DemodHPFilterSet"], [39, 3, 1, "", "LockIn_DemodHarmonicGet"], [39, 3, 1, "", "LockIn_DemodHarmonicSet"], [39, 3, 1, "", "LockIn_DemodLPFilterGet"], [39, 3, 1, "", "LockIn_DemodLPFilterSet"], [39, 3, 1, "", "LockIn_DemodPhasGet"], [39, 3, 1, "", "LockIn_DemodPhasRegGet"], [39, 3, 1, "", "LockIn_DemodPhasRegSet"], [39, 3, 1, "", "LockIn_DemodPhasSet"], [39, 3, 1, "", "LockIn_DemodRTSignalsGet"], [39, 3, 1, "", "LockIn_DemodRTSignalsSet"], [39, 3, 1, "", "LockIn_DemodSignalGet"], [39, 3, 1, "", "LockIn_DemodSignalSet"], [39, 3, 1, "", "LockIn_DemodSyncFilterGet"], [39, 3, 1, "", "LockIn_DemodSyncFilterSet"], [39, 3, 1, "", "LockIn_ModAmpGet"], [39, 3, 1, "", "LockIn_ModAmpSet"], [39, 3, 1, "", "LockIn_ModHarmonicGet"], [39, 3, 1, "", "LockIn_ModHarmonicSet"], [39, 3, 1, "", "LockIn_ModOnOffGet"], [39, 3, 1, "", "LockIn_ModOnOffSet"], [39, 3, 1, "", "LockIn_ModPhasFreqGet"], [39, 3, 1, "", "LockIn_ModPhasFreqSet"], [39, 3, 1, "", "LockIn_ModPhasGet"], [39, 3, 1, "", "LockIn_ModPhasRegGet"], [39, 3, 1, "", "LockIn_ModPhasRegSet"], [39, 3, 1, "", "LockIn_ModPhasSet"], [39, 3, 1, "", "LockIn_ModSignalGet"], [39, 3, 1, "", "LockIn_ModSignalSet"], [39, 3, 1, "", "OneDSwp_AcqChsGet"], [39, 3, 1, "", "OneDSwp_AcqChsSet"], [39, 3, 1, "", "OneDSwp_LimitsGet"], [39, 3, 1, "", "OneDSwp_LimitsSet"], [39, 3, 1, "", "OneDSwp_Open"], [39, 3, 1, "", "OneDSwp_PropsGet"], [39, 3, 1, "", "OneDSwp_PropsSet"], [39, 3, 1, "", "OneDSwp_Start"], [39, 3, 1, "", "OneDSwp_Stop"], [39, 3, 1, "", "OneDSwp_SwpSignalGet"], [39, 3, 1, "", "OneDSwp_SwpSignalSet"], [39, 3, 1, "", "OsciHR_CalibrModeGet"], [39, 3, 1, "", "OsciHR_CalibrModeSet"], [39, 3, 1, "", "OsciHR_ChGet"], [39, 3, 1, "", "OsciHR_ChSet"], [39, 3, 1, "", "OsciHR_OsciDataGet"], [39, 3, 1, "", "OsciHR_OversamplGet"], [39, 3, 1, "", "OsciHR_OversamplSet"], [39, 3, 1, "", "OsciHR_PSDAvrgCountGet"], [39, 3, 1, "", "OsciHR_PSDAvrgCountSet"], [39, 3, 1, "", "OsciHR_PSDAvrgRestart"], [39, 3, 1, "", "OsciHR_PSDAvrgTypeGet"], [39, 3, 1, "", "OsciHR_PSDAvrgTypeSet"], [39, 3, 1, "", "OsciHR_PSDDataGet"], [39, 3, 1, "", "OsciHR_PSDShow"], [39, 3, 1, "", "OsciHR_PSDWeightGet"], [39, 3, 1, "", "OsciHR_PSDWeightSet"], [39, 3, 1, "", "OsciHR_PSDWindowGet"], [39, 3, 1, "", "OsciHR_PSDWindowSet"], [39, 3, 1, "", "OsciHR_PreTrigGet"], [39, 3, 1, "", "OsciHR_PreTrigSet"], [39, 3, 1, "", "OsciHR_Run"], [39, 3, 1, "", "OsciHR_SamplesGet"], [39, 3, 1, "", "OsciHR_SamplesSet"], [39, 3, 1, "", "OsciHR_TrigArmModeGet"], [39, 3, 1, "", "OsciHR_TrigArmModeSet"], [39, 3, 1, "", "OsciHR_TrigDigChGet"], [39, 3, 1, "", "OsciHR_TrigDigChSet"], [39, 3, 1, "", "OsciHR_TrigDigSlopeGet"], [39, 3, 1, "", "OsciHR_TrigDigSlopeSet"], [39, 3, 1, "", "OsciHR_TrigLevChGet"], [39, 3, 1, "", "OsciHR_TrigLevChSet"], [39, 3, 1, "", "OsciHR_TrigLevHystGet"], [39, 3, 1, "", "OsciHR_TrigLevHystSet"], [39, 3, 1, "", "OsciHR_TrigLevSlopeGet"], [39, 3, 1, "", "OsciHR_TrigLevSlopeSet"], [39, 3, 1, "", "OsciHR_TrigLevValGet"], [39, 3, 1, "", "OsciHR_TrigLevValSet"], [39, 3, 1, "", "OsciHR_TrigModeGet"], [39, 3, 1, "", "OsciHR_TrigModeSet"], [39, 3, 1, "", "OsciHR_TrigRearm"], [39, 3, 1, "", "ReturnDebugInfo"], [39, 3, 1, "", "Script_Autosave"], [39, 3, 1, "", "Script_ChsGet"], [39, 3, 1, "", "Script_ChsSet"], [39, 3, 1, "", "Script_DataGet"], [39, 3, 1, "", "Script_Deploy"], [39, 3, 1, "", "Script_Load"], [39, 3, 1, "", "Script_Run"], [39, 3, 1, "", "Script_Save"], [39, 3, 1, "", "Script_Stop"], [39, 3, 1, "", "Script_Undeploy"], [39, 3, 1, "", "Signals_AddRTGet"], [39, 3, 1, "", "Signals_AddRTSet"], [39, 3, 1, "", "Signals_CalibrGet"], [39, 3, 1, "", "Signals_MeasNamesGet"], [39, 3, 1, "", "Signals_NamesGet"], [39, 3, 1, "", "Signals_RangeGet"], [39, 3, 1, "", "TCPLog_ChsSet"], [39, 3, 1, "", "TCPLog_OversamplSet"], [39, 3, 1, "", "TCPLog_Start"], [39, 3, 1, "", "TCPLog_StatusGet"], [39, 3, 1, "", "TCPLog_Stop"], [39, 3, 1, "", "ThreeDSwpOpen"], [39, 3, 1, "", "ThreeDSwpStart"], [39, 3, 1, "", "ThreeDSwpStop"], [39, 3, 1, "", "ThreeDSwp_FilePathsGet"], [39, 3, 1, "", "ThreeDSwp_StpCh1LimitsGet"], [39, 3, 1, "", "ThreeDSwp_StpCh1LimitsSet"], [39, 3, 1, "", "ThreeDSwp_StpCh1PropsGet"], [39, 3, 1, "", "ThreeDSwp_StpCh1PropsSet"], [39, 3, 1, "", "ThreeDSwp_StpCh1SignalGet"], [39, 3, 1, "", "ThreeDSwp_StpCh1SignalSet"], [39, 3, 1, "", "ThreeDSwp_StpCh1TimingGet"], [39, 3, 1, "", "ThreeDSwp_StpCh1TimingSet"], [39, 3, 1, "", "ThreeDSwp_StpCh2LimitsGet"], [39, 3, 1, "", "ThreeDSwp_StpCh2LimitsSet"], [39, 3, 1, "", "ThreeDSwp_StpCh2PropsGet"], [39, 3, 1, "", "ThreeDSwp_StpCh2PropsSet"], [39, 3, 1, "", "ThreeDSwp_StpCh2SignalGet"], [39, 3, 1, "", "ThreeDSwp_StpCh2SignalSet"], [39, 3, 1, "", "ThreeDSwp_StpCh2TimingGet"], [39, 3, 1, "", "ThreeDSwp_StpCh2TimingSet"], [39, 3, 1, "", "ThreeDSwp_SwpAcqChsGet"], [39, 3, 1, "", "ThreeDSwp_SwpAcqChsSet"], [39, 3, 1, "", "ThreeDSwp_SwpChLimitsGet"], [39, 3, 1, "", "ThreeDSwp_SwpChLimitsSet"], [39, 3, 1, "", "ThreeDSwp_SwpChMLSGet"], [39, 3, 1, "", "ThreeDSwp_SwpChMLSSet"], [39, 3, 1, "", "ThreeDSwp_SwpChModeGet"], [39, 3, 1, "", "ThreeDSwp_SwpChModeSet"], [39, 3, 1, "", "ThreeDSwp_SwpChPropsGet"], [39, 3, 1, "", "ThreeDSwp_SwpChPropsSet"], [39, 3, 1, "", "ThreeDSwp_SwpChSignalGet"], [39, 3, 1, "", "ThreeDSwp_SwpChSignalSet"], [39, 3, 1, "", "ThreeDSwp_SwpChTimingGet"], [39, 3, 1, "", "ThreeDSwp_SwpChTimingSet"], [39, 3, 1, "", "ThreeDSwp_SwpSaveOptionsGet"], [39, 3, 1, "", "ThreeDSwp_SwpSaveOptionsSet"], [39, 3, 1, "", "ThreeDSwp_SwpStatusGet"], [39, 3, 1, "", "ThreeDSwp_TimingEnable"], [39, 3, 1, "", "ThreeDSwp_TimingRowLimitGet"], [39, 3, 1, "", "ThreeDSwp_TimingRowLimitSet"], [39, 3, 1, "", "ThreeDSwp_TimingRowMethodsGet"], [39, 3, 1, "", "ThreeDSwp_TimingRowMethodsSet"], [39, 3, 1, "", "ThreeDSwp_TimingRowValsGet"], [39, 3, 1, "", "ThreeDSwp_TimingRowValsSet"], [39, 3, 1, "", "ThreeDSwp_TimingSend"], [39, 3, 1, "", "UserIn_CalibrSet"], [39, 3, 1, "", "UserOut_CalcSignalConfigGet"], [39, 3, 1, "", "UserOut_CalcSignalConfigSet"], [39, 3, 1, "", "UserOut_CalcSignalNameGet"], [39, 3, 1, "", "UserOut_CalcSignalNameSet"], [39, 3, 1, "", "UserOut_CalibrSet"], [39, 3, 1, "", "UserOut_LimitsGet"], [39, 3, 1, "", "UserOut_LimitsSet"], [39, 3, 1, "", "UserOut_ModeGet"], [39, 3, 1, "", "UserOut_ModeSet"], [39, 3, 1, "", "UserOut_MonitorChGet"], [39, 3, 1, "", "UserOut_MonitorChSet"], [39, 3, 1, "", "UserOut_SlewRateGet"], [39, 3, 1, "", "UserOut_SlewRateSet"], [39, 3, 1, "", "Util_AcqPeriodGet"], [39, 3, 1, "", "Util_AcqPeriodSet"], [39, 3, 1, "", "Util_LayoutLoad"], [39, 3, 1, "", "Util_LayoutSave"], [39, 3, 1, "", "Util_Lock"], [39, 3, 1, "", "Util_Quit"], [39, 3, 1, "", "Util_RTFreqGet"], [39, 3, 1, "", "Util_RTFreqSet"], [39, 3, 1, "", "Util_RTOversamplGet"], [39, 3, 1, "", "Util_RTOversamplSet"], [39, 3, 1, "", "Util_SessionPathGet"], [39, 3, 1, "", "Util_SettingsLoad"], [39, 3, 1, "", "Util_SettingsSave"], [39, 3, 1, "", "Util_UnLock"]], "qcodes_contrib_drivers.drivers.Shamrock": [[40, 0, 0, "-", "SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750": [[40, 1, 1, "", "ShamrockCIF"], [40, 1, 1, "", "Shamrock_SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF": [[40, 3, 1, "", "close"], [40, 2, 1, "", "dll"], [40, 3, 1, "", "error_check"], [40, 3, 1, "", "get_calibration"], [40, 3, 1, "", "get_grating"], [40, 3, 1, "", "get_grating_info"], [40, 3, 1, "", "get_number_devices"], [40, 3, 1, "", "get_number_gratings"], [40, 3, 1, "", "get_number_pixels"], [40, 3, 1, "", "get_pixel_width"], [40, 3, 1, "", "get_serial_number"], [40, 3, 1, "", "get_slit"], [40, 3, 1, "", "get_wavelength"], [40, 3, 1, "", "get_wavelength_limits"], [40, 3, 1, "", "initialize"], [40, 3, 1, "", "set_grating"], [40, 3, 1, "", "set_number_pixels"], [40, 3, 1, "", "set_pixel_width"], [40, 3, 1, "", "set_slit"], [40, 3, 1, "", "set_wavelength"], [40, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750": [[40, 2, 1, "", "ShamrockCIF"], [40, 3, 1, "", "close"], [40, 2, 1, "", "device_id"], [40, 3, 1, "", "get_idn"], [40, 2, 1, "", "number_gratings"], [40, 2, 1, "", "serial_number"]], "qcodes_contrib_drivers.drivers.Siglent": [[41, 0, 0, "-", "sdg"], [41, 0, 0, "-", "sdg_channel"], [41, 0, 0, "-", "sds"], [41, 0, 0, "-", "sdx"]], "qcodes_contrib_drivers.drivers.Siglent.sdg": [[41, 1, 1, "", "SiglentSDGx"], [41, 1, 1, "", "Siglent_SDG_2042X"], [41, 1, 1, "", "Siglent_SDG_20xx"], [41, 1, 1, "", "Siglent_SDG_6022X"], [41, 1, 1, "", "Siglent_SDG_60xx"]], "qcodes_contrib_drivers.drivers.Siglent.sdg_channel": [[41, 1, 1, "", "SiglentSDGChannel"]], "qcodes_contrib_drivers.drivers.Siglent.sds": [[41, 1, 1, "", "Siglent_SDS_120NxE"], [41, 1, 1, "", "TriggerMode"], [41, 1, 1, "", "WaveformSetup"]], "qcodes_contrib_drivers.drivers.Siglent.sds.Siglent_SDS_120NxE": [[41, 3, 1, "", "get_channel_waveform"], [41, 3, 1, "", "get_channel_waveform_data"], [41, 3, 1, "", "get_math_vdiv"], [41, 3, 1, "", "get_math_waveform"], [41, 3, 1, "", "get_num_samples"], [41, 3, 1, "", "get_ofst"], [41, 3, 1, "", "get_raw_analog_waveform_data"], [41, 3, 1, "", "get_raw_digital_waveform_data"], [41, 3, 1, "", "get_raw_math_waveform_data"], [41, 3, 1, "", "get_sample_rate"], [41, 3, 1, "", "get_time_base"], [41, 3, 1, "", "get_trig_mode"], [41, 3, 1, "", "get_vdiv"], [41, 3, 1, "", "get_waveform_setup"], [41, 3, 1, "", "set_to_fft"], [41, 3, 1, "", "set_trig_mode"], [41, 3, 1, "", "set_waveform_setup"]], "qcodes_contrib_drivers.drivers.Siglent.sds.TriggerMode": [[41, 2, 1, "", "AUTO"], [41, 2, 1, "", "NORMAL"], [41, 2, 1, "", "SINGLE"], [41, 2, 1, "", "STOP"]], "qcodes_contrib_drivers.drivers.Siglent.sds.WaveformSetup": [[41, 2, 1, "", "num_points"], [41, 2, 1, "", "spacing"], [41, 2, 1, "", "start_idx"]], "qcodes_contrib_drivers.drivers.Siglent.sdx": [[41, 1, 1, "", "SiglentChannel"], [41, 1, 1, "", "SiglentSDx"]], "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentChannel": [[41, 5, 1, "", "channel_number"]], "qcodes_contrib_drivers.drivers.Siglent.sdx.SiglentSDx": [[41, 3, 1, "", "reset"], [41, 3, 1, "", "scdp_bmp_bytes"], [41, 3, 1, "", "screen_dump_bmp"]], "qcodes_contrib_drivers.drivers.SignalCore": [[42, 0, 0, "-", "SignalCore"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore": [[42, 1, 1, "", "DeviceInfoT"], [42, 1, 1, "", "DeviceRFParamsT"], [42, 1, 1, "", "DeviceStatusT"], [42, 1, 1, "", "HWTriggerT"], [42, 1, 1, "", "ListModeT"], [42, 1, 1, "", "ManDate"], [42, 1, 1, "", "OperateStatusT"], [42, 1, 1, "", "PLLStatusT"], [42, 1, 1, "", "SC5521A"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT": [[42, 2, 1, "", "device_interfaces"], [42, 2, 1, "", "firmware_revision"], [42, 2, 1, "", "hardware_revision"], [42, 2, 1, "", "man_date"], [42, 2, 1, "", "product_serial_number"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT": [[42, 2, 1, "", "atten_value"], [42, 2, 1, "", "buffer_points"], [42, 2, 1, "", "frequency"], [42, 2, 1, "", "level_dac_value"], [42, 2, 1, "", "power_level"], [42, 2, 1, "", "rf_phase_offset"], [42, 2, 1, "", "sweep_cycles"], [42, 2, 1, "", "sweep_dwell_time"], [42, 2, 1, "", "sweep_start_freq"], [42, 2, 1, "", "sweep_step_freq"], [42, 2, 1, "", "sweep_stop_freq"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT": [[42, 2, 1, "", "list_mode_t"], [42, 2, 1, "", "operate_status_t"], [42, 2, 1, "", "pll_status_t"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT": [[42, 2, 1, "", "edge"], [42, 2, 1, "", "pxi_enable"], [42, 2, 1, "", "pxi_line"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT": [[42, 2, 1, "", "hw_trigger"], [42, 2, 1, "", "return_to_start"], [42, 2, 1, "", "step_on_hw_trig"], [42, 2, 1, "", "sweep_dir"], [42, 2, 1, "", "sweep_mode"], [42, 2, 1, "", "tri_waveform"], [42, 2, 1, "", "trig_out_enable"], [42, 2, 1, "", "trig_out_on_cycle"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate": [[42, 2, 1, "", "day"], [42, 2, 1, "", "hour"], [42, 2, 1, "", "month"], [42, 2, 1, "", "year"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT": [[42, 2, 1, "", "auto_pwr_disable"], [42, 2, 1, "", "device_access"], [42, 2, 1, "", "device_standby"], [42, 2, 1, "", "ext_ref_detect"], [42, 2, 1, "", "ext_ref_lock_enable"], [42, 2, 1, "", "harmonic_ss"], [42, 2, 1, "", "list_mode_running"], [42, 2, 1, "", "output_enable"], [42, 2, 1, "", "over_temp"], [42, 2, 1, "", "pci_clk_enable"], [42, 2, 1, "", "ref_out_select"], [42, 2, 1, "", "rf1_lock_mode"], [42, 2, 1, "", "rf1_loop_gain"], [42, 2, 1, "", "rf_mode"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT": [[42, 2, 1, "", "crs_aux_pll_ld"], [42, 2, 1, "", "crs_pll_ld"], [42, 2, 1, "", "crs_ref_pll_ld"], [42, 2, 1, "", "fine_pll_ld"], [42, 2, 1, "", "ref_100_pll_ld"], [42, 2, 1, "", "ref_10_pll_ld"], [42, 2, 1, "", "sum_pll_ld"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A": [[42, 3, 1, "", "__init__"], [42, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.SingleQuantum": [[43, 0, 0, "-", "SingleQuantum"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum": [[43, 1, 1, "", "ChannelArray"], [43, 1, 1, "", "CommunicationHandler"], [43, 1, 1, "", "SQCounts"], [43, 1, 1, "", "SQTalk"], [43, 1, 1, "", "TimeArray"], [43, 1, 1, "", "WebSQControlqcode"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray": [[43, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler": [[43, 3, 1, "", "acquire_cnts_t"], [43, 3, 1, "", "auto_cali_bias_currents"], [43, 3, 1, "", "auto_cali_finished"], [43, 3, 1, "", "enable_detectors"], [43, 3, 1, "", "error"], [43, 3, 1, "", "get_bias_current"], [43, 3, 1, "", "get_bias_voltage"], [43, 3, 1, "", "get_measurement_periode"], [43, 3, 1, "", "get_number_of_detectors"], [43, 3, 1, "", "get_trigger_level"], [43, 3, 1, "", "set_bias_current"], [43, 3, 1, "", "set_dark_counts_auto_iv"], [43, 3, 1, "", "set_measurement_periode"], [43, 3, 1, "", "set_trigger_level"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts": [[43, 3, 1, "", "close"], [43, 3, 1, "", "get_n"], [43, 3, 1, "", "run"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk": [[43, 3, 1, "", "add_labelProps"], [43, 3, 1, "", "check_error"], [43, 3, 1, "", "close"], [43, 3, 1, "", "get_all_labels"], [43, 3, 1, "", "get_label"], [43, 3, 1, "", "run"], [43, 3, 1, "", "send"], [43, 3, 1, "", "sub_jsons"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray": [[43, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Spectrum": [[44, 0, 0, "-", "M4i"], [45, 0, 0, "-", "py_header"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i": [[44, 1, 1, "", "M4i"], [44, 6, 1, "", "szTypeToName"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "active_channels"], [44, 3, 1, "", "blockavg_hardware_trigger_acquisition"], [44, 3, 1, "", "close"], [44, 3, 1, "", "convert_to_voltage"], [44, 3, 1, "", "gated_trigger_acquisition"], [44, 3, 1, "", "get_card_memory"], [44, 3, 1, "", "get_card_type"], [44, 3, 1, "", "get_data"], [44, 3, 1, "", "get_error_info32bit"], [44, 3, 1, "", "get_firmware_version"], [44, 3, 1, "", "get_hardware_version"], [44, 3, 1, "", "get_idn"], [44, 3, 1, "", "get_max_sample_rate"], [44, 3, 1, "", "initialize_channels"], [44, 3, 1, "", "multiple_trigger_acquisition"], [44, 3, 1, "", "reset"], [44, 3, 1, "", "retrieve_data"], [44, 3, 1, "", "set_channel_OR_trigger_settings"], [44, 3, 1, "", "set_channel_settings"], [44, 3, 1, "", "set_ext0_OR_trigger_settings"], [44, 3, 1, "", "setup_multi_recording"], [44, 3, 1, "", "single_software_trigger_acquisition"], [44, 3, 1, "", "single_software_trigger_acquisition_boxcar"], [44, 3, 1, "", "single_trigger_acquisition"], [44, 3, 1, "", "start_acquisition"], [44, 3, 1, "", "start_triggered"], [44, 3, 1, "", "wait_ready"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header": [[45, 0, 0, "-", "h2py"], [45, 0, 0, "-", "regs"], [45, 0, 0, "-", "spcerr"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py": [[45, 6, 1, "", "main"], [45, 6, 1, "", "process"], [45, 6, 1, "", "pytify"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs": [[45, 6, 1, "", "GIGA"], [45, 6, 1, "", "GIGA_B"], [45, 6, 1, "", "KILO"], [45, 6, 1, "", "KILO_B"], [45, 6, 1, "", "MEGA"], [45, 6, 1, "", "MEGA_B"]], "qcodes_contrib_drivers.drivers.Standa": [[46, 0, 0, "-", "Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168": [[46, 1, 1, "", "DeviceInformation"], [46, 1, 1, "", "GetPosition"], [46, 1, 1, "", "Standa_10MWA168"], [46, 1, 1, "", "Status"], [46, 1, 1, "", "libximc"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation": [[46, 2, 1, "", "Major"], [46, 2, 1, "", "Manufacturer"], [46, 2, 1, "", "ManufacturerId"], [46, 2, 1, "", "Minor"], [46, 2, 1, "", "ProductDescription"], [46, 2, 1, "", "Release"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition": [[46, 2, 1, "", "EncPosition"], [46, 2, 1, "", "Position"], [46, 2, 1, "", "uPosition"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status": [[46, 2, 1, "", "CmdBufFreeSpace"], [46, 2, 1, "", "CurPosition"], [46, 2, 1, "", "CurSpeed"], [46, 2, 1, "", "CurT"], [46, 2, 1, "", "EncPosition"], [46, 2, 1, "", "EncSts"], [46, 2, 1, "", "Flags"], [46, 2, 1, "", "GPIOFlags"], [46, 2, 1, "", "Ipwr"], [46, 2, 1, "", "Iusb"], [46, 2, 1, "", "MoveSts"], [46, 2, 1, "", "MvCmdSts"], [46, 2, 1, "", "PWRSts"], [46, 2, 1, "", "Upwr"], [46, 2, 1, "", "Uusb"], [46, 2, 1, "", "WindSts"], [46, 2, 1, "", "uCurPosition"], [46, 2, 1, "", "uCurSpeed"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc": [[46, 3, 1, "", "command_move"], [46, 3, 1, "", "enumerate_devices"], [46, 3, 1, "", "error_check"], [46, 3, 1, "", "get_device_name"], [46, 3, 1, "", "get_position"], [46, 3, 1, "", "get_status"], [46, 3, 1, "", "open_device"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems": [[47, 0, 0, "-", "CS580"], [47, 0, 0, "-", "DG645"], [47, 0, 0, "-", "SIM928"], [47, 0, 0, "-", "SR570"], [47, 0, 0, "-", "SR844"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580": [[47, 1, 1, "", "CS580"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580": [[47, 3, 1, "", "get_idn"], [47, 3, 1, "", "get_overload"], [47, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645": [[47, 1, 1, "", "DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645": [[47, 2, 1, "", "CHANNEL_MAPPING"], [47, 2, 1, "", "DISPLAY_MAPPING"], [47, 2, 1, "", "OUTPUT_MAPPING"], [47, 2, 1, "", "POLARITY_MAPPING"], [47, 2, 1, "", "PRESCALE_MAPPING"], [47, 2, 1, "", "TRIGGER_MAPPING"], [47, 3, 1, "", "local"], [47, 3, 1, "", "remote"], [47, 3, 1, "", "reset"], [47, 3, 1, "", "save_settings"], [47, 3, 1, "", "self_calibrate"], [47, 3, 1, "", "self_test"], [47, 3, 1, "", "trigger"], [47, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928": [[47, 1, 1, "", "SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928": [[47, 3, 1, "", "ask_module"], [47, 3, 1, "", "byte_to_bits"], [47, 3, 1, "", "check_module_errors"], [47, 3, 1, "", "find_modules"], [47, 3, 1, "", "get_module_idn"], [47, 3, 1, "", "get_module_status"], [47, 3, 1, "", "get_voltage"], [47, 3, 1, "", "reset_module"], [47, 3, 1, "", "set_smooth"], [47, 3, 1, "", "set_voltage"], [47, 3, 1, "", "write_module"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570": [[47, 1, 1, "", "SR570"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR570.SR570": [[47, 3, 1, "", "get_idn"], [47, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844": [[47, 1, 1, "", "ChannelTrace"], [47, 1, 1, "", "GeneratedSetPoints"], [47, 1, 1, "", "SR844"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace": [[47, 3, 1, "", "__init__"], [47, 3, 1, "", "get_buffer_length"], [47, 3, 1, "", "get_raw"], [47, 3, 1, "", "parse_binary"], [47, 3, 1, "", "poll_raw_binary_data"], [47, 3, 1, "", "update_unit"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints": [[47, 3, 1, "", "get_raw"], [47, 3, 1, "", "set_raw"], [47, 3, 1, "", "update_units_if_constant_sample_rate"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844": [[47, 2, 1, "", "SNAP_PARAMETERS"], [47, 3, 1, "", "decrement_sensitivity"], [47, 3, 1, "", "get_display_value"], [47, 3, 1, "", "increment_sensitivity"], [47, 2, 1, "", "sensitivity_value_map"], [47, 3, 1, "", "set_sweep_parameters"], [47, 3, 1, "", "snap"], [47, 3, 1, "", "update_ch_unit"], [47, 2, 1, "", "value_sensitivity_map"]], "qcodes_contrib_drivers.drivers.SwabianInstruments": [[48, 0, 0, "-", "Swabian_Instruments_Time_Tagger"], [49, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger": [[48, 1, 1, "", "CoincidenceVirtualChannel"], [48, 1, 1, "", "CombinerVirtualChannel"], [48, 1, 1, "", "CorrelationMeasurement"], [48, 1, 1, "", "CountRateMeasurement"], [48, 1, 1, "", "CounterMeasurement"], [48, 1, 1, "", "HistogramLogBinsMeasurement"], [48, 1, 1, "", "TimeTagger"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CoincidenceVirtualChannel": [[48, 2, 1, "", "api"], [48, 2, 1, "", "channels"], [48, 2, 1, "", "coincidence_window"], [48, 2, 1, "", "timestamp"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CombinerVirtualChannel": [[48, 2, 1, "", "api"], [48, 2, 1, "", "channels"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CorrelationMeasurement": [[48, 2, 1, "", "api"], [48, 2, 1, "", "binwidth"], [48, 2, 1, "", "channels"], [48, 2, 1, "", "data"], [48, 2, 1, "", "data_normalized"], [48, 2, 1, "", "n_bins"], [48, 2, 1, "", "time_bins"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CountRateMeasurement": [[48, 2, 1, "", "api"], [48, 2, 1, "", "channels"], [48, 2, 1, "", "counts_total"], [48, 2, 1, "", "data"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.CounterMeasurement": [[48, 2, 1, "", "api"], [48, 2, 1, "", "binwidth"], [48, 2, 1, "", "channels"], [48, 2, 1, "", "data"], [48, 2, 1, "", "data_normalized"], [48, 2, 1, "", "data_total_counts"], [48, 2, 1, "", "n_values"], [48, 2, 1, "", "rolling"], [48, 2, 1, "", "time_bins"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.HistogramLogBinsMeasurement": [[48, 2, 1, "", "api"], [48, 2, 1, "", "click_channel"], [48, 2, 1, "", "click_gate"], [48, 2, 1, "", "counts"], [48, 2, 1, "", "exp_start"], [48, 2, 1, "", "exp_stop"], [48, 2, 1, "", "g2"], [48, 2, 1, "", "n_bins"], [48, 2, 1, "", "start_channel"], [48, 2, 1, "", "start_gate"], [48, 2, 1, "", "time_bin_edges"], [48, 2, 1, "", "time_bins"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.Swabian_Instruments_Time_Tagger.TimeTagger": [[48, 3, 1, "", "__init__"], [48, 5, 1, "", "api"], [48, 3, 1, "", "close"], [48, 3, 1, "", "get_idn"], [48, 3, 1, "", "get_input_delay"], [48, 3, 1, "", "get_test_signal"], [48, 3, 1, "", "get_trigger_level"], [48, 5, 1, "", "measurement_lists"], [48, 3, 1, "", "remove_all_measurements"], [48, 3, 1, "", "remove_all_virtual_channels"], [48, 3, 1, "", "set_input_delay"], [48, 3, 1, "", "set_test_signal"], [48, 3, 1, "", "set_trigger_level"], [48, 5, 1, "", "virtual_channel_lists"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private": [[49, 0, 0, "-", "time_tagger"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger": [[49, 1, 1, "", "ArrayLikeValidator"], [49, 1, 1, "", "DelegateParameterWithoutParentValidator"], [49, 1, 1, "", "LogspaceNumValidator"], [49, 1, 1, "", "LogspaceStartValidator"], [49, 1, 1, "", "LogspaceStopValidator"], [49, 1, 1, "", "MeasurementControlMixin"], [49, 1, 1, "", "ParameterWithSetSideEffect"], [49, 1, 1, "", "TimeTaggerInstrumentBase"], [49, 1, 1, "", "TimeTaggerMeasurement"], [49, 1, 1, "", "TimeTaggerModule"], [49, 1, 1, "", "TimeTaggerSynchronizedMeasurements"], [49, 1, 1, "", "TimeTaggerVirtualChannel"], [49, 1, 1, "", "TypeValidator"], [49, 6, 1, "", "cached_api_object"], [49, 6, 1, "", "refer_to_api_doc"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.ArrayLikeValidator": [[49, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.DelegateParameterWithoutParentValidator": [[49, 5, 1, "", "validators"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceNumValidator": [[49, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceStartValidator": [[49, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.LogspaceStopValidator": [[49, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.MeasurementControlMixin": [[49, 5, 1, "", "api"], [49, 3, 1, "", "clear"], [49, 3, 1, "", "is_running"], [49, 3, 1, "", "start"], [49, 3, 1, "", "start_for"], [49, 3, 1, "", "stop"], [49, 3, 1, "", "wait_until_finished"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerInstrumentBase": [[49, 5, 1, "", "api"], [49, 3, 1, "", "get_configuration"], [49, 3, 1, "", "snapshot_base"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerMeasurement": [[49, 3, 1, "", "get_capture_duration"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerModule": [[49, 3, 1, "", "__init__"], [49, 5, 1, "", "api"], [49, 5, 1, "", "api_tagger"], [49, 3, 1, "", "implementations"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerSynchronizedMeasurements": [[49, 5, 1, "", "api"], [49, 5, 1, "", "api_tagger"], [49, 3, 1, "", "register_measurement"], [49, 3, 1, "", "unregister_measurement"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TimeTaggerVirtualChannel": [[49, 3, 1, "", "get_channel"], [49, 3, 1, "", "get_channels"]], "qcodes_contrib_drivers.drivers.SwabianInstruments.private.time_tagger.TypeValidator": [[49, 3, 1, "", "validate"]], "qcodes_contrib_drivers.drivers.Tektronix": [[50, 0, 0, "-", "AFG3000"], [50, 0, 0, "-", "AWG520"], [50, 0, 0, "-", "FCA3100"], [50, 0, 0, "-", "Keithley_2000_Scan"], [50, 0, 0, "-", "Keithley_2401"], [50, 0, 0, "-", "Keithley_2700"], [50, 0, 0, "-", "Keithley_6430"], [50, 0, 0, "-", "Keithley_6500"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000": [[50, 1, 1, "", "AFG3000"], [50, 1, 1, "", "AFG3252"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000": [[50, 3, 1, "", "abort"], [50, 3, 1, "", "recall"], [50, 3, 1, "", "reset"], [50, 3, 1, "", "reset_edit_memory"], [50, 3, 1, "", "save"], [50, 3, 1, "", "self_calibrate"], [50, 3, 1, "", "self_test"], [50, 3, 1, "", "synchronize_phase"], [50, 3, 1, "", "upload_waveform"], [50, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520": [[50, 1, 1, "", "Tektronix_AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "change_folder"], [50, 3, 1, "", "clear_waveforms"], [50, 3, 1, "", "delete_all_waveforms_from_list"], [50, 3, 1, "", "force_logicjump"], [50, 3, 1, "", "force_trigger"], [50, 3, 1, "", "get_all"], [50, 3, 1, "", "get_current_folder_name"], [50, 3, 1, "", "get_filenames"], [50, 3, 1, "", "get_folder_contents"], [50, 3, 1, "", "get_jumpmode"], [50, 3, 1, "", "get_state"], [50, 3, 1, "", "goto_root"], [50, 3, 1, "", "load_and_set_sequence"], [50, 3, 1, "", "make_directory"], [50, 3, 1, "", "resend_waveform"], [50, 3, 1, "", "return_self"], [50, 3, 1, "", "send_pattern"], [50, 3, 1, "", "send_sequence"], [50, 3, 1, "", "send_sequence2"], [50, 3, 1, "", "send_waveform"], [50, 3, 1, "", "set_current_folder_name"], [50, 3, 1, "", "set_jumpmode"], [50, 3, 1, "", "set_sequence"], [50, 3, 1, "", "set_setup_filename"], [50, 3, 1, "", "start"], [50, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100": [[50, 1, 1, "", "CompleteTimeStatistics"], [50, 1, 1, "", "FCA3100"], [50, 1, 1, "", "GeneratedSetPoints"], [50, 1, 1, "", "TimeStatistics"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.CompleteTimeStatistics": [[50, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.FCA3100": [[50, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.GeneratedSetPoints": [[50, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Tektronix.FCA3100.TimeStatistics": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan": [[50, 1, 1, "", "Keithley_2000_Scan_Channel"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel": [[50, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401": [[50, 1, 1, "", "Keithley2400"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2401.Keithley2400": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "enable_output"], [50, 3, 1, "", "set_voltage"], [50, 3, 1, "", "sweep_voltage_measure"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700": [[50, 1, 1, "", "Keithley_2700"], [50, 6, 1, "", "bool_to_str"], [50, 6, 1, "", "parsebool"], [50, 6, 1, "", "parseint"], [50, 6, 1, "", "parsestr"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700": [[50, 3, 1, "", "get_all"], [50, 3, 1, "", "reset"], [50, 3, 1, "", "set_defaults"], [50, 3, 1, "", "set_mode"], [50, 3, 1, "", "set_mode_volt_dc"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430": [[50, 1, 1, "", "Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430": [[50, 3, 1, "", "init"], [50, 3, 1, "", "read"], [50, 3, 1, "", "reset"], [50, 3, 1, "", "set_trigger_immediate"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500": [[50, 1, 1, "", "Keithley_6500"], [50, 1, 1, "", "Keithley_Sense"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500": [[50, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense": [[50, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Thermotek": [[51, 0, 0, "-", "Thermotek_T255p"]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p": [[51, 1, 1, "", "ThermotekT255p"]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p": [[51, 3, 1, "", "alarm_state"], [51, 3, 1, "", "ask"], [51, 2, 1, "", "enabled"], [51, 3, 1, "", "get_idn"], [51, 3, 1, "", "status"], [51, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Thorlabs": [[52, 0, 0, "-", "K10CR1"], [52, 0, 0, "-", "KDC101"], [52, 0, 0, "-", "KLS1550"], [52, 0, 0, "-", "MFF10x"], [52, 0, 0, "-", "PM100D"], [52, 0, 0, "-", "PRM1Z8"], [52, 0, 0, "-", "TDC001"], [53, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1": [[52, 1, 1, "", "HomeLimitSwitch"], [52, 1, 1, "", "RotationDirection"], [52, 1, 1, "", "Thorlabs_K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch": [[52, 2, 1, "", "FORWARD"], [52, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection": [[52, 2, 1, "", "FORWARD"], [52, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1": [[52, 2, 1, "", "apt"], [52, 3, 1, "", "get_idn"], [52, 2, 1, "", "model"], [52, 2, 1, "", "serial_number"], [52, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.KDC101": [[52, 1, 1, "", "Thorlabs_KDC101"]], "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550": [[52, 1, 1, "", "Thorlabs_KLS1550"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x": [[52, 1, 1, "", "Thorlabs_MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x": [[52, 2, 1, "", "apt"], [52, 3, 1, "", "get_idn"], [52, 2, 1, "", "model"], [52, 2, 1, "", "serial_number"], [52, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.PM100D": [[52, 1, 1, "", "Thorlab_PM100D"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8": [[52, 1, 1, "", "Thorlabs_PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8": [[52, 2, 1, "", "apt"], [52, 3, 1, "", "get_idn"], [52, 2, 1, "", "model"], [52, 2, 1, "", "serial_number"], [52, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.TDC001": [[52, 1, 1, "", "Thorlabs_TDC001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private": [[53, 0, 0, "-", "APT"], [53, 0, 0, "-", "CC"], [53, 0, 0, "-", "LS"], [53, 0, 0, "-", "kinesis"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT": [[53, 4, 1, "", "ThorlabsException"], [53, 1, 1, "", "ThorlabsHWType"], [53, 1, 1, "", "Thorlabs_APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType": [[53, 2, 1, "", "BBD10x"], [53, 2, 1, "", "BDC101"], [53, 2, 1, "", "BSC001"], [53, 2, 1, "", "BSC002"], [53, 2, 1, "", "BSC101"], [53, 2, 1, "", "DCC001"], [53, 2, 1, "", "K10CR1"], [53, 2, 1, "", "KDC101"], [53, 2, 1, "", "L490MZ"], [53, 2, 1, "", "LTSxxx"], [53, 2, 1, "", "MFF10x"], [53, 2, 1, "", "MST601"], [53, 2, 1, "", "ODC001"], [53, 2, 1, "", "OST001"], [53, 2, 1, "", "PRM1Z8"], [53, 2, 1, "", "SCC001"], [53, 2, 1, "", "TDC001"], [53, 2, 1, "", "TST001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT": [[53, 3, 1, "", "apt_clean_up"], [53, 3, 1, "", "apt_init"], [53, 3, 1, "", "disable_hw_channel"], [53, 2, 1, "", "dll"], [53, 3, 1, "", "enable_event_dlg"], [53, 3, 1, "", "enable_hw_channel"], [53, 3, 1, "", "error_check"], [53, 3, 1, "", "get_hw_info"], [53, 3, 1, "", "get_hw_serial_num_ex"], [53, 3, 1, "", "init_hw_device"], [53, 3, 1, "", "list_available_devices"], [53, 3, 1, "", "mot_get_home_parameters"], [53, 3, 1, "", "mot_get_position"], [53, 3, 1, "", "mot_get_status_bits"], [53, 3, 1, "", "mot_get_velocity_parameters"], [53, 3, 1, "", "mot_move_absolute_ex"], [53, 3, 1, "", "mot_move_home"], [53, 3, 1, "", "mot_move_jog"], [53, 3, 1, "", "mot_move_velocity"], [53, 3, 1, "", "mot_set_home_parameters"], [53, 3, 1, "", "mot_set_velocity_parameters"], [53, 3, 1, "", "mot_stop_profiled"], [53, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Valon": [[54, 0, 0, "-", "Valon_5015"]], "qcodes_contrib_drivers.drivers.Valon.Valon_5015": [[54, 1, 1, "", "Valon5015"]], "qcodes_contrib_drivers.drivers.Valon.Valon_5015.Valon5015": [[54, 3, 1, "", "askv"]], "qcodes_contrib_drivers.drivers.Vaunix": [[55, 0, 0, "-", "LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA": [[55, 2, 1, "", "LDA"], [55, 1, 1, "", "LdaAttenuation"], [55, 1, 1, "", "LdaChannel"], [55, 1, 1, "", "LdaParameter"], [55, 1, 1, "", "LdaWorkingFrequency"], [55, 1, 1, "", "Vaunix_LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation": [[55, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "get_raw"], [55, 2, 1, "", "scaling"], [55, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "get_validator"], [55, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "close"], [55, 2, 1, "", "dll_path"], [55, 3, 1, "", "get_idn"], [55, 3, 1, "", "save_settings"]], "qcodes_contrib_drivers.drivers.Windfreak": [[56, 0, 0, "-", "Windfreak_SynthHD"], [56, 0, 0, "-", "Windfreak_SynthUSB3"]], "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD": [[56, 1, 1, "", "SynthHDChannel"], [56, 1, 1, "", "WindfreakSynthHD"]], "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthHD.WindfreakSynthHD": [[56, 3, 1, "", "close"], [56, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3": [[56, 1, 1, "", "WindfreakSynthUSB3"]], "qcodes_contrib_drivers.drivers.Windfreak.Windfreak_SynthUSB3.WindfreakSynthUSB3": [[56, 2, 1, "", "default_terminator"], [56, 2, 1, "", "frequency"], [56, 2, 1, "", "level"]], "qcodes_contrib_drivers.drivers.ZurichInstruments": [[57, 0, 0, "-", "HF2LI"], [57, 0, 0, "-", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI": [[57, 1, 1, "", "HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI": [[57, 2, 1, "", "OUTPUT_MAPPING"], [57, 3, 1, "", "sample"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8": [[57, 4, 1, "", "CompilerError"], [57, 1, 1, "", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8": [[57, 3, 1, "", "__init__"], [57, 3, 1, "", "create_parameters_from_node_tree"], [57, 3, 1, "", "disable_channel"], [57, 3, 1, "", "download_device_node_tree"], [57, 3, 1, "", "enable_channel"], [57, 3, 1, "", "generate_csv_sequence_program"], [57, 3, 1, "", "set_channel_grouping"], [57, 3, 1, "", "snapshot"], [57, 3, 1, "", "snapshot_base"], [57, 3, 1, "", "start_awg"], [57, 3, 1, "", "stop_awg"], [57, 3, 1, "", "upload_sequence_program"], [57, 3, 1, "", "upload_waveform"], [57, 3, 1, "", "waveform_to_csv"], [57, 3, 1, "", "waveform_to_wave"]], "qcodes_contrib_drivers.drivers.physik_instrumente": [[58, 0, 0, "-", "mercury"]], "qcodes_contrib_drivers.drivers.physik_instrumente.mercury": [[58, 1, 1, "", "mercury"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "exception", "Python exception"], "5": ["py", "property", "Python property"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:exception", "5": "py:property", "6": "py:function"}, "terms": {"": [1, 7, 9, 11, 13, 14, 15, 16, 19, 22, 23, 29, 31, 32, 35, 37, 41, 43, 47, 48, 49, 53, 54, 55, 57, 61, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 79, 82, 83, 84, 86, 115, 118, 122, 123, 124, 126, 132, 134, 135], "0": [1, 6, 7, 9, 11, 13, 14, 15, 16, 19, 21, 22, 25, 27, 29, 30, 31, 32, 34, 35, 37, 41, 43, 44, 47, 48, 50, 51, 53, 55, 57, 59, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134], "00": [22, 63, 64, 74, 85, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 111, 118, 120, 131], "000": 130, "0000": 79, "000000": 6, "000000000": 78, "00000000e": 120, "0000000e": 65, "000000e": 74, "000069196": 72, "0000k02": [37, 114], "0001": [37, 47], "00012969970703": 129, "000215296835037395": 84, "00025": [73, 113], "0003": 47, "000390634": 69, "0005e": 65, "001": [32, 37, 47, 68, 79, 115, 123], "0014": 78, "0016660000000000002": 78, "001678": 78, "00189208984375": 129, "001926666666665966": 84, "002": [30, 32, 68], "00283333": 104, "003": [47, 68, 104], "00300": 74, "00305115": 65, "0048": 78, "005": [9, 37, 78, 84, 92, 93, 96, 113, 114, 115], "0055": 104, "006": 115, "00655536": 65, "007279999999999731": 84, "0074385j": 115, "00744152": 115, "0078465": 64, "008": 104, "008160411890476027": 84, "00866667": 104, "00901262": 115, "00901563": 115, "0094": 84, "009747936533783237": 84, "009894676458693501": 84, "00it": 118, "01": [22, 35, 37, 47, 70, 74, 78, 82, 84, 86, 92, 93, 96, 97, 99, 100, 104, 111, 115, 123, 126, 130], "0101": 84, "01097229": 65, "011": 93, "01133333": 104, "0116": 84, "01215209": 65, "01218056e": 120, "0125": 104, "013": [92, 93], "013605": 13, "01384824": 65, "0145": 104, "015": [92, 93], "01501654e": 120, "01547223": 65, "016": 73, "0165": 68, "01666": 78, "0166614": 78, "017": 104, "01708669": 65, "01716667": 104, "01844561": 65, "01846251": 124, "01851450451": 124, "01853304": 124, "01856394": 124, "0185761": 124, "01862650541": 124, "01863655": 124, "01863821": 124, "01866243": 124, "01867253": 124, "01867947": 124, "01868165": 124, "01873824896": 124, "01875304": 124, "01884765": 65, "0193728ba050": 79, "019863333333333344": 84, "01988006": 65, "01996385": 65, "0199999809265137": 117, "01db": 37, "02": [9, 31, 70, 75, 76, 84, 86, 94, 104, 111, 123, 128], "020": 71, "02083835": 65, "021": [92, 93], "02119365": 65, "0214076": 65, "02163175": 65, "02279546": 65, "02283333": 104, "023": 104, "02357165": 65, "02385243": 65, "02391645": 65, "02544277": 65, "0255": 104, "026373828": 112, "02839042": 65, "02866667": 104, "02926526": 65, "02948864": 65, "02987041": 65, "03": [47, 82, 84, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 115], "03038562": 65, "03133333": 104, "03160302": 65, "03176e2e": 82, "03181706": 65, "032301": 77, "03399903": 65, "034": 104, "03521817": 65, "036": 124, "03633333": 104, "037": 104, "03700120e": 120, "03716667": 104, "0380136": 13, "03999996e": 120, "04": [37, 59, 69, 74, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 114], "04283333": 104, "04438044": 125, "045": 9, "0455": 104, "04566667": 104, "04666082e": 120, "0477012": 65, "048": 130, "04b": 125, "04e": 73, "04v": 37, "05": [9, 30, 32, 47, 55, 57, 65, 73, 74, 78, 79, 86, 91, 95, 99, 100, 101, 103, 104, 108, 113, 115, 120, 123, 124], "050000e": 74, "0506": 13, "0506a": 13, "051": [67, 104], "05133333": 104, "05448153e": 120, "057": 104, "05d4ff35": 130, "06": [32, 47, 64, 65, 73, 91, 104, 107, 117, 120, 121, 123], "06103515625": 35, "06177799": 65, "0630699567828778": 85, "06314712e": 120, "0655": 104, "06598604": 65, "0663604736328": 126, "06872062": 65, "07": [32, 47, 73, 79, 120, 123, 125], "070711": 79, "07122802734375": 126, "073000": 70, "07678511e": 120, "077": 104, "07999992e": 120, "08": [6, 73, 99, 117, 120], "08000004e": 120, "08201196e": 120, "083": 104, "08e": 73, "09": [65, 68, 69, 71, 82, 102, 103, 123, 124], "09130151": 65, "09391321": 65, "09789189e": 120, "09806205e": 120, "09917688": 65, "0991836423285": 35, "09996000000000001": 78, "0a": 54, "0b0011": [75, 76], "0b1100": [75, 76], "0e": 96, "0it": 118, "0j": 118, "0v": [7, 9, 32, 82, 86], "0x0": 130, "0x00000260e600a630": 122, "0x00000260fdf97180": 122, "0x001b": 118, "0x01000001": 44, "0x01000002": 44, "0x0699": 124, "0x08": 57, "0x0957": 59, "0x099c": 111, "0x0a2d": 118, "0x0e0b": 59, "0x10": 57, "0x186e0c5e4f0": 70, "0x18a73db7850": 115, "0x1ab1": 111, "0x1c1331caa20": 84, "0x20": 57, "0x26ca6ddc850": 115, "0x26ca6e02fd0": 115, "0x3000": 124, "0x40": 57, "0xa471608": 123, "1": [1, 6, 7, 8, 9, 11, 15, 19, 21, 22, 23, 27, 29, 30, 31, 32, 34, 35, 37, 41, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "10": [1, 6, 15, 27, 28, 29, 31, 34, 35, 44, 47, 48, 50, 59, 61, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 78, 79, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 111, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 130, 133], "100": [15, 22, 30, 31, 32, 35, 37, 43, 47, 63, 68, 70, 72, 74, 77, 79, 80, 82, 84, 92, 93, 114, 116, 117, 118, 123, 130, 134], "1000": [30, 34, 35, 37, 44, 48, 50, 68, 72, 75, 76, 83, 88, 92, 93, 96, 98, 114, 123, 133], "10000": [22, 44, 65, 123], "100000": [11, 22, 55, 70], "1000000": [22, 37, 70, 96], "10000000": [22, 130], "100000000": [22, 37], "1000000000": 50, "10000000000": 117, "10000000149011612": 120, "100000e": 74, "10016418": 130, "100313": 74, "10032872": 65, "100377": 74, "1007202881152461": 78, "100e": [68, 89, 96, 99, 100, 103, 123], "100k": [135, 136], "100khz": 114, "100mhz": 71, "101": [34, 115, 133], "101920": 113, "10193855": 65, "102": [55, 84, 115, 131], "1024": [69, 88], "10258804e": 120, "10392121": 65, "1040": 132, "105": 13, "10526495": 65, "105578": [37, 114], "106": 84, "10708843e": 120, "10721224": 65, "1073807339": 111, "1079970136051998e": 120, "108": [83, 123, 130], "10e": [88, 89, 91, 97, 101, 102, 104], "10e3": 65, "10e6": [68, 130], "10e9": 117, "10hz": 32, "10khz": 32, "10m": 86, "10ma": 32, "10mhz": [22, 130], "10min": 31, "10mwa168": [135, 136], "10n": 22, "11": [16, 35, 47, 53, 59, 61, 65, 68, 69, 70, 71, 73, 78, 79, 83, 88, 89, 90, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 107, 108, 111, 118, 120, 122, 123, 124, 125, 131], "11017192": 65, "11085784e": 120, "110e": 97, "111": 118, "11111": 130, "11111111": 47, "11146993e": 120, "112": 104, "11290896e": 120, "113375t": 13, "113772": 65, "11469549": 65, "115153276995": 85, "115200": [19, 72], "1175994873047": 126, "11833333": 104, "119": 104, "11999989e": 120, "11e": 73, "11h": 117, "11it": 118, "12": [1, 13, 47, 48, 53, 59, 61, 65, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 83, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 108, 113, 117, 120, 122, 125, 131, 133], "120": [30, 31, 71, 126], "12000": [43, 119], "1202": 41, "1204xe": 41, "121": [126, 130], "122": 126, "12203435": 130, "1223": 130, "123": 59, "12345": 43, "123456": 72, "12345678": 63, "1234567890": 72, "1234567ab8": 122, "125": [118, 126], "12500": 72, "127": 126, "12766667": 104, "128": [22, 44, 120], "12a": 13, "12e": 73, "12t": 13, "12v": [9, 73], "13": [47, 53, 59, 65, 67, 68, 70, 71, 72, 73, 74, 77, 79, 83, 88, 90, 94, 95, 96, 99, 100, 103, 104, 108, 120, 122, 123, 124, 131], "130": 126, "1302357518883": 35, "1304": 6, "13086379": 118, "132": 126, "1326": 72, "133": [55, 74, 79], "1331486": 65, "133333": 91, "13333333": 104, "134": 114, "135": 126, "1350": 116, "1357727": 74, "137": 104, "13789": 61, "138": 126, "13961321e": 120, "139db": 37, "13dbm": 130, "14": [35, 47, 53, 65, 67, 68, 71, 73, 74, 84, 86, 89, 90, 92, 93, 100, 102, 103, 104, 108, 111, 117, 120, 122, 123, 132, 133], "140": [115, 126], "141": 115, "1412": [37, 114], "142": [115, 118], "143": [68, 115, 126], "145": [37, 104, 126], "1450000000": 70, "14522882e": 120, "14529468": 65, "147": 68, "14764": 59, "148": 126, "149": 104, "14994": 78, "15": [6, 65, 71, 73, 78, 84, 88, 90, 91, 94, 97, 99, 104, 108, 117, 120, 122, 130], "150": [6, 72, 126], "1514": 6, "152": 125, "153": [125, 126], "153450": 107, "15385378": 65, "154": 125, "1545": 6, "155": 126, "15566667": 104, "158": 126, "15898983e": 120, "15999997e": 120, "15ghz": 130, "15ma": 73, "16": [6, 9, 35, 44, 65, 67, 68, 69, 71, 73, 75, 76, 79, 88, 90, 94, 108, 111, 120], "16000009e": 120, "161": 126, "162": [104, 107], "1625": 104, "163": 126, "1630954": 122, "16326155e": 120, "16383": 115, "16413923e": 120, "165": 104, "166": 126, "168": [34, 63, 71, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 119, 125, 126, 130], "17": [6, 65, 71, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 120, 130, 131], "1700": 30, "1700000000": 71, "171": [84, 126], "172": 79, "1724": 1, "17241871": 65, "1725": 130, "17265479": 65, "173": 126, "17303064000000035": 70, "17352842": 65, "17442979": 65, "17575654e": 120, "17585808": 65, "17598948": 65, "176": [104, 125, 126], "177": [84, 125], "178": [68, 107, 108, 125], "179": [84, 126], "17e": 73, "18": [29, 57, 65, 71, 79, 94, 99, 108, 120, 133], "180": [72, 118, 126], "1800": 72, "18075561523438": 126, "181": 126, "18152415": 65, "18361572": 65, "184": 126, "18402174": 65, "188": 104, "1895": 104, "19": [71, 93, 94, 102, 108, 120, 131, 134], "19045": 84, "192": [34, 63, 71, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 119, 125, 130], "194": 130, "19651794433594": 126, "199": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "19919018": 65, "1998": [31, 35], "19992000000000001": 78, "19999981e": 120, "19e": 73, "1_ch1_resist": 125, "1_resist": 125, "1d": [32, 86, 106, 110, 135], "1db": 130, "1dbfd38": 81, "1e": [9, 15, 32, 37, 47, 65, 74, 79, 89, 91, 94, 99, 100, 123, 127, 133, 134], "1e12": 122, "1e3": 15, "1e4": [22, 89], "1e5": [22, 80], "1e6": [15, 22, 65, 80, 92, 93], "1e7": 22, "1e8": 22, "1e9": [111, 133], "1ghz": 15, "1hz": [6, 37], "1m": 32, "1mhz": 37, "1mv": 7, "1v": [86, 123], "2": [6, 7, 8, 11, 14, 15, 19, 21, 22, 23, 27, 29, 30, 31, 32, 35, 37, 44, 47, 48, 50, 51, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136], "20": [6, 15, 22, 31, 37, 44, 62, 65, 68, 74, 75, 76, 83, 84, 88, 94, 96, 97, 103, 107, 108, 111, 119, 120, 122, 123, 133], "200": [31, 44, 52, 62, 75, 76, 83, 86, 115, 116, 123, 127, 129], "2000": [19, 35, 44, 50, 62, 68, 72, 75, 76, 135], "20000": [76, 99, 114], "200000000": 131, "2000000000": 68, "20000000000": 37, "20000005e": 120, "2001": 65, "20033333": 104, "20071286": 72, "200826": 59, "200e": [99, 100, 103], "200m": 13, "200msa": [75, 76], "200mv": 32, "200na": 32, "200uw": 31, "201": 65, "201007": 85, "20107935": 65, "2011": 74, "2013": 6, "2015": 82, "2020": 43, "20201005": 85, "2021": 117, "2022": [4, 124], "2023": [37, 52, 53, 130], "2024120307": 79, "203": 104, "204": 104, "2046": 35, "2048": 35, "20522653": 65, "20570": 47, "20720528": 65, "20e": [9, 89, 97, 98, 101, 104, 105], "20e9": 15, "20ma": 1, "20mw": 31, "20n": [7, 37], "20uw": 31, "20x": [75, 76], "21": [37, 53, 74, 76, 79, 82, 88, 90, 91, 93, 94, 97, 98, 99, 100, 102, 104, 105, 107, 108, 111, 115, 120, 129, 130, 131], "210": [6, 62, 68], "210330": 65, "210604": 117, "210923": 71, "21260": 84, "213": 105, "21312972e": 120, "2142": 73, "22": [53, 61, 71, 83, 88, 92, 101, 103, 108, 120], "220421": 98, "222": 68, "22222222": 47, "22246674e": 120, "22275571e": 120, "2261": 120, "22875213623047": 126, "23": [27, 71, 82, 88, 89, 95, 97, 104, 105, 107, 108, 120, 130], "230130": 61, "231006": 72, "23160": 131, "23523101": 65, "23681928": 65, "23766667": 104, "23860211": 65, "23946765": 65, "23e9": 111, "24": [32, 53, 82, 84, 86, 97, 108, 120], "240": [73, 126], "2400": 50, "24000001e": 120, "240523": 84, "240827": 111, "24117547": 65, "24196163e": 120, "24220820e": 120, "2440": 84, "2450000000": 70, "247": 104, "24865750102757e": 79, "24e": 73, "25": [34, 53, 71, 82, 84, 88, 89, 90, 93, 94, 97, 102, 120, 126, 131, 133], "250": 126, "2500": 44, "25000": 115, "250129": 79, "2538078": 65, "25445556640625": 126, "255": [7, 34, 61], "25529117": 65, "2554965": 72, "256": [44, 79], "256k": 130, "2597": [29, 135, 136], "25e": 86, "26": [12, 53, 59, 68, 120, 124], "26115786e": 120, "2615": 104, "26158": 64, "2621": 84, "26346268": 73, "2675000000": 70, "2684": 117, "2684354560": 1, "2684354561": 1, "2684354562": 1, "2684354563": 1, "2684354564": 1, "2684354565": 1, "268445854": 117, "26880": 111, "27": [59, 68, 82, 98, 102, 111, 120], "2700": 136, "273": 104, "27592226e": 120, "277": 68, "27999997e": 120, "28": [71, 81, 120], "280": 126, "280000": 72, "28000021e": 120, "282": 85, "28203119e": 120, "284": 77, "28452813e": 120, "29": [37, 53, 88, 114, 120], "290": 77, "29000": 115, "2900000000": 70, "29117031": 59, "29144462": 73, "29164617e": 120, "29300": 115, "29345585e": 120, "294": [77, 84], "295": 85, "29505897e": 120, "2975": 116, "29821238e": 120, "2d": [32, 44, 87, 106, 110, 115, 135], "2d_measur": 84, "2e": [65, 73, 88, 89, 94, 95, 96, 99, 102, 103], "2e9": [65, 68, 111], "2f": [15, 25, 56, 60], "2khz": 6, "2mw": 31, "2nd": 44, "2t": 13, "2uw": 31, "2v": [35, 37], "3": [1, 6, 7, 8, 9, 13, 15, 19, 21, 22, 27, 30, 31, 32, 37, 47, 53, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134], "30": [31, 37, 60, 68, 70, 71, 72, 83, 114, 116, 120, 130, 131], "300": [77, 83, 126], "300000": 70, "3000000": 70, "300000000": 37, "3006076": 6, "300khz": 32, "3010041": 6, "3010045": 6, "303": 112, "30560302734375": 126, "30647277832031": 126, "30839077e": 120, "30dbm": 130, "30it": 118, "31": [53, 74, 84, 120, 130], "311": [135, 136], "31201148e": 120, "315": 104, "31545273": 73, "31966667": 104, "3199": 70, "31999993e": 120, "32": [7, 19, 20, 22, 44, 47, 55, 65, 77, 79, 120, 124, 131], "32000005e": 120, "32071011e": 120, "32768": 57, "329": 104, "33": 120, "33045196533203": 126, "33085769e": 120, "331": [23, 77], "331259": 77, "333": 118, "33333333": 47, "3341": 52, "336": 130, "33656": 84, "33m": [92, 93], "33xx": 22, "34": [65, 71, 73, 79, 81, 88, 89, 90, 94, 96, 98, 99, 100, 103, 107, 120, 123, 125], "34345707": 73, "34422t": 13, "34542698": 65, "34555430": 130, "34647": 84, "34689908e": 120, "349": 16, "349h": 16, "35": [37, 83, 120], "35000": 115, "35526896e": 120, "358": 104, "35999990e": 120, "36": [64, 65, 70, 120], "360": 53, "36000013e": 120, "36192594": 65, "36468505859375": 126, "3654": 130, "366874": 65, "36826371e": 120, "37": 120, "37112426757812": 126, "37142712": 73, "37145838": 65, "3758096384": 1, "3758096385": 1, "3758096386": 1, "3758096387": 1, "3758096388": 1, "3758096389": 1, "3758096390": 1, "3758096391": 1, "3758096392": 1, "3758096393": 1, "3758096394": 1, "3758096395": 1, "3758096396": 1, "3758096397": 1, "3758096398": 1, "3758096399": 1, "3758096400": 1, "3758096401": 1, "3758096402": 1, "3758096403": 1, "3758096404": 1, "3758096405": 1, "3758096406": 1, "3758096407": 1, "3758096408": 1, "3758096409": 1, "3758096410": 1, "3758096411": 1, "3758096412": 1, "3758096413": 1, "3758096414": 1, "3758096415": 1, "3758161919": 1, "37759455": 65, "37864181": 128, "37866131": 121, "38": 120, "38231223e": 120, "384": 104, "38599278": 65, "386": 104, "38634014": 65, "39": [59, 61, 65, 66, 67, 68, 70, 71, 72, 74, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 94, 96, 98, 99, 100, 103, 105, 107, 108, 111, 114, 115, 116, 117, 118, 120, 122, 123, 124, 125, 131, 132], "39286430e": 120, "39945953": 73, "39999998e": 120, "3c": 130, "3e": 47, "3e9": [68, 131], "3m": 7, "3v": [22, 130], "3v3": 32, "3vrf": 130, "4": [1, 6, 7, 8, 15, 21, 22, 30, 31, 32, 35, 37, 44, 47, 50, 53, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135], "40": [47, 120, 122], "400": [22, 72], "4000": [22, 35, 75, 76], "400000000": 37, "40000010e": 120, "4001": 133, "400e": [99, 100, 103], "401": 37, "40166667": 104, "4022264e": 124, "40592396e": 120, "406": 117, "4095": 22, "4096": 44, "40ghz": 114, "40ghz_signal": 117, "40n": 7, "41": [35, 79, 104, 120], "411": 104, "41666667": 104, "416667": 91, "42": [53, 64, 82, 120], "420": 70, "420131839019814": 85, "421": 70, "42195358e": 120, "422": 70, "423": 70, "42344528": 73, "424": 70, "425": 70, "426": 70, "427": 70, "4274444580078": 126, "42e": 73, "43": [53, 74, 120], "430": 84, "43158989e": 120, "43194144": 130, "43531616e": 120, "43772": 107, "439": 104, "44": [53, 84, 112, 120], "44000006e": 120, "442": 98, "443": 104, "44444444": 47, "44704848e": 120, "44764077e": 120, "44842612e": 120, "44xx": 44, "45": [65, 117, 120], "450": 72, "450000000": 70, "451": [84, 130], "45145621": 73, "4564": 117, "45e": [9, 73], "46": [67, 120], "46406748": 65, "4681": 66, "469": 104, "47": [65, 68, 120], "4700000000": 68, "47112": 71, "47945107": 73, "47m": 93, "48": [32, 53, 65, 72, 120], "48000002e": 120, "48273614e": 120, "48366667": 104, "48423499e": 120, "48458923e": 120, "4858472571908": 35, "48873901367188": 126, "489": 83, "49": [64, 120], "49447507": 65, "49e": 73, "4_000_000": 122, "4e": [78, 94], "4fc39ec5": 79, "4g": [135, 136], "4k": [3, 10, 13, 31], "4v": [35, 37], "5": [6, 13, 22, 29, 30, 31, 32, 37, 47, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133], "50": [19, 22, 32, 37, 44, 53, 70, 72, 82, 83, 100, 111, 114, 120, 123, 131, 134], "500": [19, 35, 44, 72, 75, 76, 83, 86, 135, 136], "5000": [23, 44], "50000": [37, 100, 103], "500000000": [37, 68], "5000000000000": 122, "50000014": 73, "501": 35, "5015": [54, 135, 136], "502": 35, "5025": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108], "50290144e": 120, "5030059814453": 126, "50389962e": 120, "50597804e": 120, "50976177e": 120, "50e": [96, 101], "50k": 10, "50mk": 13, "51": 120, "51099999998": 74, "512": 115, "5143635": 59, "519": 125, "51951496e": 120, "51999998e": 120, "52": [13, 120], "520": 50, "521": 104, "52614118e": 120, "52689452e": 120, "529": 131, "52it": 118, "53": [68, 120], "5376": 98, "53866": 57, "53e": 64, "54": [120, 124], "54334202e": 120, "544e0a": 84, "5453": 115, "54618": 57, "54783630371094": 126, "54940": 72, "55": 78, "55102": [55, 131], "55125694": 126, "554": 104, "555": 64, "55555556": 47, "556": 115, "55783004e": 120, "558": 115, "55999994e": 120, "56": [70, 111], "560": 115, "5610": 29, "5611": 29, "56154342": 65, "562": 115, "5644": 29, "5645": 29, "5646": 29, "565": 115, "5650": 29, "5651": 29, "5652": 29, "5653": 29, "5654": [29, 82], "5670": 29, "5671": 29, "5672": 29, "5673": 29, "5673e": 29, "570": 125, "5708": 123, "571": 125, "572": 125, "573": 125, "574": 125, "57583366": 65, "576": 64, "57924": 124, "579249": 124, "5793": 125, "5798": 125, "5799": 125, "58": 61, "5820": 29, "583": 125, "584": 125, "5840": 29, "58471971e": 120, "585": 125, "586": 125, "587": 125, "59": [68, 130], "598": 115, "59999990e": 120, "5e": [9, 82, 88, 90, 94, 117, 123], "5e9": 82, "5g": [92, 93], "5khz": 6, "5m6": [92, 93], "5v": [13, 32, 35, 123, 130], "5w": 77, "6": [6, 15, 22, 29, 34, 35, 37, 47, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "60": [13, 15, 29, 59, 60, 61, 114], "600": [19, 31, 72, 116, 132], "60000": 72, "6000000000": [68, 71, 131], "600e3": 72, "603": 104, "60790019e": 120, "60831416e": 120, "60915241": 65, "60e": 104, "61": [13, 73, 114], "61135864257812": 126, "61283115e": 120, "6130981445312": 116, "61782836914062": 126, "62": 113, "622032281476": 85, "625": [23, 135, 136], "6251287": 78, "62992638": 65, "63": [16, 53, 77, 125], "6300000000": 131, "6336059570312": 116, "634878": 69, "6363": [29, 80], "63729": 61, "638": 130, "639": 104, "63999999e": 120, "64": [7, 19, 44, 55, 65, 125, 131], "64000010e": 120, "64102743e": 120, "64141298542764": 35, "6430": [50, 135, 136], "64724": 61, "64745": 61, "64771": 61, "6484703": 65, "65": 125, "650": [19, 116], "6502": 120, "65069": 61, "65246": 61, "65337": 61, "65388529e": 120, "6541137695312": 116, "65538062e": 120, "6575604604440741e": 120, "65819994e": 120, "65901109e": 120, "65917959e": 120, "66": 107, "660": 69, "666": 30, "66666667": 47, "66876736e": 120, "67": 65, "674560546875": 116, "675": 116, "67848303e": 120, "67999983e": 120, "67e": 73, "68": [65, 82], "680": 70, "68000007e": 120, "685": 104, "68810020e": 120, "69": 65, "6906280517578": 126, "6923781185626": 35, "695068359375": 116, "69668351e": 120, "697571356918492": 85, "6e": 71, "6e9": 71, "6ghz": 15, "6v": 37, "7": [6, 47, 50, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 77, 78, 81, 83, 84, 86, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 111, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 128, 129], "70": 65, "70454632e": 120, "71": 115, "71111513": 65, "715576171875": 116, "72": [65, 130], "72000003e": 120, "72068274": 65, "7235186299999995": 70, "72541136e": 120, "72656257e": 120, "7270": [4, 135, 136], "72711611e": 120, "72715481": 65, "72965240364397": 85, "73": [65, 115], "736083984375": 116, "73727416992188": 126, "737e": 13, "73e": 73, "74": [65, 116], "740": 72, "745": 116, "75": [65, 82, 100, 103], "750": 72, "75163547": 65, "756": 116, "756591796875": 116, "75761976e": 120, "75999999e": 120, "76000023e": 120, "767": 104, "77": [65, 78, 118], "77259186e": 120, "77416643e": 120, "777099609375": 116, "7777": 79, "77777778": 47, "77788513e": 120, "77e": 73, "78312326": 65, "78366235e": 120, "78e": 73, "79": [65, 115], "7959442138672": 126, "7975463867188": 116, "79999995e": 120, "7c3ed5015dc0": 125, "7e": 71, "7e9": [15, 68, 71], "7f": 56, "8": [1, 21, 22, 32, 35, 37, 44, 47, 57, 61, 62, 65, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 129, 130, 133], "80": [65, 133], "80017483": 65, "80081939697266": 126, "80293431e": 120, "802q": [55, 131], "80363488": 65, "8043": [135, 136], "81": 65, "81083350e": 120, "813": 84, "815269": 122, "815477": 122, "8163": 13, "8191": 50, "82": 68, "8255": 1, "83": [65, 115], "83102692": 65, "83305360e": 120, "83857355": 129, "83999991e": 120, "84": [65, 115], "84000015e": 120, "84a": 13, "84d4b9528614": 125, "85": [81, 115], "85211098": 65, "85it": 118, "86": [65, 115], "86190725854": 74, "86312445": 65, "86321573e": 120, "865": 125, "87013": 84, "8717498779297": 126, "87500527": 65, "877027": 79, "88000000e": 120, "88000011e": 120, "88017655e": 120, "88555733577478": 35, "88818353e": 120, "88888889": 47, "88894119e": 120, "89235284": 65, "8e": 102, "9": [41, 47, 48, 61, 65, 67, 69, 71, 72, 73, 78, 79, 82, 83, 84, 86, 88, 89, 90, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 108, 111, 114, 115, 116, 118, 120, 122, 124, 125, 130, 131, 133], "90": [129, 134], "90000": [19, 70], "90012645e": 120, "90797516e": 120, "91": 115, "911": 130, "91142356e": 120, "912985": 64, "91712951660156": 126, "92": 115, "92000008e": 120, "92008291e": 120, "9223372036854775807": 19, "9237048905165": 35, "92402692": 65, "9258": [8, 135, 136], "928": 47, "92e": 73, "93": 115, "9302662699321": 35, "93027015e": 120, "93038940429688": 126, "9328": 85, "93368282e": 120, "9379": 37, "93916": 61, "93938446044922": 126, "93e": 73, "94": 123, "94216703e": 120, "94278538": 65, "94393629146197": 85, "95": 115, "950914": 70, "959": 125, "9600": 47, "96000004e": 120, "9614": 64, "96240925": 65, "9693": 84, "96986101": 65, "97": 16, "97461713e": 120, "975": 35, "976": 35, "9760": 71, "98": 104, "98620611": 65, "9866099999999998": 64, "98837280273438": 126, "99": [25, 35, 123], "9909": 84, "9949711258109": 85, "9980010e": 65, "99873487e": 120, "999": 35, "9990000e": 65, "9990005e": 65, "9995000e": 65, "99988788e": 120, "999935906": 72, "999e": 65, "9e": 123, "9e3": 134, "9ee": 41, "A": [1, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 63, 77, 78, 79, 83, 84, 118, 120, 134], "AND": [43, 76], "AS": 43, "And": [37, 111, 112, 113], "As": [29, 32, 48, 71, 86, 114, 122], "At": [62, 108, 111, 114, 122], "BE": [32, 43], "BUT": 43, "Be": [6, 35, 114, 130], "But": [6, 32], "By": [22, 32, 51, 86], "FOR": 43, "For": [1, 6, 7, 15, 19, 22, 29, 35, 44, 48, 55, 68, 71, 72, 78, 80, 82, 84, 86, 92, 93, 108, 115, 122, 125, 136], "IN": [6, 22, 37, 43, 76, 82], "If": [1, 4, 5, 6, 7, 9, 18, 19, 21, 22, 23, 26, 29, 32, 35, 37, 40, 44, 47, 48, 49, 53, 55, 57, 62, 71, 82, 83, 84, 86, 107, 111, 114, 118, 125, 130, 131, 136], "In": [6, 7, 32, 59, 63, 70, 82, 83, 86, 115, 136], "It": [6, 7, 10, 14, 19, 22, 27, 29, 31, 34, 37, 47, 48, 55, 72, 73, 81, 84, 86, 111, 122], "NO": [25, 30, 43, 47, 51], "NOT": [32, 43], "No": [22, 32, 35, 88, 89, 90, 94, 96, 98, 99, 100, 103, 107], "Not": [1, 6, 48, 50, 55, 65, 81, 84, 114, 115, 124], "OF": [43, 120], "ON": [15, 22, 36, 37, 50, 60, 71, 86, 111, 112, 113, 114, 115, 132], "OR": [43, 86], "On": [22, 111], "One": [22, 57, 114], "Or": [57, 108, 122], "THE": [43, 135], "TO": [43, 120], "That": 6, "The": [1, 5, 6, 7, 8, 9, 13, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 43, 44, 47, 48, 49, 50, 51, 53, 55, 56, 57, 60, 61, 64, 66, 67, 68, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 87, 104, 107, 108, 110, 111, 113, 114, 115, 117, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136], "Then": [7, 83, 84, 86, 107, 114, 128, 129], "There": [32, 57, 62, 78, 83, 108, 125], "These": [16, 48, 122, 135, 136], "To": [6, 7, 31, 32, 37, 43, 44, 72, 84, 86, 107, 111, 115, 122, 125, 135], "WITH": 43, "Will": 29, "With": [8, 82, 114, 118], "_": [93, 102], "__": 80, "__call__": 125, "__channels_proxi": 48, "__func": 49, "__getattr__": 32, "__init__": [0, 2, 6, 7, 9, 10, 11, 15, 18, 21, 22, 29, 31, 32, 33, 34, 35, 36, 37, 42, 44, 47, 48, 49, 50, 55, 57, 115], "_active_gr": 19, "_bdaqctrl": 1, "_buffer": 49, "_channel_context": 32, "_check_error": 29, "_cmd_to_json_map": 15, "_dc_context": 32, "_delegate_group_factori": 25, "_error_messag": 29, "_from_raw_value_to_valu": 125, "_init": 29, "_invalidate_api": 48, "_librari": 29, "_measur": 125, "_memory_manag": 22, "_memoryslot": 22, "_message_flush_timeout_m": 32, "_mode": 50, "_modul": [29, 80], "_nestedsequ": 49, "_o": 49, "_parse_gr": 19, "_re": 41, "_rohdeschwarzhmc804x": 37, "_rohdeschwarzhmp": 37, "_scalart": [41, 47], "_session": 29, "_set_active_gr": 19, "_set_pow": 15, "_set_statu": 15, "_simplecdata": 20, "_speiniparam": 20, "_spesetup": 20, "_step": 47, "_summary_": 16, "_supportsarrai": 49, "_thorlabs_cc": 52, "_thorlabs_l": 52, "_timetaggermeasurementt": 48, "_timetaggervirtualchannelt": 48, "_watchdog": 51, "_waveform_context": 32, "_waveformreferenceintern": 22, "_win32": 1, "_write_respons": 32, "a02": 74, "a_b_differenti": 118, "a_c": 82, "a_dsp": 20, "a_fun": 20, "a_input_onli": 118, "a_par": 20, "ab": 47, "abc": [7, 19], "abi": 84, "abi_g": 79, "abl": [7, 86], "abort": [0, 6, 7, 29, 32, 50, 88, 94, 95, 100, 101, 102, 103], "about": [6, 7, 13, 15, 20, 32, 57, 83, 86, 136], "abov": [1, 4, 6, 31, 43, 78, 83, 84, 86, 122], "absolut": [6, 7, 30, 53, 83], "absolute_posit": 53, "abstract": [19, 48, 49, 108], "ac": [0, 6, 22, 24, 36, 44, 56], "acceler": [19, 53, 72], "accept": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "access": [1, 7, 27, 32, 47, 48, 71, 122, 131], "access_mod": 22, "accessd": 125, "accn": 53, "accompani": 13, "accomplish": 84, "accord": [30, 48, 115, 134], "accordingli": 62, "accumul": [22, 83, 135], "accumulation_cycle_tim": 61, "accur": 130, "acdc_coupl": 44, "achiev": 31, "acin": 6, "acquir": [22, 24, 29, 43, 44, 80, 120], "acquire_buff": 39, "acquire_cnts_t": [0, 43], "acquisit": [5, 6, 29, 37, 43, 44, 47, 50, 86, 115, 135], "acquisition_duration_hour": 39, "acquisition_duration_minut": 39, "acquisition_duration_second": 39, "acquisition_mod": [39, 61], "acquisition_period_": 39, "across": 32, "action": [7, 43], "activ": [6, 7, 14, 19, 22, 31, 34, 37, 43, 44, 53, 57, 59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 114, 117, 135], "active_channel": [0, 44], "active_contact": [0, 33, 34], "active_gr": [0, 19], "active_high": 22, "active_low": 22, "active_termin": 125, "actual": [5, 6, 18, 29, 32, 35, 37, 43, 47, 48, 50, 60, 72, 83, 123, 126], "actual_values_v": [0, 32, 104], "actual_voltag": [0, 32], "actuat": [0, 6, 7, 83], "actuator_nam": [0, 6], "ad": [6, 22, 32, 48, 57, 71, 122, 136], "adapt": [7, 35], "adc": 35, "adc3_cmd": [0, 33, 34], "adc_cmd": [0, 33, 34], "add": [6, 21, 22, 34, 35, 37, 47, 48, 49, 50, 75, 76, 84, 104, 122, 135], "add_combiner_virtual_channel": 122, "add_compon": [75, 76, 79, 84, 111, 119, 133], "add_correct": [0, 32], "add_correlation_measur": 122, "add_count_rate_measur": 122, "add_labelprop": [0, 43], "add_paramet": 48, "add_result": [65, 79, 86, 119, 133], "addit": [6, 22, 31, 32, 47, 57, 86, 97, 120, 136], "addition": 44, "additional_rt_signal_1": 39, "additional_rt_signal_2": 39, "addr": 19, "addrax": 72, "address": [0, 2, 6, 7, 8, 9, 11, 13, 15, 17, 18, 19, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 47, 50, 52, 62, 63, 65, 66, 67, 71, 73, 77, 78, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 114, 118, 119, 120, 123, 130, 132, 135], "address_mod": 22, "adjust": [6, 7, 16, 35, 37, 82, 86, 123], "adjust_parameter_valid": [0, 35], "admin": 63, "advanc": 71, "advanced_trig_en": 47, "advantech": 0, "advantech_pcie_1751": [0, 1], "advic": 31, "affect": [7, 35, 83], "afg": 135, "afg3000": [0, 135, 136], "afg3252": [0, 50, 123], "after": [4, 6, 7, 9, 15, 22, 24, 29, 30, 31, 32, 34, 43, 44, 49, 61, 62, 71, 82, 83, 84, 86, 111, 114, 115, 118, 126, 132], "afterward": [6, 116], "ag": [30, 135, 136], "ag_uc8": [0, 83], "again": [22, 71, 75, 76, 77, 86], "against": 86, "aggreg": 122, "agil": [0, 21, 135, 136], "agilent_n9000a": [0, 59], "agili": 30, "ai": 1, "ai_channel": [29, 80], "ai_task": 80, "aim": 3, "aimtti": [0, 135, 136], "ain_coupl": 76, "ain_coupling_dc": 76, "ain_imped": 76, "ain_impedance_hz": 76, "alarm": 9, "alarm_st": [0, 51], "alia": [21, 29, 32, 50, 55, 81], "alias": [29, 135], "align": 35, "all": [1, 6, 7, 9, 11, 14, 15, 21, 22, 24, 26, 27, 29, 31, 32, 34, 35, 37, 41, 43, 47, 48, 49, 50, 53, 54, 55, 62, 65, 71, 74, 75, 76, 78, 79, 81, 86, 96, 107, 108, 111, 114, 122, 127, 132, 135, 136], "all_sweeps_to_same_fil": 39, "all_waveform": [0, 32], "alloc": [0, 21, 22, 32, 57], "allocate_trac": [0, 32, 88], "allocate_trigg": [0, 32, 102], "allocated_slot": 22, "allocatedslot": [0, 21, 22], "allocation_ref": [0, 21, 22], "allocation_st": [0, 21, 22], "allow": [6, 7, 11, 22, 31, 35, 37, 47, 48, 49, 50, 72, 86, 115, 125], "almost": 37, "along": [31, 67], "alpha": 35, "alphabet": 8, "alreadi": [7, 22, 23, 29, 32, 47, 48, 68, 86], "also": [1, 4, 5, 6, 8, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 44, 47, 48, 50, 51, 52, 55, 56, 69, 70, 71, 72, 81, 83, 86, 108, 115, 118, 122, 125, 127, 130], "altern": [5, 6, 29, 37, 43, 47, 50, 84, 86, 125], "although": [7, 11, 81], "altrangev": 39, "alwai": [6, 29, 31, 32, 37, 43, 48, 71, 84, 86, 115, 135], "am": [15, 37, 82], "am1": 37, "am2": 37, "am_depth1": 123, "am_depth2": 123, "am_internal_efile1": 123, "am_internal_efile2": 123, "am_internal_freq1": 123, "am_internal_freq2": 123, "am_internal_function1": 123, "am_internal_function2": 123, "am_internal_source1": 123, "am_internal_source2": 123, "am_state1": 123, "am_state2": 123, "ama": 37, "amb": 37, "amc100": 0, "amc100axi": [0, 6], "ametek": [0, 118], "ametex": 4, "amod": 37, "among": 22, "amongst": 125, "amount": 119, "amp": [67, 112, 113, 114, 120, 130], "amper": [13, 32], "amplif": 6, "amplifi": [4, 27, 35, 37, 47, 57, 130, 134], "amplifier_modul": 27, "amplifiermodul": [0, 27], "amplitud": [0, 6, 7, 15, 22, 24, 30, 37, 62, 68, 83, 134, 135], "amplitude_": 39, "amplitude_channel_1": [75, 76], "amplitude_mod_sensit": 82, "amplitudemodul": [0, 37], "an": [1, 4, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 47, 48, 49, 51, 52, 53, 55, 56, 57, 61, 65, 69, 71, 72, 75, 76, 80, 81, 82, 83, 84, 86, 97, 102, 114, 115, 116, 118, 120, 122, 124, 125, 126, 127, 132, 134, 135, 136], "anal": 37, "analog": [29, 37, 80, 135], "analog_mod_typ": 82, "analys": 132, "analyz": [2, 11, 53, 70, 135, 136], "anc": 62, "anc150": 6, "anc300": [0, 135, 136], "anc300axi": [0, 6], "anc300b": 6, "anc300sim": 0, "anc300triggerout": [0, 6], "anc350": [0, 7], "anc350_librari": 7, "anc350axi": [0, 6], "anc350lib": [0, 6], "anc350libactuatortyp": [0, 6, 7], "anc350libamplitudecontrolmod": [0, 6, 7], "anc350libdevicetyp": [0, 6, 7], "anc350liberror": [0, 6, 7], "anc350libexternaltriggermod": [0, 6, 7], "anc350libsignaledg": [0, 6, 7], "anc350libtriggerinputmod": [0, 6, 7], "anc350libtriggeroutputmod": [0, 6, 7], "anc350libtriggerpolar": [0, 6, 7], "anc350r": 7, "anc350v": 7, "anc350v2lib": 7, "anc350v3": 7, "anc350v3lib": [0, 6, 7], "anc350v3liberror": [0, 6, 7], "anc350v4": 7, "anc350v4lib": [0, 6, 7], "anc_discov": 7, "andor": [0, 135, 136], "andor_du401": [0, 5, 61], "angl": 24, "angle_deg": 21, "angle_rad": 21, "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 69, 71, 72, 74, 75, 76, 84, 86, 108, 111, 112, 113, 132], "anm150": [6, 135], "anm150a": 6, "anm200": 6, "anm300": 6, "anoth": [7, 29, 32, 36, 37, 44, 116], "answer": [6, 32, 35, 37], "anti": 22, "anymor": 122, "anyth": 123, "anywai": 81, "ao": 29, "ao_channel": 80, "aoff": 37, "aou_awg": [75, 76], "aou_filter_fifteen_tap": 22, "aou_filter_flat": 22, "aou_filter_off": 22, "apar": 20, "apart": 47, "aperture_": 32, "api": [0, 6, 29, 37, 42, 48, 49, 55, 57, 80, 84, 117, 122, 136], "api_obj": 49, "api_tagg": [0, 48, 49, 122], "app": 7, "appdata": 125, "appear": [22, 32, 53, 83, 111], "append": [0, 32, 41, 59, 61, 65, 71, 72, 74, 75, 76, 79, 84, 85, 94, 98, 111, 117], "appli": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 34, 35, 37, 40, 42, 44, 47, 48, 51, 52, 55, 56, 60, 71, 78, 122], "applic": 7, "application_cmd": [0, 33, 34], "approach": [6, 7, 84], "appropri": [6, 29, 82], "approxim": [47, 86], "apt": [0, 52, 126, 128, 129], "apt_clean_up": [0, 52, 53, 126, 128, 129], "apt_init": [0, 52, 53], "ar": [1, 5, 6, 7, 8, 11, 13, 14, 15, 16, 17, 19, 21, 22, 25, 26, 29, 30, 31, 32, 34, 35, 37, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 62, 68, 70, 71, 72, 78, 81, 83, 84, 86, 107, 108, 111, 114, 115, 118, 120, 122, 123, 125, 131, 132, 135, 136], "arang": [92, 93, 96, 123], "arb": 37, "arbitrari": [22, 32, 50, 57, 75, 76, 106, 110, 135, 136], "arbitrary_wav": [0, 32, 88], "architectur": 117, "arg": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 125], "arg_count": 125, "argtyp": [0, 29], "argument": [6, 13, 22, 29, 32, 43, 48, 49, 50, 71, 122, 127], "aris": 43, "arm": [0, 14, 44, 50], "arm_count": 74, "arm_sourc": 74, "around": [6, 7, 11, 29, 32, 126], "arrai": [22, 23, 29, 32, 35, 44, 47, 48, 49, 50, 57, 65, 70, 96, 108, 115, 119, 122, 124], "arrang": [0, 32, 91, 92, 93, 97, 98, 102, 104, 107, 109, 110, 135], "arrangement_context": [0, 32], "array_arrangement_context": [0, 32], "array_lik": 49, "arraylikevalid": [0, 48, 49], "arrayparamet": [11, 29, 37], "arw": 7, "asap": 84, "asc": 65, "ascii": 70, "ascii_tim": 70, "ask": [0, 4, 6, 13, 15, 25, 30, 31, 32, 35, 37, 47, 51, 84, 111, 114, 125], "ask_channel": [0, 30, 32], "ask_modul": [0, 47], "ask_raw": [0, 4, 6, 15, 25, 51, 118], "askv": [0, 54], "asrl": [15, 17, 35, 107, 108, 135], "asrl16": 69, "asrl2": 86, "asrl3": [30, 60, 68, 83], "asrl4": [31, 73, 113, 132], "asrl7": 62, "assert": [47, 48], "assign": [9, 22, 32, 37, 55, 81, 86, 102], "assing": 86, "associ": [29, 43, 49, 55], "assum": [27, 32, 123], "asynchron": [0, 21, 22, 53, 84, 135], "asynchronosli": 62, "atmcd64": 5, "atmcd64d": [0, 5], "attach": [6, 9, 18, 21, 22, 32, 34, 47], "attempt": 24, "atten_valu": [0, 42], "attent": [6, 65], "attenu": [0, 16, 21, 37, 55, 70, 86, 135, 136], "attocub": [0, 135, 136], "attocubeamc100": [0, 6], "attr": 29, "attribut": [6, 18, 26, 29, 32, 37, 49, 55, 57, 86, 115], "attributeid": 29, "attributewrapp": [0, 29], "author": [6, 7, 14, 15, 28, 37, 43, 47, 52, 53], "auto": [0, 7, 22, 37, 41, 43, 47, 48, 59, 61, 65, 71, 72, 79, 84, 85, 91, 98, 111, 117, 123], "auto_cali_bias_curr": [0, 43], "auto_cali_finish": [0, 43], "auto_dis": 7, "auto_gain": 115, "auto_pwr_dis": [0, 42], "auto_sav": 108, "auto_trigg": [75, 76], "automat": [1, 5, 6, 7, 29, 30, 32, 37, 41, 43, 47, 48, 50, 55, 115, 117, 122, 133], "autosav": [39, 109, 110, 120, 135], "autoscal": 133, "autotrig": [75, 76], "autozero": 74, "aux": [47, 115], "aux1": [47, 115], "aux2": [47, 115], "aux_in1": 115, "aux_in2": 115, "aux_out1": 115, "aux_out2": 115, "auxiliari": 134, "auxout": [57, 134], "auxouts1": 134, "avail": [1, 6, 7, 15, 21, 22, 29, 32, 35, 37, 48, 50, 53, 54, 55, 62, 65, 71, 81, 82, 98, 114, 115, 124], "available_a": [0, 32, 98], "averag": [11, 29, 31, 32, 37, 39, 44, 48, 50, 65, 80, 133], "averages_en": 65, "averages_trigger_en": 65, "avg": 133, "aviosi": [0, 135, 136], "aviosys_ip_power_9258": [0, 8, 63], "aviosysippower9258": [0, 8], "avlu": 47, "avoid": [6, 31, 86, 115], "awg": [21, 22, 32, 50, 57, 82, 88, 96, 135, 136], "awg1": [21, 22, 75, 76], "awg2": [22, 75, 76, 88], "awg3": 22, "awg520": [0, 136], "awg_config_external_trigg": [0, 21, 22, 75, 76], "awg_context": [0, 32], "awg_flush": [0, 21, 22], "awg_from_arrai": [0, 21, 22], "awg_from_fil": [0, 21, 22], "awg_is_run": [0, 21, 22], "awg_jump_next_waveform": [0, 21, 22], "awg_mask": 22, "awg_nam": [0, 21, 22], "awg_numb": [22, 57], "awg_paus": [0, 21, 22], "awg_pause_multipl": [0, 21, 22], "awg_queue_config": [0, 21, 22, 75, 76], "awg_queue_waveform": [0, 21, 22, 75, 76], "awg_resum": [0, 21, 22], "awg_resume_multipl": [0, 21, 22], "awg_start": [0, 21, 22], "awg_start_multipl": [0, 21, 22, 75, 76], "awg_stop": [0, 21, 22], "awg_stop_multipl": [0, 21, 22], "awg_trigg": [0, 21, 22], "awg_trigger_multipl": [0, 21, 22], "ax": [6, 7, 30, 65, 70, 79, 83, 84, 92, 93, 98, 111, 115, 119, 133], "axessubplot": [70, 118], "axi": [5, 6, 7, 30, 37, 83, 115, 123, 135], "axis1": [62, 83], "axis2": 83, "axis7": 62, "axis_1": [0, 6], "axis_2": [0, 6], "axis_3": [0, 6], "axis_no": 7, "b": [7, 8, 13, 27, 34, 37, 43, 47, 63, 67, 74, 77, 118, 120], "b10": 37, "b120": [37, 114], "b13t": [37, 114], "b22": [37, 114], "b9": 37, "b9600": 47, "b_go": 67, "b_input_onli": 118, "ba": 37, "bacaus": 86, "back": [6, 7, 31, 32, 67, 83, 84, 86, 98, 104, 105, 111], "backend": [6, 18, 37, 48], "background": [22, 69], "backlash": [19, 72], "backward": [6, 7, 32, 35, 37], "backwardsweep": 39, "band": [16, 37], "band_pass_filt": 65, "bandwidth": [0, 37, 70, 133], "bandwith": 70, "bar": 31, "barrier": [14, 28, 37, 47, 52, 53], "base": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 82, 118, 135], "baseband": 37, "basechannel": 57, "basenam": 39, "bash": 31, "basi": 136, "basic": [27, 29, 35, 37, 87, 110, 135], "baud": [17, 19, 47], "baud_rat": [17, 19], "baudrat": 72, "bbd10x": [0, 52, 53], "bc": 79, "bcs10": [0, 23], "bdaqctrl": 1, "bdc101": [0, 52, 53], "be2142b": 73, "becaus": [1, 6, 15, 22, 84, 107, 122], "becom": [6, 7, 31], "been": [4, 5, 6, 7, 13, 15, 22, 32, 40, 42, 44, 53, 59, 61, 65, 66, 67, 68, 71, 72, 79, 84, 85, 86, 98, 111, 117, 118, 136], "beep": 108, "befor": [1, 6, 7, 11, 15, 22, 31, 32, 44, 47, 49, 50, 71, 72, 83, 86, 111, 115, 122, 126, 135], "begin": [22, 32, 36, 48], "begin_tim": 32, "behav": [6, 122], "behavior": [22, 86], "behaviour": [5, 22, 40, 53, 84], "being": [5, 13, 22, 71], "belong": [6, 22, 29, 32], "below": [6, 9, 13, 19, 31, 37, 81, 82, 84, 86, 111, 115, 123, 132, 135, 136], "ben": 78, "besid": 6, "best": 136, "beta": [14, 21, 22, 28, 37, 47, 50, 52], "between": [6, 7, 9, 13, 16, 22, 29, 31, 32, 34, 37, 47, 48, 50, 57, 83, 84, 87, 92, 93, 97, 104, 110, 135], "between_commands_time_": 120, "bf": 64, "bf_fridg": 64, "bi": 35, "bia": [37, 43, 119], "bias_curr": 119, "bias_voltag": 79, "bias_voltage_en": 79, "bilt": [0, 135, 136], "bin": [29, 48, 61], "binari": [1, 19, 22, 31, 32, 72], "bind_to_instru": [25, 48], "binwidth": [0, 48, 122], "biodaq": 1, "bip": 35, "bit": [1, 7, 16, 19, 20, 22, 35, 41, 47, 53, 55, 131], "bitlevel0": 44, "bitlevel1": 44, "bitmap": 41, "bitmask": 22, "blaze": 116, "blink": 108, "blob": [15, 29], "block": [6, 9, 22, 23, 35, 44, 53, 68, 78, 107, 126], "blockavg_hardware_trigger_acquisit": [0, 44], "blue": 57, "blue_lagoon": 64, "bluefor": [0, 3, 135, 136], "bmp": 41, "bmpdata": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "bnc": [6, 86, 108], "board": [72, 86], "bodi": 45, "boff": 37, "bool": [5, 6, 7, 9, 19, 22, 23, 25, 26, 29, 31, 32, 35, 40, 44, 47, 48, 49, 50, 51, 53, 55, 57, 84], "bool_to_str": [0, 50], "boolean": [22, 34, 50], "bootload": 82, "both": [7, 13, 22, 27, 29, 31, 37, 44, 50, 57, 77, 97, 127], "bottom": [4, 35], "bound": [11, 50], "boundari": [7, 14, 32, 41, 52, 53], "box": 34, "boxcar": 44, "boxcar_averag": 44, "brace": 37, "break": [47, 76, 108], "breakout": [0, 32, 107, 108], "broadli": 14, "brush": 52, "bsc001": [0, 52, 53], "bsc002": [0, 52, 53], "bsc101": [0, 52, 53], "bu": [32, 65, 91, 111], "bu2": [5, 135, 136], "buffer": [1, 4, 15, 44, 47, 48, 79, 118, 130, 135, 136], "buffer_acq_mod": 115, "buffer_amplifiers_en": 130, "buffer_npt": 115, "buffer_paus": 115, "buffer_point": [0, 42], "buffer_reset": 115, "buffer_sr": 115, "buffer_start": 115, "buffer_trig_mod": 115, "build": [5, 130], "built": [37, 83], "burst": 123, "burst_count": 47, "burst_delai": 47, "burst_mod": 47, "burst_mode1": 123, "burst_mode2": 123, "burst_ncycles1": 123, "burst_ncycles2": 123, "burst_period": 47, "burst_state1": 123, "burst_state2": 123, "burst_t0_config": 47, "burst_tdelay1": 123, "burst_tdelay2": 123, "busi": 1, "button": [36, 47], "bw10": 37, "bwd_delai": 39, "bwd_sweep": 39, "bwdsweep": 39, "bwl": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "bychang": 6, "byte": [29, 35, 41, 47, 49, 50, 70], "byte_to_bit": [0, 47], "bytes_tim": 70, "c": [1, 6, 7, 8, 9, 14, 29, 31, 41, 42, 43, 47, 59, 61, 63, 65, 68, 70, 71, 72, 75, 76, 84, 85, 111, 115, 117, 118, 120, 125, 130, 131], "c010219": 123, "c28": 74, "c_int": 20, "c_long": 29, "c_str": [0, 29], "c_ulong": 29, "c_void_p": 7, "cabl": [32, 111], "cach": [48, 49, 86, 122], "cached_api_object": [0, 48, 49], "calc": 44, "calcul": [32, 37, 70], "calculate_error": [0, 33, 34], "calculate_ocp_cod": [0, 33, 34], "calculate_output_cod": [0, 33, 34], "calculate_polarization_current_ma": [0, 33, 34], "calculated_resist": [0, 23, 24], "calculated_resistance_sourc": 79, "calculated_signal_nam": 39, "calculationmod": 37, "calibr": [0, 13, 25, 32, 37, 43, 47, 120, 130, 133, 135], "calibration_fil": 37, "calibration_mod": 39, "calibration_per_volt": 39, "call": [1, 4, 5, 6, 7, 13, 18, 22, 25, 29, 30, 31, 32, 35, 37, 43, 47, 48, 50, 51, 53, 72, 86, 122, 125], "callabl": [22, 29, 43, 49, 55], "caller": [6, 37], "camera_handl": 5, "camera_id": 5, "camera_index": 5, "can": [1, 6, 7, 8, 10, 11, 15, 19, 21, 22, 26, 29, 31, 32, 34, 35, 37, 44, 47, 49, 53, 57, 60, 65, 67, 69, 70, 71, 73, 74, 75, 76, 78, 80, 81, 82, 83, 84, 86, 107, 108, 111, 112, 113, 114, 115, 122, 125, 126, 128, 129, 131, 132, 135, 136], "cannot": [1, 6, 22, 29, 50, 81, 107, 114, 130], "cap": [6, 92, 93], "capabl": [48, 49], "capacit": [0, 6, 7], "captur": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 135], "capture_dur": 122, "captured_run_id": 133, "card": [1, 9, 21, 22, 44, 50, 135], "cardid": 44, "care": [6, 15, 48], "careful": 35, "carri": 32, "carrier": [56, 82], "cartesian": 84, "case": [7, 22, 31, 43, 57, 67, 70, 83, 111, 112, 113, 125, 132, 135, 136], "caus": [29, 44, 47, 86], "caviti": 14, "cbax": [65, 119], "cc": [0, 52], "ccd": [5, 40, 116], "ccd_number_pixel": 40, "ccd_pixel_width": 40, "cd": 47, "cea": 4, "cell": [70, 82, 111], "celsiu": 117, "cent": 37, "center": [37, 48, 65, 79, 84, 111, 115, 118, 133, 135], "center_freq": [70, 133], "center_freq1": 123, "center_freq2": 123, "central": 116, "cernox": 31, "certain": [6, 23, 26, 32, 49, 53, 68, 86, 135], "cesr": 47, "cffi": 1, "cfm": [52, 127], "ch": [22, 32, 75, 76, 81, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 131], "ch01": 86, "ch02": [86, 88, 89], "ch03": [86, 88, 89, 90, 94, 95, 99, 100, 101, 103], "ch04": 73, "ch1": [18, 29, 47, 50, 71, 81, 111, 112, 113, 115, 123, 125, 131], "ch1_datatrac": 115, "ch1_displai": 115, "ch2": [18, 47, 50, 71, 81, 111, 112, 113, 115, 131], "ch2_datatrac": 115, "ch2_displai": 115, "ch3": 81, "ch4": 81, "ch5": 81, "ch6": [29, 81], "chain": [106, 110, 135], "chamber": [10, 31], "chan": [9, 21, 32], "chan1": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "chan2": [88, 89, 97, 102, 104], "chan3": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 103, 104], "chan4": [88, 94, 97, 99, 103, 104], "chan_num": [9, 73], "chan_to_": [0, 9], "chan_to_id": [0, 9], "chanel": 29, "chang": [6, 16, 18, 23, 29, 31, 32, 35, 37, 47, 48, 62, 67, 70, 71, 74, 76, 78, 80, 83, 87, 110, 111, 114, 118, 135, 136], "change_autozero": 50, "change_displai": 50, "change_fold": [0, 50], "channel": [0, 1, 6, 8, 9, 10, 11, 15, 18, 21, 22, 23, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 43, 44, 47, 48, 49, 50, 53, 55, 57, 58, 64, 71, 72, 73, 75, 76, 77, 79, 80, 83, 84, 87, 90, 91, 92, 93, 96, 97, 98, 102, 104, 105, 106, 110, 112, 113, 115, 123, 125, 134, 135, 136], "channel1": 119, "channel2": [44, 119], "channel3": 119, "channel4": 119, "channel_0": 44, "channel_1": [44, 48], "channel_2": 48, "channel_4k_pl": [10, 64], "channel_50k_pl": [10, 64], "channel_compressor_inlet": [10, 64], "channel_compressor_outlet": [10, 64], "channel_delai": 47, "channel_id": [0, 8], "channel_index": [23, 39, 44, 120], "channel_list": 32, "channel_list_to_st": [0, 32], "channel_magnet": [10, 64], "channel_map": [0, 47], "channel_mask": 22, "channel_mixing_chamb": [10, 64], "channel_mixture_tank": [10, 64], "channel_nam": [0, 8, 55, 71, 120, 131], "channel_numb": [0, 22, 30, 32, 41, 55, 57, 131], "channel_output_level": 47, "channel_output_polar": 47, "channel_pumping_lin": [10, 64], "channel_stil": [10, 64], "channel_unus": 48, "channel_vacuum_can": [10, 64], "channel_venting_lin": [10, 64], "channelarrai": [0, 43], "channelg": 48, "channelindex": 39, "channelinputconfig": 76, "channelis": 32, "channellist": [29, 32, 48, 72, 122], "channelnam": 39, "channelprescalerconfig": 76, "channels_get": 120, "channelslist_get": 120, "channeltrac": [0, 47], "channum": 32, "char": 32, "charact": [2, 4, 11, 21, 50], "characterist": 37, "charg": 43, "chassi": [6, 21, 22, 75, 76], "check": [0, 1, 6, 7, 14, 29, 31, 43, 47, 49, 50, 53, 62, 71, 81, 84, 111, 127, 132, 135], "check_error": [0, 6, 7, 43, 76], "check_module_error": [0, 47], "check_tun": [0, 14], "check_voltag": [0, 33, 34], "checkout": 136, "chiller": 51, "chip": [13, 14], "chnum": 37, "choos": [15, 35, 50, 68, 118], "chop": [0, 33, 34], "circumv": 98, "cl": 49, "claim": 43, "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 86, 111, 114, 115, 122, 126], "classmethod": [7, 19, 49, 55], "clean": [53, 135], "clear": [0, 6, 7, 9, 15, 32, 37, 47, 48, 49, 50, 69, 76, 115, 122], "clear_alarm": [0, 9], "clear_measur": [0, 32, 98, 105], "clear_read_buff": [0, 15], "clear_read_queu": [0, 32], "clear_waveform": [0, 50], "clear_zero_offset": [0, 17, 69], "cli": 19, "click": [48, 122], "click_channel": [0, 48], "click_gat": [0, 48], "client": 19, "client64": 20, "clip": [57, 86], "clk": 22, "clk10": 22, "clkref": 22, "clksy": 22, "clksync": 22, "clo": 107, "clock": [7, 22, 29, 32, 50, 82, 102, 130], "clock_config": 22, "clock_frequ": 117, "clock_refer": 117, "clock_sourc": 82, "clock_src": 29, "clone": 136, "close": [0, 1, 5, 6, 7, 19, 21, 22, 23, 29, 31, 32, 33, 34, 37, 40, 43, 44, 48, 55, 56, 62, 72, 74, 75, 76, 81, 84, 86, 107, 108, 114, 119, 122, 123, 126, 127, 135], "close_al": [68, 74, 111, 127, 131, 132], "close_all_registered_instru": [75, 76], "close_relai": [0, 32, 108], "close_soft": [0, 21, 22], "close_switch": [0, 31], "closed_relai": 108, "closing_tim": 5, "cm": [66, 79], "cm10": [0, 23], "cmap": 98, "cmd": [4, 6, 11, 15, 25, 30, 31, 32, 34, 37, 47, 51, 54], "cmd1": 34, "cmd2": 34, "cmd_log": 34, "cmdbuffreespac": [0, 46], "cmddef": [0, 6, 37], "cmdl": 9, "cmf_enabl": 79, "cmf_node": 79, "cmt": 65, "cmtintpars": [0, 11], "cmts5048": [11, 136], "cmts5048trace": [0, 11], "cnt": 76, "cnts_buffer": 43, "co": 82, "coars": [0, 6, 7], "code": [0, 5, 6, 7, 13, 19, 22, 30, 37, 40, 44, 46, 53, 111, 125, 127, 132], "coefficientofangl": 72, "coefficientoflinear": 72, "coeffum": 72, "coher": 47, "coil": [13, 23, 78, 135], "coil_const": [13, 23, 78], "coil_constant_unit": 78, "coincid": [48, 122], "coincidence_virtual_channel": 122, "coincidence_window": [0, 48], "coincidencetimestamp": 48, "coincidencevirtualchannel": [0, 48, 122], "cold": 31, "cold_plate_temperatur": 84, "collect": [7, 22, 32, 44, 49, 79], "colloqui": 18, "colon": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "color": [92, 93], "colorbar": [70, 84, 92, 93, 98, 115], "colormesh": 70, "column": 84, "com": [13, 14, 15, 16, 28, 29, 37, 44, 47, 52, 53, 65, 68, 81, 107, 117, 127, 135], "com3": [30, 83], "com_port": 34, "combin": [6, 32, 37, 48, 57, 74, 86], "combine1": 123, "combine2": 123, "combiner_virtual_channel": 122, "combinervirtualchannel": [0, 48, 122], "combo": 22, "come": [6, 55, 131], "comm": 107, "comma": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 32, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "comma_sequence_to_list": [0, 32], "comma_sequence_to_list_of_float": [0, 32], "command": [1, 4, 6, 7, 13, 15, 20, 21, 25, 30, 31, 32, 35, 37, 43, 44, 47, 50, 51, 53, 54, 62, 67, 68, 83, 86, 107, 108, 111, 118, 125, 126, 132], "command_delai": [0, 30], "command_histori": [59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117], "command_mov": [0, 46], "commandinterfac": 6, "comment": [1, 6, 37, 39], "commmand": 4, "common": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 35, 37, 40, 42, 44, 47, 48, 49, 50, 51, 52, 55, 56, 81], "common_trigger_in": [0, 32, 102], "commonli": [21, 37, 50, 54], "commun": [6, 9, 15, 16, 19, 21, 25, 30, 35, 37, 43, 47, 50, 51, 55, 83, 84, 135, 136], "communication_handl": [0, 33, 34], "communicationhandl": [0, 43], "compare_cmd": [0, 33, 34], "compat": [7, 26, 32, 35, 37, 49, 71, 82], "compatibil": [6, 50], "compens": 44, "compil": [41, 57], "compilererror": [0, 57], "complain": 86, "complet": [1, 6, 7, 22, 24, 37, 44, 50, 72, 83, 111, 114, 132], "completetimestatist": [0, 50], "complex": [49, 133], "complex_voltag": 115, "complexsweep": [0, 37], "compliant": [13, 54], "compon": [7, 22, 24, 31, 37, 134], "comport": 72, "compos": 22, "compress_channel_list": [0, 32], "compressor": 10, "compris": 134, "comput": [42, 47, 57, 70, 107, 117, 132], "comun": 37, "con": 12, "concaten": [32, 75, 76, 115], "concern": [37, 44, 48], "conclud": 71, "concret": 29, "concurr": [21, 22], "conda": 68, "condit": [1, 39, 43, 50, 86], "condition2": 39, "conduct": 71, "conenct": 76, "config": [25, 65, 72, 84, 118], "config_amplitude_modul": [0, 21, 22], "config_angle_modul": [0, 21, 22], "config_clock_io": [0, 21, 22], "config_fil": [19, 72], "config_fpga_trigg": [0, 21, 22], "config_trigger_io": [0, 21, 22], "configur": [1, 7, 15, 19, 22, 24, 27, 29, 32, 37, 44, 47, 49, 50, 68, 81, 114, 123, 135], "configure_a_quad_b_in": [0, 6, 7], "configure_a_quad_b_out": [0, 6, 7], "configure_duty_cycl": [0, 6, 7], "configure_ext_trigg": [0, 6, 7], "configure_nsl_trigg": [0, 6, 7], "configure_nsl_trigger_axi": [0, 6, 7], "configure_rng_trigg": [0, 6, 7], "configure_rng_trigger_ep": [0, 6, 7], "configure_rng_trigger_pol": [0, 6, 7], "confirm": [15, 68, 69], "conflict": 1, "connect": [0, 6, 7, 15, 16, 17, 18, 23, 27, 28, 29, 31, 32, 33, 34, 35, 37, 40, 42, 43, 47, 48, 52, 53, 57, 59, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 126, 128, 129, 131, 135, 136], "connect_external_trigg": [0, 32, 102], "connect_messag": [0, 32], "connect_to": [0, 29, 81], "connector": [15, 16, 22, 82], "conrol": 86, "consecut": [22, 32], "consequ": 31, "consid": [6, 7, 25], "consist": [35, 86, 136], "consol": [6, 44, 52], "constant": [6, 13, 29, 35, 47, 52, 57, 60, 78, 82, 86, 106, 110, 115, 135], "construct": 115, "constructor": [5, 6, 29, 35, 37, 43, 47, 50, 114, 130], "cont": [91, 96], "cont_meas_off": 133, "cont_meas_on": 133, "contact": [32, 34, 91, 92, 93, 97, 98, 102, 104], "contact_nam": [0, 32, 92, 93], "contact_to_voltag": 32, "contacts_to_voltag": 32, "contain": [1, 2, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 72, 124, 134, 136], "contant": 23, "context": [24, 25, 30, 32, 49, 51], "contin": [6, 7, 11, 50], "continu": [6, 7, 22, 32, 39, 47, 53, 67, 82, 84, 86, 111, 123], "contract": 43, "control": [0, 6, 7, 8, 12, 13, 21, 25, 26, 30, 31, 32, 34, 35, 48, 50, 52, 56, 57, 58, 65, 72, 87, 93, 102, 110, 118, 120, 122, 135, 136], "control_port": 43, "controller_address": 26, "conveni": [15, 29, 48, 108, 122], "convent": 136, "convers": [9, 31, 49, 50, 84, 125, 135], "conversion_tim": 31, "convert": [29, 31, 44, 47, 50, 78], "convert_prescaler_to_sample_r": [0, 21, 22], "convert_sample_rate_to_prescal": [0, 21, 22], "convert_to_voltag": [0, 44], "converter_path": 31, "convin": 115, "cooler": 61, "cooler_off": [0, 5], "cooler_on": [0, 5], "coord": 31, "coordin": [70, 84], "coordinate_system": 84, "copi": [22, 35, 43, 50], "copper": 11, "coppermountain": [0, 135, 136], "coppermountaintech": 65, "copyright": 43, "core": [42, 135, 136], "correct": [6, 13, 32, 35, 43, 78, 84, 104, 114, 118, 130], "correction_matrix": [0, 32], "correctli": [15, 48, 68, 84, 111, 132], "correl": [48, 122], "correlation_measur": 122, "correlationmeasur": [0, 48, 122], "correspond": [13, 19, 32, 35, 47, 48, 50, 55, 57, 83, 115, 122], "cosmic": 61, "cost": [22, 35], "could": [48, 70], "couldn": 7, "coun": [91, 96], "count": [0, 1, 11, 32, 43, 48, 61, 83, 119, 122], "count_rat": 122, "count_rate_measur": 122, "counter": [1, 30, 43, 48, 50, 76, 83, 119, 120, 124], "counter_axi": 124, "counter_measur": 122, "countermeasur": [0, 48, 122], "counterpart": 48, "countrat": [48, 122], "countratemeasur": [0, 48, 122], "counts_port": 43, "counts_tot": [0, 48], "coup": 37, "coupl": [0, 22, 37, 44, 79], "coupling_auto_en": 79, "coupling_mod": [0, 37], "covers": 44, "cr": 130, "cre": 37, "creat": [4, 6, 7, 15, 20, 22, 30, 31, 32, 35, 43, 55, 56, 57, 62, 65, 75, 76, 84, 112, 113, 115, 118, 120, 125, 126, 127], "create_json_structur": [0, 33, 34], "create_on_off_val_map": 51, "create_parameters_from_node_tre": [0, 57], "create_port_templ": [0, 33, 34], "create_sawtooth": [75, 76], "create_sin": [75, 76], "createdateandtimefold": 39, "createsp": [0, 19, 20], "crest": 37, "crest_factor": [0, 37], "critic": [79, 84], "crs_aux_pll_ld": [0, 42], "crs_pll_ld": [0, 42], "crs_ref_pll_ld": [0, 42], "crucial": 115, "cryo": [12, 34], "cryocon": 0, "cryocon_26": 0, "cryogen": 0, "cryogenicsms120c": 0, "cryomagnet": [66, 67], "cryostat": [0, 84], "cryoswitch": [0, 33, 34], "cryoswitchchannel": [0, 33, 34], "cryoswitchcontrol": [0, 33], "cryoswitchcontrollerdriv": [0, 33, 34], "cs580": 0, "cstopb": 47, "csv": [31, 57], "ct": 48, "ctime": 86, "ctl": 83, "ctrl": 120, "ctype": [20, 29], "cu": [15, 108], "cube": 52, "curposit": [0, 46], "curr": [74, 79, 125], "current": [0, 1, 6, 7, 10, 13, 14, 15, 19, 22, 24, 25, 27, 30, 31, 32, 34, 35, 36, 37, 43, 47, 48, 50, 53, 55, 57, 59, 60, 61, 62, 65, 68, 69, 71, 72, 74, 79, 80, 83, 84, 85, 87, 98, 105, 110, 111, 112, 113, 114, 117, 118, 119, 122, 125, 126, 127, 131, 135], "current_autorange_en": 79, "current_chang": 32, "current_dc": 125, "current_high_limit": 79, "current_in_ua": 43, "current_limit": 78, "current_low_limit": 79, "current_max": 14, "current_measur": 50, "current_mode_off": 118, "current_mode_on_high_bw": 118, "current_mode_on_low_bw": 118, "current_offset": 79, "current_out": 60, "current_peak_amplitud": 79, "current_profil": 34, "current_r": 13, "current_ramp_limit": 13, "current_ramp_r": 78, "current_rang": [32, 79], "current_rate_limit": 78, "current_rms_amplitud": 79, "current_set": 60, "currents_a": [0, 32], "curspe": [0, 46], "curt": [0, 46], "curv": 135, "custom": [11, 26, 29, 32, 49], "customis": 32, "cw": [11, 14, 37, 123], "cxa": 2, "cycl": [7, 22, 32, 37], "cycle_tim": 5, "cycles_remain": [0, 32], "cyclic": [22, 75, 76], "cylinder": 84, "cyromag": 67, "cyromagnet": [135, 136], "d": [8, 34, 47, 63, 84, 120], "d2xx": 13, "d4": 0, "d5": 35, "d5a": 0, "d5a_modul": 35, "d5mux": 35, "d_bdaq_c_interfac": 1, "dac": [34, 35, 73, 80, 96, 111], "dac_cmd": [0, 33, 34], "dac_delai": 35, "dac_quata": [0, 35], "dac_step": 35, "dacn": 35, "dacnam": 35, "dacx": 35, "dai": [0, 10, 42, 70], "damag": 43, "daq": [0, 22, 135, 136], "daq_0": 22, "daq_1": 22, "daq_ai": [29, 80], "daq_ao": [29, 80], "daq_do": 29, "daq_flush": [0, 21, 22], "daq_flush_multipl": [0, 21, 22], "daq_mask": 22, "daq_read": [0, 21, 22], "daq_start": [0, 21, 22], "daq_start_multipl": [0, 21, 22], "daq_stop": [0, 21, 22], "daq_stop_multipl": [0, 21, 22], "daq_trigg": [0, 21, 22], "daq_trigger_multipl": [0, 21, 22], "daqanaloginput": [0, 29, 135], "daqanaloginputvoltag": [0, 29], "daqanalogoutput": [0, 29, 135], "daqanalogoutputvoltag": [0, 29], "daqconfig": 76, "daqcounterread": 76, "daqdigitaloutput": [0, 29], "daqdigitaloutputst": [0, 29], "daqdigitaltriggerconfig": 76, "daqflush": 76, "daqnavi": 1, "daqnaviexcept": [0, 1], "daqnaviwarn": [0, 1], "daqread": 76, "daqstartmultipl": 76, "daqstop": 76, "dark": 43, "dark_count": 43, "data": [0, 1, 5, 6, 7, 11, 13, 19, 22, 23, 29, 32, 35, 37, 41, 43, 44, 47, 48, 50, 57, 70, 75, 80, 84, 86, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 111, 115, 120, 122, 123, 133, 135], "data_norm": [0, 48, 122], "data_raw": 22, "data_s": 22, "data_sourc": 23, "data_source_typ": [0, 23], "data_to_get": 39, "data_total_count": [0, 48], "data_transfer_format": 65, "databas": [65, 111, 118], "datalog_chsget": [0, 39], "datalog_chsset": [0, 39], "datalog_open": [0, 39], "datalog_propsget": [0, 39], "datalog_propsset": [0, 39], "datalog_start": [0, 39], "datalog_statusget": [0, 39], "datalog_stop": [0, 39], "datapoint": [50, 76], "datasav": [65, 79, 86, 119, 133], "dataset": [65, 66, 67, 70, 79, 84, 86, 105, 111, 115, 118, 119, 133], "datasheet": 37, "datasource_mnemon": 23, "datatyp": 29, "date": [15, 68, 133], "datetim": 133, "daylight": 14, "daylightsolut": 0, "db": [11, 21, 37, 70, 79, 84, 111, 115, 130, 131, 135, 136], "db0": 37, "db2": 37, "db3": 37, "db4": 37, "db6": 37, "db8": 37, "db_file_path": 111, "dbg": 114, "dbm": [2, 15, 35, 37, 56, 59, 65, 68, 70, 71, 82, 111, 115, 117, 133], "dbm2": 37, "dbm3": 37, "dbm4": 37, "dc": [0, 6, 7, 19, 21, 22, 24, 32, 36, 37, 44, 47, 50, 52, 60, 72, 73, 74, 80, 86, 90, 91, 96, 125, 135], "dc_constant_v": [90, 98, 105], "dc_list": [0, 32, 89, 94], "dc_list_2": 89, "dc_list_3": 89, "dc_sweep": [0, 32, 101], "dc_val_map": [19, 72], "dcc001": [0, 52, 53], "dcchannel": [0, 19], "dcin": 6, "ddl": 1, "de": [6, 7, 37], "deactiv": [7, 35, 37, 53, 57], "deal": [43, 57], "dealloc": 32, "debug": [15, 34, 75, 76, 84, 106, 109, 110, 135], "debug_func": [0, 33, 34], "debug_messages_en": [0, 15, 68], "dec": [31, 135], "decim": [7, 84], "declar": 1, "decode_buff": [0, 33, 34], "decode_simple_respons": [0, 33, 34], "decor": [22, 48, 49], "decoractor": 22, "decreas": 70, "decrement": 47, "decrement_sensit": [0, 47, 115], "decs_visa": 84, "dedic": [32, 108], "def": [75, 76, 84, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 115], "default": [2, 4, 5, 6, 7, 9, 11, 13, 14, 15, 16, 19, 22, 25, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 44, 47, 50, 52, 53, 56, 57, 61, 67, 78, 81, 86, 108, 117, 119], "default_current_ramp_limit": [0, 13], "default_max_current_ramp_limit": [0, 13], "default_path_to_dl": [0, 6, 7], "default_termin": [0, 56], "default_timeout": [0, 30], "defin": [4, 6, 7, 20, 22, 25, 29, 30, 32, 34, 35, 37, 47, 50, 51, 65, 71, 86, 123], "definit": [32, 86, 135, 136], "deg": [53, 71, 115, 118, 120, 126], "deg_to_rad": [0, 21], "degc": 120, "degre": [6, 7, 22, 47, 53, 71, 72, 118, 123, 134], "del": 37, "delai": [0, 9, 13, 22, 32, 35, 37, 47, 48, 75, 76, 83, 86, 111, 133], "delay1": 105, "delay_": [32, 105], "delay_in": 76, "delaym": 72, "delegateparamet": [25, 48, 49], "delegateparameterwithoutparentvalid": [0, 48, 49], "delet": [20, 22, 32], "delete_all_waveforms_from_list": [0, 50], "deletesp": [0, 19, 20], "demod": [57, 120, 134], "demod1": 134, "demodul": [57, 134], "demodulator_numb": 39, "demodulator_signal_index": 39, "demonstr": [75, 76, 86], "densiti": [2, 59, 116], "depend": [2, 6, 7, 22, 32, 37, 47, 50, 83, 84, 86, 123, 136], "dept": 37, "depth": [0, 15, 37], "deriv": [21, 22, 24], "describ": [30, 32, 70, 84, 93, 102], "descript": 52, "descriptor": [35, 49], "design": [24, 50, 84, 122], "desir": [2, 5, 6, 7, 16, 23, 29, 37, 40, 43, 47, 50, 52, 57, 111, 132, 135], "detail": [13, 29, 50, 54, 68], "detect": [7, 15, 48, 69, 125, 135], "detector": [43, 119], "determin": [7, 30, 37, 123], "detun": [97, 104], "dev": [15, 37, 47, 68, 81, 107, 108, 114], "dev0": 80, "dev1": 29, "dev200": 134, "dev204": 57, "dev_handl": 7, "dev_id": 130, "dev_nam": 29, "dev_no": 7, "dev_typ": 7, "develop": 136, "deviat": [0, 15, 31, 37, 114], "deviation_gain": 22, "deviation_ratio": [0, 37, 114], "devic": [1, 6, 7, 8, 9, 15, 16, 19, 21, 22, 23, 25, 29, 30, 31, 35, 37, 40, 47, 48, 49, 52, 53, 55, 57, 61, 62, 80, 81, 82, 83, 86, 108, 114, 127, 130, 131, 133, 134, 135, 136], "device_access": [0, 42], "device_clear": 132, "device_enumer": 46, "device_id": [0, 40, 46, 52, 57], "device_index": 46, "device_info": [0, 25], "device_interfac": [0, 42], "device_list": 127, "device_nam": 46, "device_standbi": [0, 42], "deviceinform": [0, 46], "deviceinfot": [0, 42], "devicerfparamst": [0, 42], "devicestatust": [0, 42], "devnam": [80, 134], "dg645": 0, "di": 1, "diabl": 6, "diagnost": [15, 86], "dialog": 53, "dict": [1, 4, 5, 6, 8, 14, 15, 17, 19, 21, 22, 25, 26, 28, 29, 30, 31, 32, 34, 35, 37, 40, 42, 44, 47, 48, 49, 50, 51, 52, 55, 56, 57, 81, 131, 134], "dictionari": [6, 16, 34, 44, 47, 57], "didn": 6, "diff": [37, 48, 50], "diff_matrix": [0, 32], "differ": [4, 6, 9, 15, 22, 26, 31, 32, 34, 35, 37, 49, 50, 64, 71, 82, 122, 125, 134, 135], "differenti": 37, "dig": 21, "dig_prescal": 76, "digit": [1, 16, 21, 22, 29, 37, 41, 44, 47, 50, 55, 74, 75, 80, 86, 135, 136], "digital_lin": 39, "digital_trigger_channel_index": 39, "digital_trigger_slop": 39, "diglines_outstatusset": [0, 39], "diglines_propsset": [0, 39], "diglines_puls": [0, 39], "diglines_ttlvalget": [0, 39], "dilut": 31, "dimension": 48, "dio": [1, 120], "diod": [16, 106, 110, 135], "diodes_left": 98, "diodes_right": 98, "dip": 86, "dir": [50, 91], "direct": [6, 7, 19, 22, 30, 32, 39, 52, 53, 83, 106, 110, 135], "directli": [15, 21, 83, 84, 115, 118, 125, 135], "directori": [5, 7, 19, 36, 50, 52, 55, 56, 57, 84], "disabl": [0, 6, 7, 15, 22, 23, 25, 34, 36, 44, 50, 53, 57, 78, 82, 86], "disable_3v3": [0, 33, 34], "disable_5v": [0, 33, 34], "disable_auto_mov": [0, 6], "disable_channel": [0, 57], "disable_chop": [0, 33, 34], "disable_convert": [0, 33, 34], "disable_hw_channel": [0, 52, 53], "disable_negative_suppli": [0, 33, 34], "disable_on_compli": 79, "disable_output": [0, 36], "disable_output_channel": [0, 33, 34], "disarm": [0, 14], "disc": 7, "discard": 15, "discharg": [0, 33, 34], "disconnect": [0, 6, 7, 19, 29, 31, 33, 34, 37, 81, 108, 123, 135], "disconnect_al": [0, 29, 33, 34, 81], "disconnect_from": [0, 29], "disconnect_from_al": [0, 29], "discov": [0, 6, 7], "discret": 32, "disp": [47, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "dispatch": [0, 19, 20], "displai": [47, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 115, 133], "display_map": [0, 47], "distribut": [32, 43], "divid": [24, 32, 75, 76, 96], "dll": [0, 1, 5, 6, 7, 14, 19, 29, 40, 42, 52, 53, 55, 72, 117, 126, 127, 131], "dll_dir": [19, 52, 72], "dll_get_funct": 55, "dll_path": [0, 5, 14, 29, 40, 42, 46, 52, 53, 55, 131], "dll_set_funct": 55, "dll_wrapper": 0, "dma": [1, 22], "dmm": [50, 86, 91, 97, 104, 107, 108, 111, 125], "dmm6500": [50, 135, 136], "dmm_1": 125, "dmm_v1": 111, "do": [13, 15, 29, 32, 35, 37, 43, 44, 47, 53, 65, 86, 107, 111, 122, 132], "do0d": [70, 115], "do1d": [65, 66, 67, 70, 111, 115, 118], "do2d": [105, 115, 135], "do_get_frequ": [0, 37], "do_get_pow": [0, 37], "do_get_pulse_delai": [0, 37], "do_get_statu": [0, 37], "do_get_status_of_alc": [0, 37], "do_get_status_of_modul": [0, 37], "do_plot": [70, 84, 105, 111, 115, 118], "do_set_frequ": [0, 37], "do_set_pow": [0, 37], "do_set_pulse_delai": [0, 37], "do_set_statu": [0, 37], "do_set_status_of_alc": [0, 37], "do_set_status_of_modul": [0, 37], "doc": [15, 19, 35, 36, 56, 80, 118, 135, 136], "docstr": [6, 50, 115, 122], "document": [29, 32, 36, 43, 47, 48, 49, 56, 65, 72, 82, 111, 122, 125], "docx": 72, "doe": [1, 4, 5, 6, 8, 10, 13, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 67, 72, 86, 96, 122, 131], "doesn": [1, 6, 7, 44, 50, 81], "don": [7, 111, 123, 134], "dond": [105, 111, 118], "dond_measur": 84, "done": [6, 7, 15, 29, 31, 37, 59, 68, 73, 83], "dot": 7, "doub": 37, "doubl": [7, 27, 35, 37], "double_delai": [0, 37], "double_width": [0, 37], "down": [6, 29, 31, 47, 67, 80, 86, 130], "download": [41, 65, 122, 135], "download_device_node_tre": [0, 57], "dp932e": 36, "dpi": 133, "dr": 14, "drawn": [15, 22], "drive": [6, 16, 30, 127], "driver": [59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "driver_dev": 16, "drivererror": 29, "drop": 107, "drsdaylightsolutions_mircat": [0, 14], "ds1104z": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "ds1za171812151": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "dsg3136b": [36, 135, 136], "dsg3e244600050": 111, "dsp": 4, "dtype": [0, 29, 39, 41, 47, 49, 76], "du401": [0, 135, 136], "du401_bu2": 61, "dual": [27, 58, 72], "dual_mts_modul": 27, "dualmtsmodul": [0, 27], "dualspdtmodul": [0, 27], "due": [84, 86], "dummi": [34, 37, 111], "dummyinstru": 111, "dummyinstrumentwithmeasur": 111, "dummyvalu": 39, "dump": 41, "duplic": [111, 132], "durat": [34, 49, 75, 76, 86, 123], "dure": [6, 29, 37, 43, 44, 50, 55, 57, 60, 86], "duti": [7, 37, 123], "duty_cycle_max": 14, "duty_cycle_perc": [32, 100, 103], "dutycycl": 72, "dwel": [37, 91, 96], "dwell": [0, 15, 37], "dwell_": [32, 89, 94, 101], "dynam": [1, 37, 48, 86, 122], "e": [1, 7, 18, 22, 29, 30, 32, 34, 47, 48, 50, 57, 75, 76, 81, 86, 111, 115, 116, 122, 125, 134], "e36313a": [0, 21], "e36313achannel": [0, 21], "e8527d": 21, "each": [1, 6, 9, 23, 29, 30, 32, 35, 37, 41, 47, 48, 49, 50, 53, 55, 68, 72, 83, 84, 86, 92, 93, 102, 115, 116, 122, 123, 136], "easili": [71, 78], "ebof": 37, "echo": [4, 47, 118], "eco": 37, "ed261978": [59, 85, 117], "edg": [0, 7, 22, 42, 44, 48, 70, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "edgecolor": 133, "edit": [50, 111, 132], "edward": [36, 56], "ef": 47, "eff": 22, "effect": [22, 32, 47, 48, 49, 111, 132], "effort": 136, "eg": [13, 19, 108], "egat": 37, "eight": [27, 86], "either": [1, 5, 6, 18, 19, 22, 24, 29, 34, 37, 43, 47, 50, 55, 74, 86, 115, 122], "el320p": [0, 135, 136], "elapsedtimeparamet": 84, "electr": 133, "electrical_delay_auto": 133, "electron": [10, 31], "element": 53, "elev": 57, "elif": [75, 76], "elp320": 60, "els": [1, 22, 29, 55, 60, 75, 76, 125], "elyjah": 4, "em": 15, "embed": 15, "embedded_vers": [0, 15, 68], "emem": 50, "empti": [22, 32, 48, 65, 76, 81, 118, 122, 134], "empty_slot": [75, 76], "emul": 57, "en": [29, 44, 80], "enabl": [0, 6, 7, 15, 22, 23, 25, 32, 34, 36, 37, 39, 44, 50, 51, 52, 53, 57, 69, 78, 82, 86, 119, 123, 130], "enable_3v3": [0, 33, 34], "enable_5v": [0, 33, 34], "enable_auto_mov": [0, 6], "enable_channel": [0, 44, 57], "enable_chop": [0, 33, 34], "enable_convert": [0, 33, 34], "enable_detector": [0, 43], "enable_event_dlg": [0, 52, 53], "enable_hw_channel": [0, 52, 53], "enable_negative_suppli": [0, 33, 34], "enable_ocp": [0, 33, 34], "enable_output": [0, 35, 36, 50], "enable_output_channel": [0, 33, 34], "enable_ref_auto_reset": [0, 6, 7], "enable_ref_auto_upd": [0, 6, 7], "enable_remot": 35, "enable_sensor": [0, 6, 7], "encod": [0, 1, 26, 32, 33, 34, 49], "encoded_cmd": 34, "encount": 1, "encourag": 136, "encposit": [0, 46], "encst": [0, 46], "end": [1, 4, 7, 22, 32, 35, 37, 48, 50, 75, 76, 98, 105, 111, 118], "end_freq": 133, "end_mark": [0, 32, 89], "end_sequ": 34, "end_v": [32, 97, 104], "endofsweep": 39, "endofsweepact": 39, "endofsweeparbitraryvalu": 39, "endofsweepv": 39, "endpoint": 88, "endsettlingtim": 39, "energi": 52, "enough": [1, 31, 75, 76, 123], "enqueu": [22, 135], "ensur": 37, "enter": [44, 125], "enter_persistent_mod": [0, 31], "entir": [15, 115], "entranc": 72, "entri": 48, "enum": [8, 25, 32, 41, 48, 52, 53, 86], "enumer": 7, "enumerate_devic": [0, 46], "env": [45, 68, 70], "envelop": 37, "eot_bwd": 7, "eot_fwd": 7, "epsilon": 7, "equal": [22, 57, 115, 119], "equip": 135, "equitim": 47, "equival": [36, 47, 57, 108, 122], "equval": 34, "era": 68, "erainstru": [0, 68], "erasynth": [0, 135, 136], "erasynthbas": [0, 15], "erasynthplu": [0, 15, 68], "erasynthplusplu": [0, 15, 68], "err": [30, 60, 79, 84, 96, 122], "errabort": 19, "error": [0, 1, 6, 7, 19, 22, 24, 30, 32, 35, 37, 43, 44, 47, 53, 57, 60, 75, 76, 79, 81, 84, 86, 88, 89, 90, 94, 96, 98, 99, 100, 103, 107, 108, 111, 115, 125], "error_callback": 43, "error_check": [0, 5, 19, 40, 46, 52, 53], "error_cod": [29, 30, 35], "error_ind": 108, "error_messag": [0, 29], "error_msg": 43, "errorcod": 1, "errormsg": [0, 1], "errorreg": 44, "errorvalu": 44, "esin": 37, "esp8266": 15, "esp8266_upload_mod": [0, 15], "especi": 136, "esr": 47, "essenti": 134, "establish": [84, 107], "estim": [32, 74], "etc": [19, 22, 32, 131], "ethernet": [7, 27, 50, 107, 108, 112], "ethernet_cmd": [0, 33, 34], "etim": 84, "eu": [14, 28, 37, 47, 52, 53], "evalu": 48, "even": [1, 5, 6, 8, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 32, 35, 40, 42, 44, 47, 48, 49, 51, 52, 55, 56, 86], "evenli": 35, "event": [1, 5, 22, 31, 36, 37, 40, 43, 47, 48, 49, 50, 53, 122], "event_dialog": 53, "eventhough": 86, "everi": [6, 7, 22, 34, 37, 41, 47, 49, 57, 86, 111, 123, 126], "everyth": [26, 32, 49], "ex": 31, "exact": 47, "exactli": [37, 125], "examin": [0, 31], "exampl": [13, 15, 19, 21, 22, 27, 29, 30, 35, 36, 44, 47, 56, 57, 75, 79, 110, 115, 124, 136], "exce": 37, "excecut": 32, "exceed": [1, 48], "excel": 48, "except": [1, 6, 7, 11, 19, 22, 25, 29, 30, 47, 49, 50, 51, 53, 57, 71, 75, 76, 78, 79, 81, 84, 86, 122, 125, 136], "exception": 130, "exception_typ": [0, 6], "excit": [57, 134], "exec_funct": 125, "execut": [0, 1, 20, 22, 31, 35, 36, 37, 43, 44, 47, 50, 86, 111], "execute_befor": 49, "exist": [1, 22, 32, 35, 44, 81, 136], "exit": [32, 67, 72], "exp": [65, 79, 84, 111, 115, 118, 119, 123, 133], "exp_nam": 133, "exp_start": [0, 48, 49], "exp_stop": [0, 48, 49], "expand": 108, "expand_channel_list": [0, 32, 108], "expand_setpoints_help": 119, "expect": [1, 4, 29, 32, 44, 47, 75, 76, 80, 136], "expens": 49, "experi": [6, 37, 70, 79, 84, 115, 118, 133, 135], "experiment": [65, 70, 79, 84, 105, 111, 115, 118], "experiment_nam": [65, 79, 111, 115, 118, 119, 133], "expir": 111, "explan": 48, "explicit": 70, "explicitli": [32, 108], "expon": 48, "exponenti": [9, 11], "expos": [32, 47], "exposur": 61, "exposure_tim": [5, 61], "express": [43, 72, 108], "ext": [15, 32, 37], "ext0": 44, "ext1": [37, 94], "ext2": 37, "ext4": [88, 94, 99, 103], "ext_fal": 47, "ext_front": 118, "ext_rear": 118, "ext_ref_detect": [0, 42], "ext_ref_lock_en": [0, 42], "ext_ris": 47, "ext_trigg": [75, 76], "extend": [32, 86], "extens": [41, 50, 68], "extent": 98, "extern": [7, 14, 15, 22, 32, 37, 44, 68, 75, 76, 91, 97, 102, 104, 114], "external_sourc": 22, "external_trigger_mod": 44, "externalinput": 32, "extra": [25, 30, 51], "extract": [10, 13, 31], "extrem": 32, "exttrig": [21, 22, 75, 76], "f": [7, 15, 22, 47, 56, 70, 76, 79, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 125, 130], "f008": 31, "f1d": 0, "f_khz": 34, "facecolor": 133, "fact": 115, "factor": [32, 37, 84], "factori": [11, 15, 49], "factory_reset": [0, 15], "fail": [7, 79, 84], "failur": [75, 76], "fairli": 122, "fall": [0, 6, 7, 22, 37, 122], "fals": [5, 6, 7, 9, 15, 19, 21, 22, 26, 29, 31, 32, 34, 35, 40, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 61, 63, 65, 68, 71, 72, 73, 74, 76, 78, 79, 82, 84, 85, 86, 88, 98, 105, 111, 117, 123, 127, 131], "farad": 7, "farzad": [70, 115], "fashion": 84, "fast": [31, 32, 37, 86, 115, 120], "fast_axi": 115, "fast_chan": [32, 86], "fast_step": [32, 86], "fast_vend": [32, 86], "fast_vstart": [32, 86], "faster": [86, 111], "fca3000": 124, "fca3100": [0, 124], "featur": [6, 7, 29, 37], "feature_cod": 57, "feedback": [6, 7], "fetch": [37, 43, 136], "few": [6, 7, 15, 68], "fewer": 86, "fhr": [19, 135, 136], "fhr1000": 72, "fhr_client": [0, 19], "fhr_server": [0, 19], "fhrclient": [0, 19, 20], "fhrserver": [0, 19, 20], "field": [20, 23, 29, 31, 67, 84, 135], "field_ramp_r": [23, 78], "field_suppli": 67, "field_valu": 31, "fig": [76, 92, 93, 98, 119], "figsiz": 133, "figur": [61, 76, 86, 123, 133], "file": [1, 5, 7, 10, 14, 19, 22, 29, 31, 35, 37, 40, 43, 50, 53, 57, 64, 65, 75, 76, 81, 84, 117, 118], "file_nam": [7, 41], "file_path": [31, 50, 85], "filenam": [22, 50, 59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117], "fill": [32, 47, 48, 115], "filter": [0, 6, 22, 32, 44, 61, 90], "filter_auto": 74, "filter_median": 74, "filter_median_en": 74, "filter_mod": [22, 61], "filter_mov": 74, "filter_moving_en": 74, "filter_repeat": 74, "filter_repeat_en": 74, "filter_slop": 115, "final": [9, 29, 67, 69, 70, 111, 112, 113], "find": [7, 31, 35, 43, 70, 107, 114, 130], "find_modul": [0, 47], "fine": [6, 35], "fine_pll_ld": [0, 42], "finish": [6, 22, 23, 30, 37, 43, 79, 86, 126], "finit": [32, 35], "fire": [32, 86], "firmwa": 118, "firmwar": [0, 1, 4, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 23, 25, 26, 29, 30, 31, 32, 35, 40, 42, 44, 47, 48, 51, 52, 53, 55, 56, 57, 59, 61, 63, 64, 65, 68, 69, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 115, 116, 117, 121, 122, 123, 124, 125, 126, 128, 129, 131], "firmware_build": [0, 5], "firmware_d": 70, "firmware_revis": [0, 42], "firmware_vers": [0, 5, 17], "first": [6, 7, 11, 22, 27, 29, 32, 37, 43, 48, 69, 71, 83, 84, 86, 111, 114, 122, 128, 129], "fisica": 133, "fit": [6, 35, 43, 74, 79], "fix": [13, 22, 31, 37], "fixed_address": 22, "flag": [0, 5, 7, 32, 35, 37, 40, 46, 53, 57, 86], "flank": 122, "flash": [0, 6, 7, 33, 34, 72, 130], "flash_util": [0, 33, 34], "flatten": 37, "flaw": 98, "fleitmann": 37, "flexabl": 35, "flexibl": 35, "flip": [32, 128], "flipper": [52, 53, 128], "float": [2, 5, 6, 7, 9, 10, 11, 13, 14, 15, 16, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 37, 41, 43, 44, 47, 48, 49, 50, 53, 55, 56, 57, 84, 98, 118], "float32": 39, "float64": 48, "floats_to_comma_separated_list": [0, 32], "flow": [98, 105], "flush": [22, 32, 47], "flush_input_buff": [0, 33, 34], "flush_waveform": [0, 21, 22], "fm": [15, 37, 114], "fm1": [37, 114], "fm2": 37, "fm_channel": 114, "fm_deviation1": 123, "fm_deviation2": 123, "fm_internal_efile1": 123, "fm_internal_efile2": 123, "fm_internal_freq1": 123, "fm_internal_freq2": 123, "fm_internal_function1": 123, "fm_internal_function2": 123, "fm_internal_source1": 123, "fm_internal_source2": 123, "fm_state1": 123, "fm_state2": 123, "fmpm": 37, "fmpma": 37, "fmpmb": 37, "fname": 50, "focal": 72, "folder": [7, 10, 29, 50, 136], "folder_path": [10, 64], "follow": [6, 7, 13, 15, 22, 37, 43, 48, 75, 76, 111, 115, 122, 125, 126, 132, 136], "follwo": 78, "fontsiz": 133, "fool": 86, "forc": [22, 34, 36, 50, 86, 107], "force_logicjump": [0, 50], "force_reload": 50, "force_trigg": [0, 50], "forcefulli": 107, "foreign": 1, "forev": 30, "forget": 37, "form": [29, 31, 37, 57, 102, 108, 133], "format": [1, 2, 13, 16, 31, 48, 60, 73, 78, 80, 125, 133], "former": [6, 48], "forschungszentrum": 7, "forth": 32, "forward": [0, 6, 7, 32, 49, 52, 53], "forward_and_back": [0, 32], "found": [1, 6, 7, 15, 29, 35, 80, 84, 131, 135, 136], "foundat": 29, "four": [1, 8, 27], "fp": [0, 6, 7, 41, 45], "fpga": 22, "fr": 4, "fre": 125, "free": [1, 5, 6, 19, 22, 29, 32, 40, 43, 48, 55, 56, 65], "free_all_trigg": [0, 32], "free_trigg": [0, 32], "freerun": [15, 68], "freq": [15, 37, 47, 62, 111, 115, 130, 133], "freq_axi": 70, "freq_concurrent1": 123, "freq_concurrent2": 123, "freq_cw1": 123, "freq_cw2": 123, "freq_manu": [0, 37], "freq_max": [0, 37], "freq_mea": 115, "freq_min": [0, 37], "freq_mode1": 123, "freq_mode2": 123, "freq_span1": 123, "freq_span2": 123, "freq_start1": 123, "freq_start2": 123, "freq_stop1": 123, "freq_stop2": 123, "frequenc": [0, 6, 7, 11, 15, 22, 24, 32, 35, 37, 42, 47, 50, 54, 55, 56, 62, 65, 70, 71, 79, 111, 114, 115, 117, 118, 125, 130, 132, 134, 135], "frequency_buff": 115, "frequency_hz": [32, 89], "frequency_hz_": 39, "frequency_range_threshold": 79, "frequencymodul": [0, 37], "frequencysweep": [0, 37], "frequencysweepmagphas": [0, 11, 37], "frequent": 31, "fresh": 29, "fridg": [10, 31, 60], "from": [1, 2, 4, 5, 6, 7, 9, 10, 11, 13, 15, 19, 21, 22, 23, 24, 27, 29, 31, 32, 34, 35, 37, 43, 44, 47, 48, 49, 50, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "fron": 125, "front": [19, 22, 32, 35, 36, 47, 72, 82, 111, 115, 125], "frontplat": 6, "frozenset": [32, 49], "fsk_freq1": 123, "fsk_freq2": 123, "fsk_internal_rate1": 123, "fsk_internal_rate2": 123, "fsk_source1": 123, "fsk_source2": 123, "fsk_state1": 123, "fsk_state2": 123, "fsv_3013": 0, "ftdi": 13, "full": [22, 37, 61, 83, 115, 120], "full_rang": [0, 35], "full_scal": [22, 76], "fulli": [48, 61], "fun": 32, "functino": 29, "function": [1, 4, 6, 7, 13, 15, 18, 20, 22, 23, 27, 29, 30, 31, 32, 34, 35, 37, 43, 44, 48, 50, 53, 54, 55, 57, 62, 67, 71, 75, 76, 80, 84, 86, 96, 108, 115, 118, 122, 135, 136], "function_efile1": 123, "function_efile2": 123, "function_nam": [5, 40, 46, 53], "function_ramp_symmetry1": 123, "function_ramp_symmetry2": 123, "function_shape1": 123, "function_shape2": 123, "furnish": 43, "further": [13, 29, 32, 54], "furthermor": 57, "futur": [55, 59, 61, 65, 71, 72, 79, 83, 84, 85, 98, 111, 117], "fv": 123, "fw": 54, "fw4": 122, "fwd": [52, 111], "fz": [6, 7, 37], "fzj": 6, "g": [22, 25, 29, 30, 32, 45, 47, 48, 50, 51, 57, 65, 67, 71, 74, 86, 111, 118, 125, 134], "g1": [92, 93, 102], "g10k": 37, "g1k": 37, "g2": [0, 48, 92, 93, 102], "g3": [92, 93], "g4": [92, 93], "g5": 93, "g50": 37, "gain": [0, 6, 22, 35, 37, 86, 118], "gate": [32, 37, 48, 90, 106, 110, 111, 135], "gated_trigger_acquisit": [0, 44], "gatewai": 15, "gauss": 67, "gca": [92, 93, 123], "gcc": 1, "ge": [98, 105], "gen_trigger_puls": [0, 37], "gener": [0, 1, 5, 6, 7, 15, 16, 21, 22, 23, 29, 32, 35, 36, 37, 43, 44, 47, 48, 50, 56, 57, 80, 84, 106, 110, 111, 114, 115, 118, 120, 122, 132, 134, 135, 136], "generalmicrowav": 0, "generate_csv_sequence_program": [0, 57], "generatedsetpoint": [0, 47, 50], "generator_63493": 37, "generator_numb": 32, "generatro": 82, "gentec": [0, 135, 136], "gentec_maestro": [0, 69], "gerer": 37, "get": [5, 6, 7, 10, 11, 14, 19, 22, 23, 27, 29, 30, 31, 35, 37, 43, 47, 50, 55, 61, 62, 63, 67, 70, 71, 77, 78, 86, 113, 115, 118, 119, 123, 124, 125, 127, 128, 129, 130, 133, 135], "get_": [0, 11, 65], "get_acquired_data": [0, 5], "get_acquisition_tim": [0, 5], "get_actuator_nam": [0, 6, 7], "get_actuator_typ": [0, 6, 7], "get_al": [0, 31, 35, 37, 50], "get_all_label": [0, 43], "get_amplitud": [0, 6, 7], "get_attribut": [0, 29], "get_axis_statu": [0, 6, 7], "get_bias_curr": [0, 43], "get_bias_voltag": [0, 33, 34, 43], "get_buffer_length": [0, 47], "get_buffers_en": [0, 35], "get_calibr": [0, 40], "get_camera_handl": [0, 5], "get_camera_serial_numb": [0, 5], "get_capture_dur": [0, 48, 49], "get_card_memori": [0, 44], "get_card_typ": [0, 44], "get_channel": [0, 48, 49, 122], "get_channel_nam": 29, "get_channel_waveform": [0, 41], "get_channel_waveform_data": [0, 41], "get_chassi": [0, 21, 22], "get_clock_frequ": [0, 21, 22], "get_clock_sync_frequ": [0, 21, 22], "get_cmd": [5, 6, 15, 19, 25, 37, 43, 47, 48, 50, 51, 56], "get_configur": [0, 15, 48, 49], "get_converter_voltag": [0, 33, 34], "get_coupl": [0, 21, 22], "get_current_folder_nam": [0, 50], "get_data": [0, 39, 44, 120], "get_dc_voltag": [0, 6, 7], "get_detector": [0, 5], "get_device_config": [0, 6, 7], "get_device_info": [0, 6, 7], "get_device_nam": [0, 46], "get_diagnostic_statu": [0, 15], "get_display_valu": [0, 47], "get_divid": [75, 76], "get_error": [0, 37], "get_error_info32bit": [0, 44], "get_file_handl": [75, 76], "get_filenam": [0, 50], "get_filter_mod": [0, 5], "get_filter_valu": [0, 35], "get_firmware_vers": [0, 6, 7, 21, 22, 44], "get_folder_cont": [0, 50], "get_fpga_pc_port": [0, 21, 22], "get_frequ": [0, 6, 7], "get_full_scal": [0, 21, 22], "get_funct": 125, "get_grat": [0, 40], "get_grating_info": [0, 40], "get_hardware_vers": [0, 5, 21, 22, 44], "get_head_model": [0, 5], "get_hvi_regist": [0, 21, 22], "get_hw_info": [0, 52, 53], "get_hw_revis": [0, 33, 34], "get_hw_serial_num_ex": [0, 52, 53], "get_i": 86, "get_id": [0, 19, 37, 114], "get_idn": [0, 1, 4, 5, 6, 8, 13, 14, 15, 17, 19, 21, 22, 25, 26, 28, 29, 30, 31, 33, 34, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 83, 117], "get_imped": [0, 21, 22], "get_info": 70, "get_input_delai": [0, 48], "get_internal_temperatur": [0, 33, 34], "get_ip": [0, 33, 34], "get_jumpmod": [0, 50], "get_label": [0, 32, 43, 86], "get_last_error": [0, 30], "get_latest": 48, "get_limit": [0, 14], "get_lut_nam": [0, 6, 7], "get_math_vdiv": [0, 41], "get_math_waveform": [0, 41], "get_max_curr": [0, 37, 38], "get_max_sample_r": [0, 44], "get_measurement_period": [0, 43], "get_mod": [0, 35], "get_module_count": [0, 21, 22], "get_module_idn": [0, 47], "get_module_statu": [0, 47], "get_n": [0, 43], "get_num_sampl": [0, 41], "get_number_devic": [0, 40], "get_number_gr": [0, 40], "get_number_of_detector": [0, 43], "get_number_pixel": [0, 40], "get_ocp_statu": [0, 33, 34], "get_ofst": [0, 41], "get_open": [0, 21, 22], "get_opt": [0, 37, 114], "get_output_st": [0, 33, 34], "get_overload": [0, 47], "get_parameter_data": 133, "get_pars": [15, 25, 48, 56], "get_pixel_width": [0, 40], "get_pol_dac": [0, 35], "get_posit": [0, 6, 7, 46], "get_power_statu": [0, 33, 34], "get_prescal": [0, 21, 22], "get_pressur": [0, 10, 31], "get_product_nam": [0, 21, 22], "get_product_name_by_index": [0, 21, 22], "get_product_name_by_slot": [0, 21, 22], "get_pulse_histori": [0, 33, 34], "get_pulse_paramet": [0, 14], "get_pxi_trigg": [0, 21, 22], "get_rang": [0, 14], "get_raw": [0, 5, 6, 11, 16, 29, 31, 32, 37, 43, 47, 50, 55, 115], "get_raw_analog_waveform_data": [0, 41], "get_raw_digital_waveform_data": [0, 41], "get_raw_math_waveform_data": [0, 41], "get_recorded_scpi_command": [0, 32, 91, 107], "get_ref_posit": [0, 6, 7], "get_remote_set": [0, 35], "get_sample_r": [0, 41], "get_serial_numb": [0, 21, 22, 40], "get_serial_number_by_index": [0, 21, 22], "get_serial_number_by_slot": [0, 21, 22], "get_slit": [0, 40], "get_slot": [0, 21, 22], "get_stat": [0, 50], "get_statu": [0, 5, 21, 22, 26, 46], "get_sub_net_mask": [0, 33, 34], "get_switches_st": [0, 33, 34], "get_tagg": [49, 122], "get_temperatur": [0, 5, 10, 21, 22, 31], "get_temperature_rang": [0, 5], "get_test_sign": [0, 48], "get_time_bas": [0, 41], "get_trac": [0, 37], "get_trig_mod": [0, 41], "get_trigger_by_nam": [0, 32, 98], "get_trigger_io": [0, 21, 22], "get_trigger_level": [0, 43, 48], "get_trigger_mod": [0, 21, 22], "get_trigger_threshold": [0, 21, 22], "get_typ": [0, 21, 22], "get_type_by_index": [0, 21, 22], "get_type_by_slot": [0, 21, 22], "get_uid": [0, 33, 34], "get_uninitialized_slot": [0, 21, 22], "get_v": 133, "get_v2": 133, "get_v_ref": [0, 33, 34], "get_valid": [0, 55], "get_vdiv": [0, 41], "get_voltag": [0, 47], "get_waveform_setup": [0, 41], "get_waveform_statu": [0, 21, 22], "get_waveform_typ": [0, 21, 22], "get_wavelength": [0, 40], "get_wavelength_limit": [0, 40], "get_wrapp": 125, "geta": 6, "getaci": 6, "getal": [0, 6, 37], "getattr": [19, 115], "getbinedg": 48, "getc": 6, "getcapturedur": 49, "getchannel": 49, "getconfigur": 49, "getcount": 48, "getcountstot": 48, "getcser": 6, "getcwd": 111, "getdata": [39, 48], "getdatanorm": 48, "getdataobject": 48, "getdatatotalcount": 48, "getdci": 6, "geterrormessag": 76, "getf": 6, "getg2": 48, "getidn": 34, "getindex": 48, "getinputdelai": 48, "getlogg": [79, 84], "getm": 6, "getposit": [0, 46], "getser": 6, "gettabl": 122, "gettd": 6, "getter": [15, 49], "gettestsign": 48, "gettriggerlevel": 48, "gettu": 6, "getv": 6, "gh": 47, "ghz": [11, 59, 70, 82, 111, 130, 133], "giga": [0, 44, 45], "giga_b": [0, 44, 45], "git": [70, 135, 136], "github": [15, 29, 52, 53, 107, 135], "give": [35, 37, 47, 48, 50, 71, 78, 84, 108, 115], "given": [1, 6, 14, 22, 29, 37, 43, 47, 55, 57, 108], "global": [6, 30, 32], "gm349": 0, "gm349attenu": [0, 16], "gmbh": [7, 44], "gmcatalog": 16, "gnd": 6, "go": [31, 32, 35, 47, 50, 65, 67, 68, 70, 83, 107, 108, 111, 123], "goe": 86, "gone": 84, "goniomet": [0, 6, 7], "goto": 50, "goto_root": [0, 50], "gotten": [49, 71], "gpib": [23, 31, 50, 67, 77, 78, 135, 136], "gpib0": [66, 67, 77, 78, 115], "gpib1": 70, "gpio_cmd": [0, 33, 34], "gpioflag": [0, 46], "gpistat": 23, "gpl": 136, "gpostat": 23, "gr": 72, "graham": 84, "grant": 43, "graph": 111, "grate": [19, 20, 40, 72, 116], "grating1": [19, 72], "grating2": 72, "grating_1800": 72, "grating_600": 72, "gratingchannel": [0, 19], "gratingnumb": 72, "gre": [65, 71, 118], "gre050342": 118, "gre058050": [65, 71], "great": 57, "greater": 35, "greatli": 130, "green": 36, "grei": [92, 93], "grep": 107, "grid": [92, 93, 115, 133], "grid_sampl": 115, "groov": 116, "groove_dens": 116, "ground": [0, 7, 32, 108], "group": [1, 16, 25, 31, 32, 36, 56, 57, 84, 86], "groupedparamet": 25, "gsa": [75, 76], "gt": [70, 79, 84, 111, 115, 118, 122, 123, 125], "guarante": [7, 35], "guard_stat": 79, "gui": [57, 84], "guid": 79, "h": [1, 47, 84], "h2py": [0, 44], "h_spe": 20, "ha": [1, 4, 5, 6, 7, 13, 15, 22, 23, 29, 32, 37, 40, 42, 43, 47, 48, 50, 53, 55, 57, 67, 72, 78, 81, 82, 83, 84, 86, 107, 115, 118, 122, 125, 131, 136], "hack": 57, "had": 1, "hadn": [59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117], "half": 50, "half_rang": [0, 35], "hand": 86, "handheld": 52, "handl": [1, 4, 6, 7, 19, 20, 29, 31, 35, 37, 43, 44, 49, 84], "hang": [6, 107], "happen": [57, 126], "hard": [4, 13], "hardwar": [7, 13, 22, 25, 30, 35, 37, 44, 51, 52, 53, 117, 134], "hardware_revis": [0, 42], "harmon": 115, "harmonic_": 39, "harmonic_ss": [0, 42], "hasn": 1, "have": [1, 4, 5, 6, 7, 11, 13, 19, 22, 24, 26, 29, 32, 35, 40, 44, 47, 48, 49, 50, 55, 56, 57, 66, 68, 71, 72, 81, 82, 83, 84, 86, 111, 122, 132, 135], "haven": 111, "hban": 37, "hdawg8": 57, "hdev": 37, "he_level": 66, "head": [5, 84, 136], "head_model": [0, 5], "header": 1, "heater": [3, 31, 67, 135], "heater_addr": 60, "heater_i": 60, "heater_off": [0, 31], "heater_on": [0, 31], "heater_output": 77, "heater_rang": 77, "heater_v": 60, "heavili": 136, "held": 22, "helium": [31, 135, 136], "help": [35, 122], "helper": 122, "helvl": 66, "here": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 44, 47, 48, 50, 51, 52, 55, 56, 59, 65, 73, 83, 86, 111, 114, 115, 117, 122, 132, 136], "hereaft": 86, "herebi": 43, "hertz": [7, 47, 71], "hf": 44, "hf2li": [0, 135, 136], "hi": 22, "high": [0, 6, 7, 22, 24, 32, 37, 44, 82, 84, 86, 90, 114, 130], "high1": 123, "higher": [37, 108], "hilim": 67, "hislip": 65, "hislip0": [65, 114], "histogram": 48, "histogram_log_bins_measur": 122, "histogramlogbin": 48, "histogramlogbinsmeasur": [0, 48, 49, 122], "histori": 34, "hit": 7, "hiz": 22, "hmc": [135, 136], "hmc8041": 0, "hmc8042": 0, "hmc8043": [0, 112], "hmc804x": [0, 37], "hmp": [0, 37], "hmp2020": 0, "hmp2030": 0, "hmp4030": 0, "hmp4040": [0, 135, 136], "hold": [0, 11, 18, 29, 31, 84, 91, 115], "hold_field": [0, 31], "holder": [43, 57], "holzworth": [0, 135, 136], "home": [52, 53, 79, 135], "homelimitswitch": [0, 52], "hook": [86, 98], "horiba": [0, 135, 136], "horiba_fhr": [0, 72], "horibafhr": [0, 19, 72], "host": 86, "hostnam": 7, "hotspot": 15, "hour": [0, 25, 42], "how": [32, 48, 83, 96, 110, 111, 136], "howev": [61, 70, 86], "hp": 70, "hp8594e": [135, 136], "hp_filter_cutoff_frequency_hz": 39, "hp_filter_ord": 39, "hpow": 37, "hs900": [0, 71], "hs9002b": 71, "hs9008b": 0, "hs9008bchannel": [0, 18], "hs900b": [135, 136], "hs900channel": [0, 18], "hsswp_acqchsget": [0, 39], "hsswp_acqchsset": [0, 39], "hsswp_autoreverseget": [0, 39], "hsswp_autoreverseset": [0, 39], "hsswp_endsettlget": [0, 39], "hsswp_endsettlset": [0, 39], "hsswp_numsweepsget": [0, 39], "hsswp_numsweepsset": [0, 39], "hsswp_resetsignalsget": [0, 39], "hsswp_resetsignalsset": [0, 39], "hsswp_savebasenameget": [0, 39], "hsswp_savebasenameset": [0, 39], "hsswp_savedataget": [0, 39], "hsswp_savedataset": [0, 39], "hsswp_saveoptionsget": [0, 39], "hsswp_saveoptionsset": [0, 39], "hsswp_start": [0, 39], "hsswp_statusget": [0, 39], "hsswp_stop": [0, 39], "hsswp_swpchbwddelayget": [0, 39], "hsswp_swpchbwddelayset": [0, 39], "hsswp_swpchbwdswget": [0, 39], "hsswp_swpchbwdswset": [0, 39], "hsswp_swpchlimitsget": [0, 39], "hsswp_swpchlimitsset": [0, 39], "hsswp_swpchnumptsget": [0, 39], "hsswp_swpchnumptsset": [0, 39], "hsswp_swpchsiglistget": [0, 39], "hsswp_swpchsignalget": [0, 39], "hsswp_swpchsignalset": [0, 39], "hsswp_swpchtimingget": [0, 39], "hsswp_swpchtimingset": [0, 39], "hsswp_zctrloffget": [0, 39], "hsswp_zctrloffset": [0, 39], "htm": 35, "html": [29, 37, 47, 80, 117], "http": [8, 14, 15, 16, 28, 29, 35, 36, 37, 44, 47, 52, 53, 56, 63, 65, 68, 80, 107, 117, 127, 135], "hvi": 22, "hw": [22, 53], "hw42000000": 112, "hw50020003": 113, "hw_trigger": [0, 42], "hw_type": 53, "hw_val": 34, "hwchan": 37, "hwtriggert": [0, 42], "hysteresi": 7, "hz": [2, 6, 7, 11, 14, 15, 22, 29, 37, 48, 50, 59, 65, 68, 71, 79, 80, 82, 115, 117, 118, 120, 123, 131, 133, 134], "i": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 104, 108, 110, 111, 114, 115, 116, 118, 119, 120, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135], "i1": [112, 113], "i_bia": [0, 37], "i_mod": 118, "i_offset": [0, 37], "iago": [52, 53], "ibat": 130, "ichau": [0, 6, 7], "id": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 23, 25, 26, 29, 30, 35, 40, 42, 44, 47, 48, 51, 52, 53, 55, 56, 65, 70, 79, 84, 105, 111, 114, 115, 118, 130], "id_queri": 29, "ident": 32, "identif": [17, 22, 32, 37], "identifi": [0, 7, 22, 28, 29, 31, 34, 47, 55, 81, 107, 111, 130, 132], "idl": [25, 50], "idn": [1, 4, 5, 6, 8, 13, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 44, 47, 48, 51, 52, 55, 56, 61, 65, 66, 67, 68, 71, 74, 78, 81, 82, 84, 96, 111, 115, 116, 117, 118, 123, 124, 131], "idn_param": 32, "idr": 31, "idu": 5, "idx": 29, "ie": [27, 32], "ieee": 32, "if_bandwidth": [65, 133], "igh": 31, "ignor": [7, 22, 31, 57, 84], "ignorecas": 41, "ii": [32, 92, 110, 135], "ilm": 31, "ilm200": 0, "imag": [22, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "imform": 64, "img": [92, 93, 98], "imm": 74, "immedi": [22, 24, 50, 83], "immidi": 86, "imp": 37, "imped": [0, 22, 37], "impedance_output1": 123, "impedance_output2": 123, "implement": [0, 1, 15, 19, 22, 29, 31, 37, 48, 49, 55, 122, 125, 136], "impli": [43, 86], "import": [15, 27, 43, 47, 60, 61, 62, 63, 65, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "improv": 136, "imshow": [92, 93, 98], "in_dur": 76, "in_phas": 118, "in_r": 118, "inc": 74, "includ": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 32, 35, 40, 42, 43, 44, 47, 48, 50, 51, 52, 55, 56], "incom": 22, "incompat": 24, "inconsist": 84, "incorpor": 111, "incorrectli": 70, "increas": [22, 70, 119], "increment": [22, 32, 47, 115], "increment_sensit": [0, 47, 115], "inde": 78, "indefinit": 23, "independ": [37, 57, 86, 115, 134], "index": [6, 9, 16, 22, 29, 32, 35, 53, 56, 57, 86, 134, 136], "indic": [6, 13, 22, 34, 44, 53, 71], "individu": [15, 35, 37, 83, 86, 136], "indiviu": 32, "inf": 86, "infinit": [22, 32], "influenc": 32, "info": 25, "inform": [6, 7, 15, 44, 52, 53, 57, 72, 84, 114, 122, 127, 136], "ingor": 84, "inherit": [22, 37, 48, 50, 122], "ini": [19, 72], "init": [0, 13, 19, 29, 50, 72, 91, 96], "init_hw_devic": [0, 52, 53], "init_start": [9, 73], "init_voltag": 34, "initi": [0, 1, 5, 7, 19, 20, 22, 27, 29, 31, 32, 34, 40, 47, 48, 49, 50, 53, 72, 78, 81, 83, 86, 122, 135], "initial": 135, "initial_cache_valu": 15, "initial_settling_tim": 39, "initial_settling_time_m": 120, "initial_valu": 48, "initialis": [22, 32, 84, 87, 110, 135], "initialise_databas": [65, 66, 67, 118], "initialise_or_create_database_at": [65, 111, 118], "initialize_channel": [0, 44], "initialz": 35, "initiate_correct": [0, 32, 104], "initsettlingtim": 39, "inizi": 133, "inject": 32, "inlet": 10, "inner": [32, 97, 98], "inner_contact": [32, 91, 97, 98, 104], "inner_step": 98, "inner_step_time_": [32, 91, 97, 98, 104], "inner_step_trigg": [32, 91, 97, 98, 104], "inner_v": 98, "inner_voltag": [32, 91, 97, 98, 104], "inout": 22, "inp": [6, 37], "input": [1, 4, 6, 7, 15, 22, 29, 31, 32, 35, 37, 44, 47, 50, 55, 59, 61, 65, 70, 71, 72, 76, 77, 79, 80, 84, 85, 98, 108, 111, 117, 118, 120, 125], "input1": 120, "input8": 120, "input_buff": [0, 33, 34], "input_filter_en": 79, "input_filter_highpass_cutoff": 79, "input_filter_highpass_rolloff": 79, "input_filter_lowpass_cutoff": 79, "input_filter_lowpass_rolloff": 79, "input_filter_optim": 79, "input_imped": 115, "input_index": 39, "input_path": 44, "input_rang": 44, "inputs_gnd": 118, "insert": [50, 84, 125], "insid": [35, 44, 50, 86], "inspect": [32, 78], "inspir": 25, "inst": 126, "inst0": [112, 123, 125, 133], "inst_no": 6, "instal": [1, 7, 13, 22, 35, 37, 47, 57, 62, 65, 68, 107, 114, 117, 127], "instanc": [5, 6, 7, 15, 18, 22, 29, 34, 35, 37, 43, 47, 48, 50, 55, 57, 75, 76, 120, 125, 126, 127, 134], "instant": [1, 47], "instanti": [7, 9, 15, 21, 32, 48, 68, 122], "instead": [25, 26, 30, 32, 34, 49, 51, 55, 72, 84, 115, 122, 125, 136], "instr": [15, 31, 59, 60, 65, 66, 67, 68, 69, 70, 73, 77, 78, 86, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 108, 111, 112, 113, 114, 115, 123, 124, 125, 133], "instrument": [1, 2, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 67, 68, 71, 74, 84, 86, 102, 107, 112, 113, 114, 115, 120, 125, 127, 132, 135, 136], "instrument_driv": [27, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 111], "instrumentbas": [6, 19, 41, 48, 49], "instrumentchannel": [6, 8, 9, 18, 19, 21, 23, 24, 27, 29, 30, 32, 34, 37, 38, 41, 48, 49, 50, 55, 56, 122], "instrumentmodul": 49, "instrumentsni": 29, "insuffici": 35, "int": [5, 6, 7, 9, 10, 11, 14, 15, 17, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 41, 43, 44, 47, 48, 49, 50, 53, 54, 55, 56, 57, 68, 76, 79, 84, 114, 118, 122, 123], "int1": [91, 96], "int2": 91, "int32": [39, 48], "int64": 48, "intb": 37, "integ": [1, 19, 22, 32, 39, 47, 49, 57], "integr": [32, 48, 86, 119, 135, 136], "integration_period": 39, "integration_tim": 39, "integrationtim": 39, "intellig": 31, "intenum": 7, "inter": [35, 84], "inter_delai": 35, "interact": [10, 15, 31], "interconnect": [32, 102], "interfac": [0, 1, 6, 19, 22, 32, 84, 111, 132], "interleav": 44, "interlock": 25, "interlock_statu": 25, "intern": [6, 7, 15, 18, 22, 32, 36, 37, 47, 50, 57, 61, 68, 71, 79, 86, 98, 102, 114, 115, 117, 120, 123], "internal_trigg": [32, 98], "interpol": [92, 93, 98], "interpret": [6, 7, 70], "interrupt": 1, "interv": 37, "introduct": [71, 136], "ints_to_comma_separated_list": [0, 32], "inuitit": 72, "inv": 37, "invalid": [6, 7, 26, 32, 48, 49], "invalidate_trac": [0, 11], "invers": [19, 123], "invert": [32, 37], "invert_yaxi": [92, 93], "invok": [22, 43], "involv": 32, "io": [7, 22, 29, 80], "io_expander_cmd": [0, 33, 34], "ip": [7, 8, 15, 26, 27, 28, 31, 34, 47, 84, 114, 119, 130, 135, 136], "ip_pow": 63, "ip_power_9258": [0, 63], "ipinstru": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 27, 28, 29, 30, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "ips120": 0, "ipwr": [0, 46], "ipython": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 125], "iq": [22, 35, 37], "iqchannel": [0, 37], "iqmodul": [0, 37], "ir": 14, "irreversibli": [1, 5, 6, 19, 29, 31, 40, 48, 55, 56], "is_cooler_on": [0, 5], "is_encod": 34, "is_run": [0, 48, 49], "is_upload": [0, 21, 22], "isobu": 31, "isol": 32, "isrun": 49, "issu": 84, "iter": [9, 29, 47, 115], "iteratorbas": [48, 49], "itest": [0, 135, 136], "itestchannel": [0, 9], "itestmultichannelparamet": [0, 9], "its": [1, 5, 6, 7, 13, 19, 22, 24, 29, 36, 37, 40, 47, 48, 49, 50, 55, 56, 77, 83, 86, 108, 116, 122, 126, 132, 135], "itself": [6, 19, 50, 111], "iusb": [0, 46], "iv": [119, 135], "ivi": 29, "ivvi": 0, "ix": 9, "j3": 16, "j7211": 21, "j7211b": 21, "jan": 4, "jeniels": 61, "jog": [0, 30], "join": 111, "jp": 98, "json": [15, 26, 32, 34, 43, 47, 49, 133], "juelich": [6, 7, 37], "julien": [14, 28, 37, 47, 52, 53], "julienbarri": [14, 28, 37, 47, 52, 53], "jump": [22, 35, 50], "jump_log": 50, "jumplog": 50, "jun": 74, "jupyt": [79, 136], "just": [6, 18, 26, 29, 32, 35, 37, 49, 67, 71, 97, 108], "j\u00fclich": 7, "k": [45, 52, 77, 84, 133, 135], "k10cr1": [0, 53, 135, 136], "k16": 37, "k22": [37, 114], "k23": [37, 114], "k24": 37, "k739": 37, "kcube": 127, "kdc101": [0, 53], "keep": 86, "kei": [6, 13, 19, 37, 47, 57, 115], "keithlei": [50, 135, 136], "keithley2400": [0, 50], "keithley6430": 74, "keithley6500": 50, "keithley_2000_scan": [0, 125], "keithley_2000_scan_channel": [0, 50], "keithley_2401": 0, "keithley_2700": 0, "keithley_6430": [0, 74], "keithley_6500": [0, 125], "keithley_sens": [0, 50], "kelvin": [10, 31], "kelvinox": 0, "kernel": 68, "keysight": [0, 135, 136], "keysight_e36313a": 0, "keysight_e8267d": 0, "keysight_j7211": 0, "keysight_m3201a": 0, "keysight_m3300a": 0, "keysightsd1": [21, 22, 75, 76], "keyword": [22, 29, 43, 50], "kg": 67, "kgauss": 67, "khz": 115, "kill": [70, 107], "kilo": [0, 44, 45], "kilo_b": [0, 44, 45], "kind": [6, 7, 32, 43], "kinesi": [0, 52, 127], "kiyooka": 4, "kk": 41, "kkmg": 41, "kls101": 127, "kls1550": [0, 135, 136], "klsnnn": 127, "knob": 125, "know": [20, 127], "known": [6, 15, 26, 32, 49, 86, 118], "krato": 16, "kratosm": 16, "kw": 50, "kwarg": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 125], "l": [0, 7, 37, 52, 116], "l490mz": [0, 52, 53], "lab": 6, "label": [6, 11, 15, 19, 29, 43, 47, 48, 49, 51, 63, 69, 77, 79, 84, 92, 93, 115, 116, 129, 133, 135, 136], "labels": 133, "labon": 57, "labphox": [0, 33, 34], "labspec": 72, "labspec6": 19, "laird": [36, 56, 111], "lake": 79, "lakeshor": [0, 79, 135, 136], "lakeshore625": [0, 23, 78], "lambda": [15, 19, 23, 25, 48, 51, 98], "lan": [7, 107], "lanc": [36, 56], "lancast": 111, "lank": [7, 37], "larg": [35, 123], "laser": [14, 25, 26, 51, 52, 135, 136], "lasersourc": 127, "last": [7, 10, 16, 22, 29, 31, 32, 48, 50, 114, 125], "last_posit": 126, "lastsegmentarrai": 39, "later": [7, 32, 86, 111, 136], "latest": [26, 29, 32, 49, 80], "latter": [13, 48], "launch": [22, 84], "layer": 50, "layout_file_path": 39, "layout_nam": 39, "lazi": 74, "lc1846": 73, "lcardtyp": 44, "lda": [0, 135, 136], "lda_ch2": 131, "lda_ch4": 131, "lda_main_port": 131, "lda_test_port": 131, "ldaattenu": [0, 55], "ldachannel": [0, 55], "ldaparamet": [0, 55], "ldaworkingfrequ": [0, 55], "lead": [31, 70], "leakag": [0, 32, 106, 110, 135], "leakage_matrix_ohm": [92, 93], "leakage_megaohm": [92, 93], "least": [22, 32, 37], "leav": [22, 29, 44], "leave_persistent_mod": [0, 31], "led": 57, "left": [32, 48], "left_diod": 105, "legaci": 22, "legacy_channel_numb": [21, 22], "legibl": 48, "len": [1, 75, 76, 79, 88, 92, 93, 96, 98], "length": [1, 5, 22, 23, 32, 37, 43, 48, 57, 84, 123, 124], "less": [7, 37, 47, 84, 86], "let": [53, 65, 69, 71, 77, 83, 107, 108, 115, 124, 135], "letter": 34, "lev": 37, "level": [0, 6, 7, 21, 31, 35, 37, 44, 47, 48, 50, 56, 57, 70, 82, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 108, 111, 119, 132, 135, 136], "level0": 44, "level1": 44, "level_dac_valu": [0, 42], "level_trigger_channel_index": 39, "level_trigger_hysteresi": 39, "level_trigger_slop": 39, "level_trigger_valu": 39, "lf": 37, "lf1": [37, 114], "lf1a": 37, "lf1b": 37, "lf2": 37, "lf2a": 37, "lf2b": 37, "lfag": 32, "lfchan": 37, "lfo": 37, "lfo1": 37, "lfo2": 37, "lfoutputchannel": [0, 37], "lfoutputsweep": [0, 37], "li": 120, "lia": 134, "lia1": 134, "liabil": 43, "liabl": 43, "lib": [7, 14, 68, 70, 125], "lib_prefix": 29, "libname_error_messag": 29, "libname_getattribut": 29, "libname_init": 29, "libname_setattribut": 29, "libphox": [0, 33], "librari": [1, 5, 6, 7, 14, 22, 29, 31, 40, 48, 53, 75, 76, 127], "libusb0": 7, "libximc": [0, 46], "licens": 43, "light": 43, "lighthous": 25, "lighthouse_photonics_sprout_g": 0, "lighthousephoton": 0, "lighthousephotonicssproutg": [0, 25], "like": [6, 19, 21, 29, 47, 50, 71, 84, 107, 122], "lim_switch": 53, "limit": [1, 13, 14, 22, 24, 30, 35, 43, 52, 53, 67, 78, 82, 83, 86, 120], "limit_statu": 83, "limits_get": 120, "lin": [37, 123], "lin_step": [0, 37], "line": [10, 13, 15, 16, 19, 22, 29, 32, 47, 74, 107, 108, 111, 123], "line2d": 123, "linear": [0, 6, 7, 11, 19, 37], "linearli": [32, 60], "linewidth": [92, 93], "linger": 32, "link": [1, 49, 136], "linktoon": 39, "linspac": [0, 35, 74, 75, 76, 79, 86, 88, 89, 91, 97, 98, 104, 115], "list": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 22, 23, 25, 26, 29, 30, 31, 32, 34, 35, 37, 40, 42, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 68, 81, 82, 86, 91, 96, 98, 106, 110, 111, 115, 120, 122, 135], "list2_end": 89, "list_available_devic": [0, 52, 53], "list_context": [0, 32], "list_mode_run": [0, 42], "list_mode_t": [0, 42], "list_nam": 34, "list_of_modul": 39, "list_resourc": 107, "listen": [32, 47, 93, 102], "listern": [32, 102], "listmodet": [0, 42], "liter": 19, "ll": 32, "lm": [130, 135, 136], "lm_500": [135, 136], "lmx1": 15, "lmx2": 15, "lno": [37, 114], "lo": [15, 37, 68], "load": [1, 7, 22, 37, 50, 55, 75, 76, 115, 131, 135], "load_and_set_sequ": [0, 50], "load_by_run_spec": 133, "load_fpga_imag": [0, 21, 22], "load_lut_fil": [0, 6, 7], "load_or_create_experi": [65, 66, 67, 79, 84, 105, 111, 115, 118, 119, 133], "load_sess": 39, "load_session_layout": 39, "load_session_set": 39, "load_waveform": [0, 21, 22], "load_waveform_int16": [0, 21, 22], "loadabl": 37, "loadlib": 19, "local": [0, 15, 31, 37, 47, 68, 125, 136], "localhost": [43, 65, 120], "locat": [21, 22, 29, 47, 50, 86], "lock": [15, 24, 31, 35, 37, 47, 68, 115, 130, 134], "lock_in_ondivoff": 39, "lock_lmx1": 15, "lock_lmx2": 15, "lock_xtal": 15, "lockin": [4, 7, 47, 57, 115, 118], "lockin1": 115, "lockin_aux_out1": 115, "lockin_ch1_datatrac": 115, "lockin_demodharmonicget": [0, 39], "lockin_demodharmonicset": [0, 39], "lockin_demodhpfilterget": [0, 39], "lockin_demodhpfilterset": [0, 39], "lockin_demodlpfilterget": [0, 39], "lockin_demodlpfilterset": [0, 39], "lockin_demodphasget": [0, 39], "lockin_demodphasregget": [0, 39], "lockin_demodphasregset": [0, 39], "lockin_demodphasset": [0, 39], "lockin_demodrtsignalsget": [0, 39], "lockin_demodrtsignalsset": [0, 39], "lockin_demodsignalget": [0, 39], "lockin_demodsignalset": [0, 39], "lockin_demodsyncfilterget": [0, 39], "lockin_demodsyncfilterset": [0, 39], "lockin_frequ": 115, "lockin_modampget": [0, 39], "lockin_modampset": [0, 39], "lockin_modharmonicget": [0, 39], "lockin_modharmonicset": [0, 39], "lockin_modonoffget": [0, 39], "lockin_modonoffset": [0, 39], "lockin_modphasfreqget": [0, 39], "lockin_modphasfreqset": [0, 39], "lockin_modphasget": [0, 39], "lockin_modphasregget": [0, 39], "lockin_modphasregset": [0, 39], "lockin_modphasset": [0, 39], "lockin_modsignalget": [0, 39], "lockin_modsignalset": [0, 39], "lockin_r_v": 115, "lockin_sweep_setpoint": 115, "lockin_x": 115, "lockinfreqswp_limitsget": [0, 39], "lockinfreqswp_limitsset": [0, 39], "lockinfreqswp_open": [0, 39], "lockinfreqswp_propsget": [0, 39], "lockinfreqswp_propsset": [0, 39], "lockinfreqswp_signalget": [0, 39], "lockinfreqswp_signalset": [0, 39], "lockinfreqswp_start": [0, 39], "log": [0, 10, 22, 31, 33, 34, 37, 43, 59, 61, 64, 65, 71, 72, 75, 76, 79, 84, 85, 98, 111, 117], "log_puls": [0, 33, 34], "log_step": [0, 37], "log_wav_init": [0, 33, 34], "log_waveform": [0, 33, 34], "logarithm": 37, "logfil": [59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117], "logger": [75, 76, 79, 84, 111, 119, 133], "logger_init": [0, 33, 34], "logger_inst": 34, "logic": [22, 50], "logic_jump": 50, "login": [8, 63], "login_nam": [8, 63], "login_password": [8, 63], "logspacenumvalid": [0, 48, 49], "logspacestartvalid": [0, 48, 49], "logspacestopvalid": [0, 48, 49], "lolim": 67, "long": [7, 11, 50, 86], "long_trac": 88, "longer": [22, 37, 47, 57, 68], "look": [7, 55, 71, 84, 111, 115, 132, 135, 136], "lookup": 7, "loop": [6, 7, 9, 29, 68, 73, 127, 130], "loos": 32, "losc": 37, "losc_input": [0, 37], "losc_mod": [0, 37], "losc_output": [0, 37], "losc_stat": [0, 37], "loscil": 37, "loss": 7, "lost": 1, "lot": 50, "low": [0, 6, 7, 15, 22, 24, 32, 37, 44, 47, 86, 90, 130], "low_phase_nois": 15, "low_power_mode_en": 130, "low_spuri": [15, 68], "lower": [7, 25], "lower_limit": [39, 120], "lower_limit_hz": 39, "lowerlimit": 39, "lowerrangev": 39, "lowest": 47, "lp_filter": 44, "lp_filter_cutoff_frequency_hz": 39, "lp_filter_ord": 39, "lsa2ns5": 79, "lsa2oe9": 79, "lsa2pic": 79, "lsb": 22, "lsci": [77, 78], "lt": [70, 79, 84, 111, 115, 118, 122, 123, 125], "ltr": 54, "ltsxxx": [0, 52, 53], "luka": [7, 37], "lut": 7, "m": [6, 7, 14, 15, 22, 32, 34, 37, 43, 45, 47, 52, 68, 79, 82, 86, 115, 119, 120, 123, 126], "m0": 15, "m1": [15, 50, 135], "m100l": 83, "m2": [0, 15, 50], "m2_solstis_3": 0, "m2cmd_card_reset": 44, "m2cmd_card_waitreadi": 44, "m2j": 0, "m2solstis3": [0, 26], "m3": 15, "m32": 22, "m3201a": [21, 22], "m3202a": [0, 22, 135, 136], "m3202a_sync": 21, "m32xxa": 22, "m3300a": [21, 22], "m3300a_awg": [0, 21], "m3300a_dig": [0, 21], "m33xxa": 22, "m4": [15, 44], "m4i": 0, "m5": 15, "m5180": [0, 135, 136], "m6": 15, "m7": 15, "m81": [23, 24, 135, 136], "m81_bcs_10": 79, "m81_cm_10": 79, "m81_ssm": [0, 79], "ma": [31, 34, 79, 84, 98], "mac": [0, 32], "machin": [107, 108], "made": 57, "maestro": [17, 135, 136], "magnet": [10, 13, 23, 31, 85, 135, 136], "magnet_coil_constant_unit": 78, "magnet_current_vector": [31, 84], "magnet_st": 84, "magnet_temperatur": 84, "magnetcurrentparamet": [0, 31], "magnetic_field_vector": [31, 84], "magnetic_field_z": 84, "magnetic_field_z_set": 84, "magneticfieldparamet": [0, 31], "magnitud": [11, 24, 30, 65, 134], "mai": [7, 24, 30, 32, 34, 43, 47, 48, 50, 68, 70, 71, 81, 86, 122, 124, 130, 132], "main": [0, 29, 31, 37, 44, 45, 48, 50, 72, 81, 122, 135], "main_port": 131, "mainfram": 47, "maintain": 29, "major": [0, 46], "make": [11, 15, 22, 29, 31, 34, 35, 43, 47, 50, 57, 68, 81, 84, 86, 102, 111, 115, 120, 132, 134, 135], "make_directori": [0, 50], "makerofinstru": 136, "man": 37, "man_dat": [0, 42], "manag": [19, 22, 29, 31, 32, 35, 52], "mandat": [0, 42], "mandatori": 50, "mani": [80, 135, 136], "manipul": [109, 110, 135], "manner": [35, 115], "manual": [13, 21, 22, 32, 35, 37, 54, 57, 61, 78, 93, 102, 115, 118], "manufactur": [0, 46], "manufacture_d": 117, "manufacturerid": [0, 46], "map": [6, 16, 19, 29, 32, 47, 49, 50, 72, 98, 115], "mark": [7, 32, 47, 48, 57, 91], "marker": [22, 57], "marker1": 50, "marker2": 50, "markermod": 22, "markervalu": 22, "mask": [15, 22, 34, 76], "mass": 6, "master": [15, 29, 112, 113, 135], "match": [1, 31, 47], "matplotlib": [61, 70, 74, 76, 84, 92, 93, 98, 102, 115, 119, 123, 133], "matrix": [32, 43, 92, 93], "matthew": 36, "max": [9, 13, 29, 32, 35, 44, 80, 81, 82, 124, 130, 133], "max_curr": 34, "max_slew_tim": 39, "max_spe": 19, "max_status_ag": [0, 32], "max_val": 29, "max_val_ag": 48, "max_valu": [15, 19, 35, 49], "max_vel": 53, "maxim": [19, 86], "maximum": [6, 13, 22, 23, 29, 30, 35, 37, 47, 48, 53, 86], "maximum_slew_rate_units_": 120, "maxnm": 72, "maxslewr": 39, "maxtim": 39, "maxum": 72, "mbar": 10, "mc": 31, "mc_temperatur": 84, "mdc": [23, 79], "mea": [65, 79, 80, 84, 86, 115, 125, 133], "mean": [6, 29, 30, 31, 32, 37, 56, 68, 72, 74, 84, 86, 123, 124], "meanful": 37, "meaning": 122, "meant": 57, "meantim": 126, "meas2_r": 74, "meas_format": 133, "meas_guid": 79, "meas_r": 74, "measur": [0, 6, 7, 9, 11, 24, 29, 30, 32, 34, 36, 37, 43, 44, 47, 48, 49, 50, 66, 67, 69, 78, 79, 81, 83, 86, 92, 93, 98, 111, 112, 113, 118, 119, 120, 133, 135, 136], "measure_adc": [0, 33, 34], "measure_capacit": [0, 6, 7], "measure_curr": [0, 36], "measure_posit": [0, 30, 83], "measure_pow": [0, 36, 37], "measure_voltag": [0, 36], "measured_voltag": 34, "measurement_context": [0, 32], "measurement_instru": 115, "measurement_list": [0, 48], "measurement_nam": 118, "measurement_period": 119, "measurement_var": 115, "measurementcontrolmixin": [0, 48, 49], "measurer": [135, 136], "measurment_label": 115, "mechan": 35, "media": 32, "medium": 32, "mega": [0, 44, 45], "mega_b": [0, 44, 45], "mem_usag": [0, 21, 22], "member": [42, 46, 136], "memor": 81, "memori": [1, 6, 7, 22, 26, 32, 44, 49, 50, 55, 57, 123], "memory_manag": [0, 21], "memory_s": [0, 21, 22], "memorymanag": [0, 21, 22], "memsiz": 44, "merchant": 43, "mercuri": 0, "merg": 43, "messag": [0, 6, 7, 13, 25, 28, 32, 35, 44, 47, 84], "message_len": 35, "metadata": [6, 19, 47, 49], "meter": [7, 31, 52, 135, 136], "method": [5, 6, 21, 22, 25, 29, 30, 32, 35, 37, 43, 44, 47, 48, 49, 50, 51, 57, 78, 81, 86, 115, 122], "methodalt": 39, "methodlow": 39, "methodmiddl": 39, "methodupp": 39, "mff002": 128, "mff10x": [0, 53, 135, 136], "mhz": [15, 22, 35, 44, 56, 59, 75, 76, 80, 117, 130, 134], "michael": [6, 37], "microphon": [15, 68], "microscop": [29, 80], "microwav": [16, 36, 37, 135, 136], "mid": 14, "middlerangefrom": 39, "middlerangeto": 39, "middlerangev": 39, "might": [49, 107, 125], "milisecod": 127, "millidegre": 7, "million": 80, "millisecond": [19, 47, 86], "millivolt": 35, "min": [13, 23, 32, 35, 76, 78, 84, 124], "min_spe": 19, "min_val": 29, "min_valu": [15, 19, 35, 48, 49], "min_vel": 53, "mind": 22, "mini_circuit": 27, "minicircuit": 0, "minicircuitsmodul": [0, 27], "minicircuitsmodularsystem": [0, 27], "miniconda3": 70, "minim": [19, 29, 80], "minimum": [13, 29, 35, 37, 47, 53], "minimum_integration_time_": 39, "minimum_settling_time_": 39, "minnm": 72, "minor": [0, 46, 92, 93], "minortick": [92, 93], "minum": 72, "minut": [30, 84, 111, 132], "mircat": 0, "mircat_las": 14, "mircatsdk": 14, "mirror": [19, 52, 53, 72, 128], "mirror1": 19, "mirror2": [19, 72], "misc": 65, "mismatch": [1, 32], "miss": 122, "mit": [43, 136], "mix": [10, 29, 31], "mixer": [35, 57], "mixin": 49, "mixing_chamber_heater_off": [0, 31], "mixing_chamber_heater_pow": 84, "mixing_chamber_temperatur": 84, "mixing_chamber_temperature_set": 84, "mixtur": 10, "mkdtemp": 72, "mm": [72, 116], "mnpeak": 23, "mock": 114, "mock_instru": 111, "mockvisa": [0, 6, 37], "mockvisahandl": [0, 6, 37, 114], "mode": [0, 1, 5, 6, 7, 9, 11, 15, 19, 22, 24, 25, 29, 31, 32, 35, 37, 41, 44, 47, 48, 50, 51, 57, 59, 62, 65, 70, 71, 72, 74, 78, 79, 84, 85, 87, 91, 96, 98, 110, 114, 117, 118, 123, 130, 135], "mode_forc": [32, 86], "modefor": 37, "model": [0, 1, 4, 5, 6, 8, 12, 13, 14, 15, 17, 19, 21, 23, 25, 26, 29, 30, 31, 34, 35, 37, 40, 42, 44, 47, 48, 51, 52, 53, 54, 55, 56, 61, 68, 70, 71, 79, 81, 82, 83, 84, 115, 117, 118, 123, 124, 135, 136], "model_331": [0, 77], "model_4g": [135, 136], "model_625": [0, 78], "modifi": [6, 13, 43, 48, 86, 114], "modul": [71, 75, 76, 114, 122, 125, 130, 135, 136], "modular": 27, "modulation_am_depth": [0, 15, 68], "modulation_db": 130, "modulation_en": [0, 15, 68], "modulation_fm_devi": [0, 15, 68], "modulation_freq": [0, 15, 68], "modulation_frequ": 130, "modulation_mv": [92, 93], "modulation_pulse_period": [0, 15, 68], "modulation_pulse_width": [0, 15, 68], "modulation_signal_waveform": [0, 15, 68], "modulation_sourc": [0, 15, 68], "modulation_typ": [0, 15, 22, 68], "modulation_v": [32, 92, 93], "modulation_voltag": 32, "modulator_numb": 39, "modulator_signal_index": 39, "module_1": 27, "module_2": 27, "module_3": 27, "module_address": 27, "modulebas": [0, 23], "modulein": 76, "moduleinid": 76, "modulenam": [6, 37, 39], "modulesnam": 39, "mohm": 44, "moment": [50, 61], "monitor": [37, 109, 110, 135], "monitor_channel_index": 39, "monoton": 70, "montana": 28, "montanainstru": 0, "montanainstruments_cryost": [0, 28], "month": [0, 42], "more": [7, 13, 32, 35, 44, 55, 57, 71, 72, 76, 81, 84, 87, 107, 110, 122, 135], "moreov": 108, "most": [15, 21, 29, 37, 50, 54, 82, 125, 133], "mostli": [29, 32, 48], "mot_get_home_paramet": [0, 52, 53], "mot_get_posit": [0, 52, 53], "mot_get_status_bit": [0, 52, 53], "mot_get_velocity_paramet": [0, 52, 53], "mot_move_absolute_ex": [0, 52, 53], "mot_move_hom": [0, 52, 53], "mot_move_jog": [0, 52, 53], "mot_move_veloc": [0, 52, 53], "mot_set_home_paramet": [0, 52, 53], "mot_set_velocity_paramet": [0, 52, 53], "mot_stop_profil": [0, 52, 53], "motion": [6, 7, 135, 136], "motion_control": 127, "motioncontrol": 127, "motor": [6, 7, 19, 20, 30, 52, 53, 58, 72, 126], "motorchannel": [0, 19], "motorstepunit": 72, "mount": [30, 83], "mountain": 11, "move": [0, 6, 7, 19, 30, 31, 53, 62, 72, 83, 111, 135], "move_ab": [0, 30, 83], "move_hom": 126, "move_limit": [0, 30], "move_refer": [0, 6, 7], "move_rel": [0, 30, 83], "move_to_reference_posit": [0, 6], "movement": [6, 30, 62, 83], "moverload": 23, "movest": [0, 46], "mppeak": 23, "mptpeak": 23, "mr": 23, "mrang": 23, "mrfrequenc": 23, "mrm": 23, "ms_durat": 34, "msettl": 23, "msg": [13, 31, 43], "msg_group": 31, "msl": 19, "mst601": [0, 52, 53], "mt": [27, 84], "mtheta": 23, "mtsmodul": [0, 27], "mtvd": 41, "much": [32, 81], "multi": [27, 32, 44], "multi_axis_posit": 6, "multiaxisposit": [0, 6], "multiaxispositionparamet": [0, 6], "multichannel": 80, "multichannelinstrumentparamet": [9, 32], "multifunct": [135, 136], "multimet": [50, 135, 136], "multiparamet": [6, 11, 31, 37, 50], "multipl": [6, 7, 21, 22, 29, 32, 35, 44, 48, 50, 57, 87, 106, 108, 110, 122, 130, 135], "multiple_step": [0, 6], "multiple_trigger_acquisit": [0, 44], "multiplex": 81, "multipli": 32, "multityp": 48, "munlock": 23, "must": [6, 7, 20, 22, 24, 31, 32, 36, 37, 44, 50, 57, 96, 122, 127], "mutlifunct": 29, "mv": [7, 35, 44, 79, 92, 93, 115, 118, 119, 134], "mv_rang": 44, "mvcmdst": [0, 46], "mw": [37, 82, 127], "mw1": 117, "mw_sourc": 82, "mx": 23, "my": [23, 111, 132], "my49370329": 59, "my_list": [94, 101], "my_trac": 88, "myplot": 86, "mysquar": 96, "m\u00b2": 26, "m\u03c9": [92, 93], "n": [1, 2, 6, 11, 22, 31, 35, 41, 43, 47, 50, 70, 86, 96, 118], "n49388": 115, "n9000a": [2, 135, 136], "n_avail": [0, 32], "n_bin": [0, 48, 49, 122], "n_bin_edg": 48, "n_channel": [0, 32], "n_cycl": 22, "n_cycles_remain": [0, 32], "n_error": [0, 32], "n_external_input": [0, 32], "n_external_output": [0, 32], "n_point": [22, 47], "n_pt": [75, 76], "n_trigger": [0, 32, 44], "n_valu": [0, 48], "na_mod": [0, 37], "name": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 47, 48, 49, 50, 52, 53, 55, 56, 57, 62, 63, 69, 71, 72, 73, 77, 78, 82, 84, 85, 86, 88, 93, 102, 108, 111, 114, 115, 118, 120, 127, 130, 131, 132, 134, 135, 136], "name_in_librari": 29, "name_map": [29, 81], "namedargtyp": [0, 29], "namedtupl": 29, "nan": [6, 24, 48], "nanomet": 7, "nanoni": [135, 136], "nanonisinst": 120, "nanonistramea": [0, 39, 120], "narrow": 35, "narrowband_fm": 15, "nation": [29, 82, 135, 136], "nationalinstru": [0, 80, 81, 82], "nationalinstruments_pxie_5654": [0, 29], "nationalinstruments_rfsg": [0, 29], "nb": [15, 32], "nb_trace": 65, "nchannel": 29, "ndarrai": [11, 22, 32, 34, 39, 41, 47, 49, 50, 57], "nearbi": 32, "nearest": 98, "necessari": [1, 6, 7, 32, 37, 111, 132], "need": [6, 13, 20, 22, 32, 37, 44, 48, 50, 57, 63, 68, 70, 71, 78, 82, 97, 107, 115, 117, 118, 122, 127, 128, 129, 132], "neg": [6, 22, 24, 30, 32, 35, 44, 82, 90], "negat": 22, "neg\u00eerneac": 15, "neither": 7, "netstat": 107, "network": [7, 8, 11, 15, 29, 50, 135, 136], "never": [26, 32, 49, 118], "new": [6, 9, 20, 22, 25, 30, 32, 34, 37, 48, 50, 51, 57, 83, 122, 136], "new_cmd": [25, 30, 51], "new_experi": 86, "new_timeout": 133, "new_waveform_from_doubl": [0, 21, 22], "new_waveform_from_fil": [0, 21, 22], "new_waveform_from_int": [0, 21, 22], "newgrouppage9": 52, "newport": [0, 135, 136], "newport_ag_uc8": [0, 30, 83], "newport_ag_uc8_axi": [0, 30], "newport_ag_uc8_channel": [0, 30], "newport_ag_uc8_errorcod": [0, 30], "newport_ag_uc8_except": [0, 30], "next": [6, 7, 22, 32, 37, 43, 111], "nf": 6, "ni": [29, 80, 81, 135, 136], "ni_dll_instru": 0, "ni_pxie_2597": [0, 29, 81], "ni_pxie_5654": [0, 29, 82], "ni_rfsg": [0, 29, 82], "ni_switch": [0, 29], "nidaqmx": [29, 80], "nidllinstru": [0, 29], "nidllwrapp": [0, 29], "nifpga": 29, "nimi": 29, "nirfsg": 29, "nirfsg_64": 29, "nirfsg_functionnam": 29, "nirfsg_getattributevireal64": 29, "nirfsg_init": 29, "nirfsg_setattributevireal64": 29, "niswitch": 29, "niswitch_kw": 29, "nisync_init": 29, "nitclk": 29, "nl": 35, "nm": [7, 69, 116], "nn": 70, "node": 57, "nodelai": 47, "noi": 37, "nois": [15, 35, 37, 47, 79, 118, 130], "noisa": 37, "noisb": 37, "noise_level3": 123, "noise_level4": 123, "noise_mod": 118, "nomin": 82, "non": [8, 22, 32, 37, 73, 78, 81, 86, 135], "none": [4, 5, 6, 7, 9, 10, 11, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 63, 64, 66, 67, 69, 70, 73, 74, 79, 81, 82, 85, 92, 93, 111, 115, 116, 118, 121], "noninfring": 43, "nonstandard": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "nonzero": 29, "noofpoint": 39, "noofstep": 39, "noofsweep": 39, "nor": 37, "norm": [37, 41, 88, 94, 114, 123], "normal": [0, 35, 37, 41, 48, 82, 84], "not_act": 83, "not_m3202a": [75, 76], "notagerror": 70, "notat": [7, 11, 86], "note": [4, 6, 13, 19, 22, 29, 31, 32, 48, 49, 50, 53, 57, 68, 70, 75, 76, 81, 82, 83, 86, 118, 122, 123, 127], "notebook": [19, 36, 56, 61, 70, 111, 123, 132, 133, 135, 136], "noth": [0, 6, 7, 23, 29, 47], "notic": [43, 83], "notion": 86, "now": [48, 67, 69, 71, 77, 81, 82, 83, 86, 114, 115, 122], "np": [11, 32, 34, 41, 48, 50, 74, 75, 76, 79, 86, 91, 92, 93, 97, 98, 102, 104, 105, 115, 123, 133], "nplc": [24, 32, 50, 74, 79, 92, 93], "npt": [11, 37, 43, 65, 76, 119, 133], "nr_averag": 44, "nsl": 7, "ntpn": 107, "null": 1, "num": [0, 6, 7, 47, 50], "num_ai_channel": 80, "num_chan": [9, 86], "num_channel": 76, "num_cycl": 76, "num_param": 49, "num_point": [0, 23, 41, 79], "num_points1": 105, "num_samples_averag": 80, "num_samples_raw": 80, "num_sigout_mixer_channel": 57, "number": [0, 1, 5, 6, 7, 9, 11, 13, 15, 19, 21, 22, 23, 26, 29, 30, 31, 32, 34, 35, 37, 40, 43, 44, 47, 48, 50, 52, 53, 55, 57, 61, 62, 75, 76, 83, 86, 104, 109, 110, 116, 119, 124, 127, 131, 132, 135], "number_accumul": 61, "number_dac": 35, "number_gr": [0, 40], "number_of_channel": 48, "number_of_detector": 119, "number_of_point": 39, "number_of_puls": 39, "number_of_sampl": 39, "number_of_step": [39, 120], "number_of_sweep": 39, "number_pixel": 40, "numdac": 35, "numer": [29, 30, 70, 84, 111, 115, 118], "numofpoint": 39, "numofseg": 39, "numpi": [35, 43, 75, 76, 79, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 101, 102, 103, 104, 105, 115, 123, 133], "numpoint": 50, "numpointsparam": 50, "numpy_arrai": 43, "numpyjsonencod": [26, 32, 49], "numreadpoint": 76, "nwa": 133, "nx00": 4, "o": [1, 22, 29, 80, 111], "o5": 92, "o6": 93, "object": [5, 6, 7, 9, 19, 22, 23, 29, 32, 34, 35, 37, 40, 41, 43, 46, 48, 49, 53, 84, 115, 122, 127], "objectgroup_id": 52, "observ": [22, 86], "obtain": 43, "occasion": 35, "occur": [1, 7, 35, 44, 47, 53, 57, 86], "ocp_valu": [0, 33, 34], "oct": 115, "octav": [16, 79], "ocxo": [15, 68], "odc001": [0, 52, 53], "oer_quench": 78, "off": [0, 6, 7, 8, 9, 15, 21, 22, 25, 31, 32, 35, 36, 37, 44, 50, 57, 60, 67, 68, 71, 77, 82, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 108, 111, 112, 113, 114, 115, 118, 135], "off_modul": [0, 37], "off_tim": 7, "offici": [15, 29], "offset": [0, 6, 19, 22, 32, 37, 53, 69, 72, 130], "offset_channel_2": [75, 76], "offset_in_physical_unit": 39, "offset_v": [32, 88, 99, 100, 103], "ofst": 41, "often": [15, 53], "ohm": [22, 24, 32, 44, 50, 123], "oi": [31, 84], "oidec": [0, 31, 84], "ok": [6, 60, 122], "old": [22, 115], "omega": [135, 136], "on_hour": 25, "on_modul": [0, 37], "onboard": [22, 82], "onc": [15, 22, 32, 65, 68, 108, 122], "one": [1, 6, 7, 11, 13, 15, 19, 22, 29, 30, 32, 34, 35, 37, 42, 48, 55, 57, 72, 75, 76, 81, 82, 83, 84, 87, 95, 110, 114, 115, 125, 135], "onedr": 111, "onedswp_acqchsget": [0, 39, 120], "onedswp_acqchsset": [0, 39, 120], "onedswp_limitsget": [0, 39, 120], "onedswp_limitsset": [0, 39, 120], "onedswp_open": [0, 39, 120], "onedswp_propsget": [0, 39, 120], "onedswp_propsset": [0, 39, 120], "onedswp_start": [0, 39, 120], "onedswp_stop": [0, 39], "onedswp_swpsignalget": [0, 39, 120], "onedswp_swpsignalset": [0, 39, 120], "oneormor": [0, 32], "ones": [21, 37, 50, 54, 57, 75, 76], "ongo": 86, "onli": [1, 6, 7, 11, 15, 19, 21, 22, 26, 29, 32, 34, 35, 37, 42, 47, 48, 50, 53, 54, 55, 57, 67, 71, 78, 80, 82, 83, 84, 86, 107, 108, 118, 122, 125, 127], "onoff": 39, "op": 26, "opc": 107, "open": [1, 7, 19, 22, 31, 72, 76, 107, 111, 127, 132, 136], "open_devic": [0, 46], "open_relai": [0, 32, 108], "open_resourc": 96, "open_switch": [0, 31], "open_with_serial_numb": [0, 21, 22], "open_with_slot": [0, 21, 22], "opening_tim": 5, "openwithslot": 76, "oper": [1, 5, 6, 13, 19, 22, 29, 37, 39, 43, 47, 50, 60, 84, 86, 111], "operate_status_t": [0, 42], "operatestatust": [0, 42], "operational_error_statu": 78, "opmod": 25, "oppos": 47, "opt": 37, "optic": [19, 30, 52], "optim": [35, 37], "optimize_for_frequ": [0, 35], "optimum": 35, "option": [2, 6, 7, 11, 14, 21, 22, 25, 28, 29, 32, 35, 37, 44, 47, 48, 50, 55, 67, 84, 86, 114, 131], "order": [19, 32, 47, 63, 69, 72, 82, 86], "organ": 48, "orient": [48, 122], "origin": 136, "original_timeout": 133, "osc": [88, 94, 103, 104], "osc_amplitud": 118, "osc_frequ": 118, "osci_index": 39, "oscihr_calibrmodeget": [0, 39], "oscihr_calibrmodeset": [0, 39], "oscihr_chget": [0, 39], "oscihr_chset": [0, 39], "oscihr_oscidataget": [0, 39], "oscihr_oversamplget": [0, 39], "oscihr_oversamplset": [0, 39], "oscihr_pretrigget": [0, 39], "oscihr_pretrigset": [0, 39], "oscihr_psdavrgcountget": [0, 39], "oscihr_psdavrgcountset": [0, 39], "oscihr_psdavrgrestart": [0, 39], "oscihr_psdavrgtypeget": [0, 39], "oscihr_psdavrgtypeset": [0, 39], "oscihr_psddataget": [0, 39], "oscihr_psdshow": [0, 39], "oscihr_psdweightget": [0, 39], "oscihr_psdweightset": [0, 39], "oscihr_psdwindowget": [0, 39], "oscihr_psdwindowset": [0, 39], "oscihr_run": [0, 39], "oscihr_samplesget": [0, 39], "oscihr_samplesset": [0, 39], "oscihr_trigarmmodeget": [0, 39], "oscihr_trigarmmodeset": [0, 39], "oscihr_trigdigchget": [0, 39], "oscihr_trigdigchset": [0, 39], "oscihr_trigdigslopeget": [0, 39], "oscihr_trigdigslopeset": [0, 39], "oscihr_triglevchget": [0, 39], "oscihr_triglevchset": [0, 39], "oscihr_triglevhystget": [0, 39], "oscihr_triglevhystset": [0, 39], "oscihr_triglevslopeget": [0, 39], "oscihr_triglevslopeset": [0, 39], "oscihr_triglevvalget": [0, 39], "oscihr_triglevvalset": [0, 39], "oscihr_trigmodeget": [0, 39], "oscihr_trigmodeset": [0, 39], "oscihr_trigrearm": [0, 39], "oscil": [15, 37, 68, 118], "oscilloscop": [82, 86], "ost001": [0, 52, 53], "other": [1, 5, 6, 7, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 32, 35, 40, 42, 43, 44, 47, 48, 51, 52, 55, 56, 65, 67, 71, 72, 80, 82, 83, 86, 125, 135], "otherwis": [1, 7, 20, 22, 43, 47, 53, 118], "our": [6, 29, 69, 71, 83], "out": [1, 6, 31, 32, 43, 44, 71, 84, 86, 88, 94, 103, 104, 108, 113, 115, 126], "outer": [32, 97], "outer_contact": [32, 91, 97, 98, 104], "outer_step": 98, "outer_step_trigg": [32, 97], "outer_trigger_channel": [32, 97], "outer_v": 98, "outer_voltag": [32, 91, 97, 98, 104], "outfold": 34, "outfp": 45, "outlet": 10, "outp": [37, 91], "outp1": 37, "output": [0, 1, 2, 6, 7, 13, 15, 16, 22, 25, 29, 31, 32, 34, 35, 36, 37, 44, 47, 50, 55, 57, 59, 60, 61, 65, 68, 71, 72, 75, 76, 77, 79, 80, 82, 84, 85, 87, 91, 97, 98, 99, 104, 110, 111, 115, 117, 118, 120, 122, 130, 134, 135], "output1": 120, "output2": 120, "output2input": 118, "output8": 120, "output_amplitud": 134, "output_auto_off": 74, "output_en": [0, 42, 74, 79, 82, 127], "output_index": 39, "output_interfac": 115, "output_level": 35, "output_map": [0, 47, 57], "output_mod": [0, 25, 32, 39, 73, 90], "output_off": [0, 23, 24, 79], "output_on": [0, 23, 24, 74, 79], "output_pow": [0, 25], "output_setpoint": [0, 25], "output_trigg": [32, 91, 97, 104], "output_vari": 118, "output_voltag": [0, 33, 34], "outputchannel": [0, 37], "outputfrequencysweep": [0, 37], "outputlevelsweep": [0, 37], "outsid": [35, 44, 86], "outstand": 37, "ovc_pressur": 84, "over": [32, 71, 73, 83, 86, 92, 93, 108, 115, 130, 135, 136], "over_temp": [0, 42], "overal": 37, "overcurr": 34, "overflow": 48, "overid": 31, "overload": 47, "overrid": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 47, 48, 49, 51, 52, 55, 56, 57, 86], "overridden": 131, "override_abspath": 34, "oversampl": 35, "oversampling_index": 39, "oversampling_valu": 39, "overview": [44, 61, 71, 87, 108, 110, 116, 135, 136], "overwrit": [13, 35, 50], "overwritten": [5, 6, 29, 37, 43, 47, 50], "ovsr": 47, "own": [1, 32, 48], "oxford": [31, 84, 135, 136], "oxfordinstru": [0, 84], "oxfordinstruments_ilm200": [0, 31], "oxfordinstruments_ips120": [0, 31], "oxfordinstruments_kelvinox_igh": [0, 31], "p": [13, 31, 47, 48, 112, 113, 115, 122], "p1": [15, 112, 113], "p1_pressur": 84, "p2_pressur": 84, "p3_pressur": 84, "p4_pressur": 84, "p5": 15, "p5_pressur": 84, "p6_pressur": 84, "p9": 15, "pa": 84, "packag": [68, 70, 84, 125, 136], "packet_handl": [0, 33, 34], "padding_mod": 22, "page": 136, "pair": [23, 32, 55, 84], "panel": [22, 35, 36, 47, 82, 115, 125], "par_nam": 15, "parallel": 31, "param": [9, 17, 22, 24, 35, 38, 43, 50], "param_mea": 105, "param_nam": [9, 32], "param_set1": 105, "param_set2": 105, "paramet": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 40, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 61, 66, 67, 68, 71, 72, 74, 79, 81, 82, 83, 84, 87, 108, 110, 114, 115, 116, 118, 119, 122, 123, 125, 127, 130, 135, 136], "parameter_snap": 133, "parameterbas": 49, "parameternam": [6, 37], "parameterwithsetpoint": [29, 43, 47, 48, 50, 115], "parameterwithsetsideeffect": [0, 48, 49], "paramrawdatatyp": 11, "params_to_skip_upd": [26, 32, 49, 57], "paramt": [65, 70], "parenb": 47, "parent": [0, 6, 8, 9, 18, 19, 21, 22, 23, 24, 27, 29, 30, 32, 33, 34, 37, 38, 41, 48, 49, 50, 55, 56], "parmet": 86, "pars": [1, 2, 5, 6, 8, 13, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 84], "parse_binari": [0, 47], "parse_on_off": [0, 21], "parse_respons": [0, 33, 34], "parsebool": [0, 50], "parseint": [0, 50], "parser": [11, 22, 47], "parsestr": [0, 50], "part": [22, 32, 44, 126], "particular": [32, 43, 60, 80], "particularli": [22, 47], "partner": 22, "partnumb": 52, "pass": [6, 21, 22, 29, 35, 43, 44, 48, 50, 53, 75, 76, 122, 127], "passiv": 16, "password": [8, 15, 63], "pat": 50, "path": [5, 7, 10, 14, 29, 31, 34, 37, 39, 40, 42, 44, 52, 53, 55, 64, 72, 75, 76, 111, 117], "path1": 37, "path2": 37, "path_lik": 19, "path_to_dl": 7, "pathlib": 72, "pattern": 50, "paus": [22, 37, 67], "pc": [7, 22, 26, 111], "pci": 1, "pci_clk_en": [0, 42], "pcie_1751": 0, "pcolormesh": 70, "pcport": 22, "pd": 15, "pdf": 15, "peak": [24, 37], "peek": 32, "peek_a": [0, 32], "peg": 15, "pei": 15, "pen": 15, "pend": [37, 50], "pep": 37, "pep0": 15, "pep1": 15, "per": [7, 11, 13, 21, 22, 29, 32, 35, 37, 44, 47, 48, 68, 75, 76, 86, 106, 110, 135], "percent": 37, "percentag": [25, 31, 32], "perf_count": 70, "perform": [5, 6, 7, 29, 35, 37, 43, 47, 48, 50, 70, 83, 86, 97, 104, 114, 122, 135], "performing_meas_using_parameters_and_dataset": 119, "period": [0, 7, 15, 22, 32, 37, 39, 43, 47, 75, 76], "period_": [32, 99, 100, 102, 103], "period_end_mark": [0, 32, 88, 99], "period_m": 120, "period_start_mark": [0, 32, 103], "permiss": 43, "permit": 43, "persist": [6, 7, 31, 67, 84], "persist_on_complet": [31, 84], "persistance_heat": 67, "persistent_switch_heat": 78, "persistent_switch_heater_en": 23, "person": 43, "pes0": 15, "pes1": 15, "pew": 15, "pf_max_rang": 14, "pf_min_rang": 14, "pgen": 37, "phase": [11, 15, 19, 22, 24, 35, 37, 47, 65, 71, 115, 118, 130, 134, 135], "phase1": 123, "phase2": 123, "phase_deg_": 39, "phase_offset": 115, "phase_register_index": 39, "phasemodul": [0, 37], "phi": [75, 76, 84, 120], "photon": 25, "physic": [16, 55, 86, 122], "physik_instrument": 0, "pi": [58, 75, 76, 82, 88, 123], "pick": 47, "picomet": 19, "picosecond": [48, 122], "piezo": [6, 7, 30, 135, 136], "pin": [1, 16], "pin_map": [0, 16], "pip": [35, 68, 136], "pipe": 84, "pixel": [5, 40, 61, 116], "place": [32, 49, 57, 84, 86, 136], "placehold": 32, "plai": 57, "plasma": 98, "plate": 10, "platform": [44, 84], "pleas": [7, 13, 32, 54, 70, 84, 136], "pll": 15, "pll_lmx1_statu": [0, 15, 68], "pll_lmx2_statu": [0, 15, 68], "pll_status_t": [0, 42], "pll_xtal_statu": [0, 15, 68], "pllstatust": [0, 42], "plot": [61, 70, 74, 87, 110, 115, 119, 123, 135], "plot_by_id": [65, 66, 67, 86, 118], "plot_dataset": [79, 119], "plot_titl": 133, "plotting_funct": [0, 33, 34], "plt": [61, 74, 76, 92, 93, 98, 102, 119, 123, 133], "plu": [59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117], "plug": [21, 86, 132], "plunger": [107, 108], "plunger2": [91, 97, 104], "plunger3": [91, 97, 104], "plunger4": 104, "pm": [37, 72], "pm1": 37, "pm100d": 0, "pm2": 37, "pm_deviation1": 123, "pm_deviation2": 123, "pm_internal_efile1": 123, "pm_internal_efile2": 123, "pm_internal_freq1": 123, "pm_internal_freq2": 123, "pm_internal_function1": 123, "pm_internal_function2": 123, "pm_internal_source1": 123, "pm_internal_source2": 123, "pm_state1": 123, "pm_state2": 123, "pn": 52, "po": [35, 123], "poin": 37, "point": [0, 11, 22, 23, 29, 31, 32, 35, 37, 41, 47, 50, 57, 67, 79, 80, 84, 88, 94, 101, 111, 115, 118], "point_s11": 65, "point_s12": 65, "point_s21": 65, "point_s22": 65, "point_trigg": 111, "pointer": [7, 20, 22], "pointiq": [0, 11], "pointmagphas": [0, 11], "points_per_read": 76, "points_vna": 133, "poitn": 50, "pol": 37, "polar": [0, 7, 22, 34, 35, 37, 39, 52, 53, 88, 94, 118, 129], "polarity_map": [0, 47], "polarity_output1": 123, "polarity_output2": 123, "pole": 27, "poll": [52, 127], "poll_move_wave_t": [0, 26], "poll_raw_binary_data": [0, 47], "poll_wave_m": [0, 26], "polling_spe": 127, "pool": 32, "pop": 53, "popul": 29, "port": [1, 6, 15, 19, 22, 26, 27, 28, 29, 30, 32, 34, 37, 39, 62, 68, 72, 81, 82, 83, 86, 119, 120, 133], "port_count": [0, 1], "portchannel": [0, 19], "portion": 43, "posibl": 86, "posit": [0, 6, 7, 19, 22, 24, 30, 32, 44, 46, 53, 57, 62, 72, 83, 135], "position": 6, "position_async": 126, "possibl": [6, 7, 15, 35, 37, 44, 50, 61, 73, 84, 86, 111], "post": 44, "post_trigg": 44, "posttrigger_s": 44, "pot": 19, "pow": 37, "power": [0, 2, 3, 6, 7, 8, 13, 15, 21, 23, 25, 31, 32, 34, 36, 37, 52, 55, 59, 65, 68, 71, 82, 84, 86, 111, 117, 130, 131, 133, 135, 136], "power_level": [0, 42, 82], "power_pars": [0, 2], "power_spectral_dens": 59, "power_statu": [0, 33, 34], "powerchannel": [0, 8], "powerlin": 32, "powerline_cycl": [92, 93], "powermet": [17, 52], "pp": [91, 107, 108], "ppi": 1, "pprint": [22, 91, 107, 108, 115], "practic": 71, "practis": 111, "pre_str": 34, "pre_trigger_": 39, "pre_trigger_sampl": 39, "preamplifi": 47, "precis": [19, 35, 84, 130], "precisionmotorchannel": [0, 19], "prefac": 31, "prefer": 72, "prefix": [15, 29], "premad": 29, "prepar": [102, 135, 136], "prepare_trac": [0, 11], "preprocessor": 1, "prescal": [22, 75, 76], "prescale_config": 47, "prescale_map": [0, 47], "prescaler_1gsa": [75, 76], "prescaler_200msa": [75, 76], "prescaler_50msa": [75, 76], "present": [6, 7, 24, 32, 47, 82, 86, 115], "preset": [0, 6, 7, 15], "press": 36, "pressur": [10, 31, 64], "pressure_compressor_inlet": 64, "pressure_compressor_outlet": 64, "pressure_condensation_lin": 85, "pressure_forepump_back": 85, "pressure_mixture_tank": [64, 85], "pressure_vacuum_can": 64, "pressure_venting_lin": 64, "pretrigg": 44, "pretrigger_mems": 44, "pretrigger_s": 44, "pretti": [29, 32, 80, 86], "prettyprint": [91, 107, 108], "prevent": 35, "previou": [30, 32, 75, 76, 86], "previous": 34, "print": [5, 9, 15, 22, 27, 32, 40, 44, 53, 59, 60, 61, 62, 63, 64, 68, 69, 70, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 93, 94, 96, 98, 101, 102, 104, 111, 112, 113, 114, 116, 118, 120, 122, 126, 127, 129, 130, 131, 132, 135], "print_dac_voltag": [0, 9], "print_overview": [0, 32, 86], "print_pyvisa_resourc": [0, 15, 68], "print_readable_snapshot": [15, 61, 65, 66, 67, 68, 71, 74, 78, 79, 81, 82, 84, 115, 116, 117, 118, 123, 124, 131], "print_slop": [0, 32, 86], "print_sync": [0, 32, 86], "prior": [7, 47], "privat": [0, 19, 37, 48, 52], "privileg": 1, "prm1z8": [0, 53, 135, 136], "prmz1z8": 52, "prob": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "probabl": [75, 76, 111], "probe_flag": 46, "problem": [44, 111], "proce": 111, "procedur": 43, "process": [0, 44, 45, 48, 84, 107, 122], "produc": [82, 84, 98], "product": [14, 22, 25, 28, 37, 47, 76], "product_serial_numb": [0, 42], "productdescript": [0, 46], "profil": 55, "program": [7, 29, 57, 75, 76, 111, 117, 125], "programm": [21, 36], "progress": 83, "progressbar": 25, "proper": [13, 35, 37], "properli": [48, 50, 132, 135], "properti": [1, 6, 19, 22, 29, 32, 41, 44, 48, 49, 71, 83, 122], "proprietari": [31, 111], "props_get": 120, "protect": [34, 35, 86], "proteox": [0, 135, 136], "protocol": [35, 84], "provid": [5, 6, 7, 15, 22, 27, 29, 31, 32, 37, 43, 44, 47, 48, 50, 57, 61, 63, 81, 84, 86, 122, 130], "provok": 86, "proxi": [49, 122], "ps_1": [112, 113], "psa": 59, "psd": 2, "psd_averaging_count": 39, "psd_averaging_typ": 39, "psd_weight": 39, "psd_window_typ": 39, "pseudo": 108, "psu": [13, 31], "pt": [41, 75, 76], "pt1_head_temperatur": 84, "pt1_plate_temperatur": 84, "pt2_head_temperatur": 84, "pt2_plate_temperatur": 84, "publish": [0, 31, 43], "pul": 86, "pull": 115, "pulm": 37, "puls": [14, 15, 22, 32, 34, 37, 87, 110, 123, 135], "pulse_delay1": 123, "pulse_delay2": 123, "pulse_dur": [0, 33, 34], "pulse_duty_cycle1": 123, "pulse_duty_cycle2": 123, "pulse_hold1": 123, "pulse_hold2": 123, "pulse_logging_init": [0, 33, 34], "pulse_mod_en": 82, "pulse_numb": 34, "pulse_pause_": 39, "pulse_period1": 123, "pulse_period2": 123, "pulse_r": 14, "pulse_rate_max": 14, "pulse_trans_lead1": 123, "pulse_trans_lead2": 123, "pulse_trans_trail1": 123, "pulse_trans_trail2": 123, "pulse_width": 14, "pulse_width1": 123, "pulse_width2": 123, "pulse_width_": 39, "pulse_width_max": 14, "pulsegener": [0, 37], "pulsemodul": [0, 37], "pump": 10, "purpos": [11, 43, 50, 55, 86, 115], "push": 47, "put": [31, 32], "putput": 32, "pwm_duty_deviation1": 123, "pwm_duty_deviation2": 123, "pwm_internal_efile1": 123, "pwm_internal_efile2": 123, "pwm_internal_freq1": 123, "pwm_internal_freq2": 123, "pwm_internal_function1": 123, "pwm_internal_function2": 123, "pwm_internal_source1": 123, "pwm_internal_source2": 123, "pwm_state1": 123, "pwm_state2": 123, "pwrst": [0, 46], "pxi": [22, 29, 75, 76, 81], "pxi1": [75, 76], "pxi1slot2": 29, "pxi_clk10": 22, "pxi_en": [0, 42], "pxi_lin": [0, 42], "pxi_trigg": 22, "pxie": [21, 22, 29, 82, 135, 136], "pxie5654": 82, "pxie_2597": [0, 81], "pxie_5654": [0, 82], "py": [6, 29, 37, 68, 70, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 122, 125], "py_head": [0, 44], "pylablib": 25, "pyplot": [61, 74, 76, 92, 93, 98, 102, 119, 123], "pyseri": [6, 107], "pyspcm": 44, "python": [1, 2, 7, 9, 10, 11, 22, 29, 31, 35, 42, 44, 48, 50, 68, 75, 76, 81, 84, 107, 108, 111, 122, 125], "python3": 107, "python38": 125, "pytifi": [0, 44, 45], "pyusb": 68, "pyvisa": [15, 56, 68, 106, 107, 110, 111, 133, 135, 136], "q": [11, 37], "q38": 68, "q_bia": [0, 37], "q_offset": [0, 37], "qblox": [15, 68], "qc": [59, 64, 65, 66, 67, 73, 74, 78, 79, 84, 85, 111, 112, 113, 117, 118, 119, 125, 127, 131, 132, 133], "qcl": 14, "qcode": [1, 2, 3, 4, 6, 9, 10, 11, 14, 15, 16, 18, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 42, 43, 47, 48, 50, 52, 53, 55, 56, 57, 58, 59, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 85, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 108, 110, 115, 117, 118, 119, 133, 135], "qcodes_contrib_driv": [59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "qcodes_driv": [0, 33], "qcodesfork": 70, "qdac": [0, 26, 32, 49, 92, 110, 135], "qdac1": [0, 86, 93, 102], "qdac1_addr": [93, 102], "qdac2": [0, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107], "qdac2_addr": [93, 102], "qdac2_arrai": [0, 93, 102], "qdac2channel": [0, 32], "qdac2externaltrigg": [0, 32], "qdac2trigger_context": [0, 32], "qdac_1": [93, 102], "qdac_2": [93, 102], "qdac_addr": [88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105], "qdac_nam": [0, 32], "qdacchannel": [0, 32], "qdacmultichannelparamet": [0, 32], "qdevil": [0, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 135, 136], "qdevil_qdac": [87, 110, 135], "qphox": 0, "qswitch": [0, 110, 135], "qswitch_addr": [107, 108], "qtwork": 35, "quad": 7, "quadratur": [0, 6, 7, 134], "qualnam": [7, 32, 41, 52, 53], "quantis": 35, "quantiti": [50, 71, 125], "quantum": [43, 107, 108, 135, 136], "qubit": 81, "qucod": 57, "quench": 135, "quench_current_step_limit": 78, "quench_detect": 78, "queri": [0, 6, 13, 26, 29, 30, 32, 37, 47, 49, 65, 83, 86, 96, 111, 132, 135], "query_lin": [0, 33, 34], "question": [9, 21], "queu": 22, "queue": [22, 32, 84], "quickli": 115, "qutech": 0, "r": [31, 37, 47, 48, 57, 70, 72, 74, 75, 76, 84, 115, 118, 120, 131, 134, 135, 136], "r573423600": 34, "r583423141": 34, "r6": 130, "r_3136b_1": 111, "r_3136b_1_level": 111, "r_dbm": [47, 115], "r_dbm_offset": 115, "r_v": [47, 115], "r_v_offset": 115, "ra": 15, "rack": 35, "rad": [11, 37, 65], "rad_to_deg": [0, 21], "radar": 114, "rai": 61, "rais": [1, 4, 6, 7, 19, 22, 25, 29, 30, 32, 35, 47, 51, 57, 75, 76, 92, 93, 114, 125, 130], "raise_except": 19, "raise_value_mismatch": [0, 33, 34], "raiseexc": 47, "ram": 22, "ramp": [9, 13, 15, 19, 23, 32, 73, 84, 87, 110, 111, 135], "ramp_seg": 78, "ramp_segments_en": 23, "ramp_slop": 73, "ramp_up": [0, 25], "ramp_voltag": [0, 32, 86], "ramp_voltages_2d": [0, 32, 86], "ramping_st": 78, "ramptim": 32, "rang": [1, 6, 7, 9, 14, 16, 22, 29, 30, 32, 35, 36, 37, 44, 50, 57, 70, 73, 75, 76, 77, 79, 80, 83, 87, 90, 110, 114, 119, 120, 123, 130, 135], "rat": [37, 114], "rate": [13, 14, 17, 19, 22, 23, 29, 32, 35, 44, 47, 48, 52, 79, 80, 84, 86, 115, 122, 123, 135], "rate_0": 67, "rate_1": 67, "rate_2": 67, "rate_3": 67, "rate_4": 67, "rather": 13, "ratio": [0, 37], "ratio_mod": 115, "ration": 114, "raw": [15, 29, 35, 47, 59, 61, 65, 71, 72, 74, 79, 84, 85, 98, 111, 117, 118], "raw_nam": 29, "raw_valu": 125, "rawdata": 47, "rc": 133, "rd": 15, "re": [0, 6, 7, 41, 44, 74, 86, 123, 125], "reach": [6, 7, 9, 25, 43, 47, 53, 67, 78, 126], "reachabl": [7, 31], "read": [0, 1, 4, 6, 7, 11, 15, 22, 23, 29, 31, 32, 33, 34, 35, 37, 44, 47, 50, 61, 62, 67, 71, 76, 78, 84, 87, 110, 113, 114, 116, 118, 125, 126, 127, 135, 136], "read_buff": [0, 33, 34], "read_current_a": 105, "read_dc": [0, 23, 24, 79], "read_dc_rel": [0, 23, 24], "read_fpga": [0, 21, 22], "read_fpga_arrai": [0, 21, 22], "read_frequ": [0, 23, 24], "read_i": [0, 23, 24], "read_lia_dc": [0, 23, 24], "read_lin": [0, 33, 34], "read_mod": 61, "read_npeak": [0, 23, 24], "read_pin": [0, 1], "read_port": [0, 1], "read_ppeak": [0, 23, 24], "read_ptpeak": [0, 23, 24], "read_r": [0, 23, 24], "read_raw": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "read_rm": [0, 23, 24], "read_rms_rel": [0, 23, 24], "read_termin": 96, "read_theta": [0, 23, 24], "read_timeout": 76, "read_x": [0, 23, 24], "readabl": [15, 84], "readdon": 76, "readi": [11, 22, 44, 83, 115], "readonli": [6, 37], "readout": [32, 44, 50, 115, 135], "readpoint": 76, "readthedoc": [29, 80], "real": [6, 22, 37, 47], "realli": 123, "rear": 125, "reason": [6, 37, 78, 111, 132], "recal": [0, 50], "recalibr": [53, 126], "receiv": [15, 22, 27, 32, 47, 48, 49, 114], "recent": [125, 133], "reciev": 84, "reclaim": 32, "recogn": 117, "recommend": [13, 57], "reconnect": [0, 33, 34], "record": [32, 34, 44, 47, 84, 87, 107, 110, 135], "recov": 86, "recoveri": [4, 135, 136], "reduc": [22, 75, 76, 130], "ref": [15, 71, 136], "ref_1": [21, 22], "ref_100_pll_ld": [0, 42], "ref_10_pll_ld": [0, 42], "ref_2": 22, "ref_3": 22, "ref_lock": 71, "ref_osc_sourc": [0, 15, 68, 123], "ref_out_select": [0, 42], "refenc": 29, "refer": [6, 7, 13, 15, 22, 29, 32, 35, 48, 54, 68, 70, 75, 76, 86, 118, 136], "refer_to_api_doc": [0, 48, 49], "referenc": 57, "reference_level": 70, "reference_sourc": 115, "reference_tcxo_ocxo": [0, 15, 68], "refriger": 31, "reg": [0, 44], "reg_nam": 22, "regard": 71, "regardless": [6, 22, 82], "regexp": 13, "regist": [7, 10, 22, 29, 31, 44, 47, 48, 49, 86], "register_external_ip": [0, 6, 7], "register_measur": [0, 48, 49, 122], "register_paramet": [65, 79, 86, 119, 133], "registermeasur": 49, "registr": 133, "regul": 60, "reimplement": 4, "reimplementaion": 4, "rel": [6, 7, 24, 30, 48, 83], "relai": [32, 108], "relat": [22, 37], "relative_limit": 39, "releas": [0, 21, 22, 46], "release_al": [0, 21, 22], "release_waveform_memori": [0, 21, 22], "relev": [47, 50], "reli": 14, "reload_waveform": [0, 21, 22], "reload_waveform_int16": [0, 21, 22], "rem": 96, "remain": [4, 32], "rememb": 32, "remot": [0, 8, 31, 35, 47, 65, 136], "remov": [4, 22, 32, 35, 48, 50, 61, 69, 86, 118, 122, 133], "remove_all_measur": [0, 48, 122], "remove_all_virtual_channel": [0, 48, 122], "remove_trac": [0, 32, 88], "renam": 136, "rep": 50, "repeat": [22, 63, 69, 96, 104, 116, 123, 128, 129], "repetit": [32, 37, 50, 75, 76, 88, 94, 96, 97, 99, 100, 101, 103, 104, 123], "replac": [22, 37, 57, 86], "repli": [2, 11, 34, 50], "replug": 111, "report": [37, 132], "repositori": [135, 136], "repres": [14, 27, 28, 29, 30, 37, 43, 47, 49, 52, 72, 75, 76, 83, 134], "represent": [1, 6, 32, 37], "reproduc": 122, "request": [6, 22, 35, 37, 47, 127], "request32": [0, 19, 20], "requested_waveform_size_limit": 22, "requir": [1, 6, 7, 11, 14, 15, 22, 27, 29, 32, 34, 35, 37, 48, 55, 57, 64, 68, 71, 84, 127, 131], "required_paramet": 49, "research": [47, 115], "resend": 50, "resend_waveform": [0, 50], "reserv": [22, 32, 115], "reset": [0, 7, 11, 15, 22, 29, 30, 32, 33, 34, 35, 36, 37, 41, 44, 47, 50, 70, 83, 87, 88, 89, 90, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 115, 135], "reset_averag": [0, 11], "reset_channel_phas": [0, 21, 22], "reset_clock_phas": [0, 21, 22], "reset_cmd": [0, 33, 34], "reset_delai": [0, 30], "reset_devic": 29, "reset_edit_memori": [0, 50], "reset_modul": [0, 47], "reset_multiple_channel_phas": [0, 21, 22], "reset_ocp": [0, 33, 34], "reset_output_supervisor": [0, 33, 34], "reset_posit": [0, 6, 7], "reset_sign": 120, "reset_to_default": [0, 23, 24], "reset_voltag": 35, "resetsign": 39, "reshap": 98, "resid": [75, 76], "resist": [24, 32, 34, 50, 92, 93, 125, 135, 136], "resistance_4w": 125, "resistor": [92, 93, 135, 136], "resolut": [0, 7, 35, 70, 84, 130], "resolution_bandwidth": [59, 70], "resolv": 7, "resourc": [1, 5, 6, 9, 18, 19, 22, 28, 29, 32, 36, 37, 40, 47, 48, 52, 53, 55, 56, 81, 82, 135], "resourcemanag": [96, 107], "respect": [1, 7, 22, 43, 48, 50, 55, 86, 131], "respond": 132, "respons": [1, 4, 5, 6, 8, 11, 14, 15, 17, 19, 21, 25, 26, 29, 30, 32, 34, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 84, 111], "ressourc": 18, "restart": [44, 68, 86, 108, 111], "restor": [22, 108], "restrict": [6, 43, 115], "restyp": 29, "result": [0, 6, 7, 21, 22, 30, 32, 35, 37, 44, 48, 70, 80, 84, 87, 110, 111, 115, 135], "result_pars": [0, 21, 22], "resum": 22, "retr": 37, "retrac": [0, 37], "retriev": [7, 15, 22, 31, 32, 37, 44, 130, 135], "retrieve_data": [0, 44], "retun": [6, 37], "retur": [23, 50], "return": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 75, 76, 81, 83, 86, 115, 118, 122, 124, 125], "return_self": [0, 50], "return_to_start": [0, 42], "returndebuginfo": [0, 39], "returninfo": 39, "returnvalu": 37, "reus": [22, 97], "reusabl": 22, "reuseaddr": 47, "rev": 52, "rev_id": 130, "revers": [0, 19, 32, 52, 53, 72], "revert": 82, "rewrit": 4, "rewritten": [4, 118], "rf": [15, 18, 29, 35, 37, 65, 111, 132, 135, 136], "rf1_lock_mod": [0, 42], "rf1_loop_gain": [0, 42], "rf_center_frequ": 59, "rf_mode": [0, 42, 117], "rf_phase_offset": [0, 42], "rf_power": 133, "rf_sourc": 71, "rf_source_ch1": 71, "rf_source_ch2": 71, "rf_switch": 81, "rfoutput": 15, "rfsg": [0, 135, 136], "rfsgdocument": 29, "rfspectrumanalyz": [0, 37], "rho": 84, "ride": 86, "right": [43, 68, 135], "right_diod": 105, "rigol": [0, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 135, 136], "rigol_addr": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "rigol_dp932": 0, "rigol_dsg3136b": [0, 111], "rigol_dsg3136b_demo_db": 111, "rigol_dsg3136b_demo_experi": 111, "rigoldp932": [0, 36], "rigolds1074z": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "rigoldsg3136b": [0, 36, 111], "ring": 22, "rise": [0, 6, 7, 22, 37], "rm": [24, 37, 79, 96, 107], "rohd": [37, 112, 113, 114, 135, 136], "rohdeschwarz": [0, 112, 113, 114, 133], "rohdeschwarz_smb100a": [0, 37], "rohdeschwarz_smr40": [0, 37], "rohdeschwarz_smw200a": [0, 37, 114], "rohdeschwarzhmc8041": [0, 37], "rohdeschwarzhmc8042": [0, 37], "rohdeschwarzhmc8043": [0, 37, 112], "rohdeschwarzhmc804xchannel": [0, 37, 38], "rohdeschwarzhmp4030": [0, 37], "rohdeschwarzhmp4040": [0, 37, 113], "rohdeschwarzhmpchannel": [0, 37, 38], "rohe": [135, 136], "roll": [0, 48], "ron": 50, "room": 34, "root": 50, "root_instru": [43, 55], "rotat": [0, 6, 7, 19, 52, 53, 83, 135], "rotate_nvalv": [0, 31], "rotationdirect": [0, 52], "round": [35, 84], "round_dac": [0, 35], "rout": [7, 32], "router": 7, "routin": [6, 47, 111], "row": [32, 43], "rowindex": 39, "rs232": 31, "rs232linkformat": 35, "rs_smw200a": 37, "rssi": 15, "rst": [52, 53, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107], "rt": [34, 120], "rt_frequenc": 39, "rt_oversampl": 39, "rt_signals_": 39, "rtime": [23, 79], "rubric": 21, "run": [0, 1, 6, 7, 11, 15, 21, 22, 25, 32, 37, 43, 47, 49, 51, 57, 62, 65, 70, 75, 76, 82, 84, 86, 88, 90, 94, 95, 96, 99, 100, 101, 103, 105, 115, 118, 119, 123, 132, 133, 135, 136], "run_contin": [0, 11], "run_hour": 25, "run_id": [65, 86, 133], "run_n_tim": [0, 11], "run_self_test": [0, 15, 21, 22, 37, 68], "run_to_field": [0, 31], "run_to_field_wait": [0, 31], "runn": 37, "runtimeerror": [4, 6, 114, 122, 125], "ruo2": 31, "s0": 15, "s1": 79, "s11": [11, 65, 133], "s12": [11, 65], "s21": [11, 65], "s22": [11, 65], "s2vn": 65, "s3": 135, "s4": 15, "s50": 28, "s5048": 0, "s5i": 0, "s_paramet": 133, "s_trace": 133, "sa": 133, "sa_mod": [0, 37], "safe": [31, 35], "safe_vers": 35, "safeti": [13, 127], "safrequencysweep": [0, 37], "same": [1, 6, 7, 22, 29, 32, 37, 44, 47, 48, 67, 71, 82, 83, 86, 102, 122, 125, 127, 134], "sampl": [0, 22, 23, 29, 35, 44, 47, 57, 70, 75, 76, 80, 84, 91, 97, 104, 111, 115, 119, 124, 133], "sample_nam": [65, 84, 111, 118, 119, 133], "sample_r": 22, "sample_rate_per_channel": 80, "samples_numb": 124, "samples_to_read": [29, 80], "samplitud": [23, 79], "san": 133, "sandpit": 111, "sanu": 41, "sara": 41, "sarah": 37, "satisfi": 68, "save": [0, 5, 6, 7, 32, 41, 47, 50, 55, 59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117, 133, 135], "save_base_nam": 120, "save_dialog": 39, "save_dialog_box": 120, "save_param": [0, 6, 7], "save_sess": 39, "save_session_layout": 39, "save_session_set": 39, "save_set": [0, 47, 55, 131], "save_sign": 39, "save_switch_st": [0, 33, 34], "save_trac": 133, "saveal": 39, "savebasenam": 39, "savedata": 39, "savedialogbox": 39, "sawt": 37, "sawtooth": [6, 7, 37, 75, 76], "sawtooth_2u": [75, 76], "sawtooth_2us_awg1": [75, 76], "sbench6": 44, "sc": 117, "sc5": 120, "sc5520a": [42, 117], "sc5520a_uhf": [42, 117], "sc5521a": [0, 42, 135, 136], "scal": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "scale": [0, 22, 32, 55, 88, 115, 123], "scaledparamet": 118, "scan": [6, 29, 32, 37, 50, 62, 80, 87, 106, 110, 135], "scan_lin": 80, "scan_surfac": [29, 80], "scanner": [50, 80, 125], "scatter": 133, "scc001": [0, 52, 53], "scdp_bmp_byte": [0, 41], "schouten": 35, "schwartz": [37, 114], "schwarz": [37, 112, 113, 135, 136], "scipci": [42, 117], "scope": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "scpi": [13, 32, 50, 54, 107, 108, 123], "screen": 41, "screen_dump_bmp": [0, 41], "script_autosav": [0, 39], "script_chsget": [0, 39], "script_chsset": [0, 39], "script_dataget": [0, 39], "script_deploi": [0, 39], "script_file_path": 39, "script_index": 39, "script_load": [0, 39], "script_run": [0, 39], "script_sav": [0, 39], "script_stop": [0, 39], "script_undeploi": [0, 39], "sd": [0, 22], "sd1": [22, 75, 76], "sd_ain": 76, "sd_ain_triggermod": 22, "sd_awg": [0, 21], "sd_awg_async": [0, 21], "sd_combo": 22, "sd_common": [0, 21], "sd_dig": [0, 21], "sd_digitalfiltermod": 22, "sd_error": 76, "sd_fpgatriggerdirect": 22, "sd_modul": [0, 21], "sd_queuemod": [75, 76], "sd_syncmod": 22, "sd_triggerbehavior": [75, 76], "sd_triggerexternalsourc": [22, 75, 76], "sd_triggermod": [21, 22, 75, 76], "sd_triggerpolar": 22, "sd_wave": 22, "sd_waveshap": [75, 76], "sdg": 0, "sdg_channel": 0, "sdk": 72, "sdx": 0, "search": [7, 19, 53, 136], "search_tcp": 7, "search_usb": 7, "sec": [23, 32, 67, 86], "second": [6, 7, 9, 13, 15, 22, 27, 29, 30, 31, 32, 35, 37, 47, 48, 68, 83, 84, 86, 115, 122, 134], "section": [19, 32, 93, 102], "see": [7, 15, 19, 29, 30, 32, 35, 37, 44, 48, 49, 50, 68, 71, 78, 80, 82, 83, 86, 102, 107, 111, 122, 123, 132], "seem": [44, 111, 132], "seen": 133, "seg_siz": 44, "segment": [7, 23, 44], "segments_mod": 39, "select": [6, 7, 19, 22, 30, 34, 37, 43, 51, 72, 116], "select_actu": [0, 6, 7], "select_and_puls": [0, 33, 34], "select_output_channel": [0, 33, 34], "select_switch_model": [0, 33, 34], "self": [6, 15, 18, 19, 22, 25, 29, 31, 32, 37, 43, 47, 48, 50, 51, 56, 115, 125, 135], "self_calibr": [0, 47, 50], "self_test": [0, 47, 50], "sell": 43, "semicolon": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "sen": 37, "send": [0, 6, 15, 20, 25, 30, 31, 32, 35, 43, 47, 50, 51, 82, 115], "send_cmd": [0, 37, 38], "send_messag": [0, 26], "send_pattern": [0, 50], "send_puls": [0, 33, 34], "send_sequ": [0, 50], "send_sequence2": [0, 50], "send_trigg": 115, "send_waveform": [0, 50], "sens": [24, 50, 74, 79, 81, 86, 125], "sense_autorang": 74, "sense_curr": 74, "sense_current_rang": 74, "sense_mod": 74, "sense_resist": 74, "sense_resistance_ocomp": 74, "sense_resistance_rang": 74, "sense_voltag": 74, "sense_voltage_rang": 74, "sensebas": [0, 23], "sensit": [0, 37, 47, 82, 118, 135, 136], "sensitivity_value_map": [0, 47], "sensor": [7, 32, 87, 107, 108, 110, 135], "sensor1": 104, "sensorchannel": [0, 23], "sent": [4, 5, 13, 30, 31, 32, 50, 82, 84, 107], "separ": [1, 5, 6, 8, 13, 14, 15, 17, 19, 20, 21, 25, 26, 29, 30, 31, 32, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 57, 83], "seq": 50, "sequecn": 50, "sequenc": [6, 7, 14, 26, 29, 32, 48, 49, 50, 57], "sequence_program": 57, "sequenti": [22, 43], "seri": [16, 22, 48, 50, 71, 111, 135, 136], "serial": [0, 1, 4, 5, 6, 7, 8, 13, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 35, 40, 42, 44, 47, 48, 51, 52, 53, 55, 56, 59, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 77, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132], "serial_num": 131, "serial_numb": [0, 5, 22, 40, 52, 53, 55, 70, 127], "serialnumb": 72, "seriesnam": 39, "serv": [15, 16], "server": [19, 52, 53, 57, 65, 84, 126, 127, 128, 129], "server32": 20, "server_nam": 44, "servo": 52, "session": [29, 57, 59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117], "set": [1, 5, 6, 7, 9, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 29, 31, 32, 34, 35, 36, 37, 40, 43, 44, 47, 48, 49, 50, 52, 53, 55, 57, 61, 62, 65, 66, 71, 72, 74, 75, 76, 77, 78, 81, 82, 84, 87, 110, 112, 113, 114, 115, 116, 118, 119, 122, 123, 126, 128, 129, 130, 132, 133, 134, 135, 136], "set_accumulation_cycle_tim": [0, 5], "set_acquisition_mod": [0, 5], "set_address": [0, 6, 18, 37], "set_amplitud": [0, 6, 7], "set_amplitude_control_mod": 7, "set_analog_trigger_mask": [0, 21, 22], "set_asynchron": [0, 21, 22], "set_attribut": [0, 29], "set_axis_output": [0, 6, 7], "set_baud_r": [0, 19], "set_before_sweep": 105, "set_bias_curr": [0, 43], "set_channel_amplitud": [0, 21, 22, 75, 76], "set_channel_frequ": [0, 21, 22], "set_channel_group": [0, 57], "set_channel_offset": [0, 21, 22, 75, 76], "set_channel_or_trigger_set": [0, 44], "set_channel_phas": [0, 21, 22], "set_channel_set": [0, 44], "set_channel_wave_shap": [0, 21, 22, 75, 76], "set_clksys_frequ": [0, 21, 22], "set_clock_frequ": [0, 21, 22], "set_cmd": [5, 6, 11, 15, 19, 25, 29, 47, 48, 49, 51, 56, 84], "set_coupl": [0, 21, 22], "set_curr": [0, 36, 112, 113], "set_current_camera": [0, 5], "set_current_folder_nam": [0, 50], "set_dac_unit": [0, 35], "set_dacs_zero": [0, 9, 35], "set_daq_trigger_delai": [0, 21, 22], "set_daq_trigger_mod": [0, 21, 22], "set_dark_counts_auto_iv": [0, 43], "set_dc_voltag": [0, 6, 7], "set_default": [0, 50], "set_digital_filter_mod": [0, 21, 22], "set_digital_trigger_mod": [0, 21, 22], "set_digital_trigger_sourc": [0, 21, 22], "set_exposure_tim": [0, 5], "set_ext0_or_trigger_set": [0, 44], "set_ext_trig": [0, 37], "set_ext_trigger_behaviour": [0, 21, 22], "set_ext_trigger_sourc": [0, 21, 22], "set_external_step_input_edg": 7, "set_field": [0, 23, 78], "set_filter_mod": [0, 5], "set_fpga_pc_port": [0, 21, 22], "set_frequ": [0, 6, 7], "set_full_scal": [0, 21, 22], "set_fw_upgrade_mod": [0, 33, 34], "set_grat": [0, 40], "set_hvi_regist": [0, 21, 22], "set_id": [0, 19], "set_imped": [0, 21, 22], "set_ini_param": [0, 19], "set_input_delai": [0, 48], "set_input_trigger_mod": 7, "set_ip": [0, 33, 34], "set_iq_modul": [0, 21, 22], "set_jumpmod": [0, 50], "set_label": [92, 93, 98], "set_magnet_st": [0, 31], "set_magnet_target": [0, 31, 84], "set_magnetic_field_z": 84, "set_marker_config": [0, 21, 22], "set_measurement_period": [0, 43], "set_mix_chamber_heater_mod": [0, 31], "set_mix_chamber_heater_power_rang": [0, 31], "set_mixing_chamber_temperatur": 84, "set_mod": [0, 50], "set_mode_volt_dc": [0, 50], "set_n_cycl": [0, 21, 22], "set_n_point": [0, 21, 22], "set_number_accumul": [0, 5], "set_number_pixel": [0, 40], "set_ocp_ma": [0, 33, 34], "set_output_current_target": [0, 31], "set_output_st": [0, 36], "set_output_trigger_mod": 7, "set_output_voltag": [0, 33, 34], "set_parameter_bound": [0, 35], "set_pars": [15, 19, 25, 48], "set_persist": [0, 31], "set_pixel_width": [0, 40], "set_points_per_cycl": [0, 21, 22], "set_pol_dacrack": [0, 35], "set_prescal": [0, 21, 22], "set_pulse_duration_m": [0, 33, 34], "set_pulse_paramet": [0, 14], "set_pxi_trigg": [0, 21, 22, 75, 76], "set_raw": [0, 5, 6, 16, 29, 31, 47, 55], "set_read_mod": [0, 5], "set_remote_statu": [0, 31], "set_sampling_frequency_khz": [0, 33, 34], "set_sequ": [0, 50], "set_setup": [0, 19], "set_setup_filenam": [0, 50], "set_shutt": [0, 5], "set_side_effect": [48, 49], "set_slit": [0, 40], "set_smooth": [0, 47], "set_sub_net_mask": [0, 33, 34], "set_sweep": [0, 11, 37], "set_sweep_paramet": [0, 47, 115], "set_target_ground": [0, 6, 7], "set_target_posit": [0, 6, 7], "set_target_rang": [0, 6, 7], "set_temp_and_wait": [0, 28], "set_temperatur": [0, 5, 61], "set_test_sign": [0, 48, 122], "set_timeout": [0, 19, 21, 22], "set_to_fast": [0, 31], "set_to_fft": [0, 41], "set_to_slow": [0, 31], "set_trig_mod": [0, 41], "set_trigger_immedi": [0, 50], "set_trigger_io": [0, 21, 22], "set_trigger_level": [0, 43, 48], "set_trigger_mod": [0, 5, 21, 22], "set_trigger_polar": 7, "set_trigger_threshold": [0, 21, 22], "set_v": 86, "set_valu": 29, "set_virtual_voltag": [0, 32, 92, 93, 104], "set_voltag": [0, 36, 47, 50, 112, 113], "set_waveform_limit": [0, 21, 22], "set_waveform_setup": [0, 41], "set_wavelength": [0, 40], "set_xlabel": 98, "set_xtick": [92, 93], "set_ylabel": 98, "set_ytick": [92, 93], "set_zero_offset": [0, 17, 69], "setinputdelai": 48, "setlevel": [75, 76], "setpoint": [6, 11, 23, 25, 28, 43, 47, 48, 50, 77, 79, 81, 86, 115], "setpoint_label": [6, 65], "setpoint_nam": [6, 65], "setpoint_unit": 6, "settabl": [15, 29, 37, 71], "setter": 25, "setter_instr": 111, "settestsign": 48, "settings_file_path": 39, "settings_nam": 39, "settingsonli": 57, "settl": [86, 120], "settling_period": 39, "settling_tim": 39, "settling_time_m": 120, "settlingtim": 39, "settriggerlevel": 48, "setup": [5, 19, 41, 44, 61, 75, 76, 83, 86, 115, 135, 136], "setup_multi_record": [0, 44], "seven": 86, "sever": [7, 29, 31, 32, 86], "sfrequenc": 23, "sg_1": [111, 132], "shall": 43, "shallow": 32, "shamrock": [0, 135, 136], "shamrock_sr750": [0, 40, 116], "shamrockcif": [0, 40], "shap": 37, "shape": [0, 6, 11, 22, 29, 32, 37, 48, 49, 79, 80, 115], "shape_duty_cycl": [0, 37], "shape_period": [0, 37], "shape_width": [0, 37], "share": [7, 22, 75, 76], "shell": 22, "shift": 72, "ship": 72, "shore": 79, "short": [47, 76, 86], "short_nam": 81, "shortest": 37, "shot": [22, 32, 47], "should": [1, 5, 6, 13, 18, 19, 22, 25, 29, 30, 31, 37, 40, 43, 47, 48, 50, 51, 55, 56, 57, 71, 72, 76, 78, 81, 82, 84, 86, 111, 112, 113, 115, 131, 132, 136], "show": [25, 76, 82, 84, 86, 92, 93, 119, 127, 136], "show_progress": [25, 84, 105, 111], "show_psd_sect": 39, "show_system_info": [0, 23, 79], "shown": [6, 37, 84, 115, 127], "shut": 86, "shut_down": [0, 5], "shutdown": 133, "shutter": 25, "shutter_mod": 61, "shutter_statu": 25, "side": [19, 48, 49, 72], "siglent": 0, "siglent_sdg_2042x": [0, 41], "siglent_sdg_20xx": [0, 41], "siglent_sdg_6022x": [0, 41], "siglent_sdg_60xx": [0, 41], "siglent_sds_120nx": [0, 41], "siglentchannel": [0, 41], "siglentsdgchannel": [0, 41], "siglentsdgx": [0, 41], "siglentsdx": [0, 41], "sign": 6, "signadyn": 22, "signal": [4, 6, 7, 15, 16, 21, 22, 29, 36, 37, 39, 42, 44, 47, 56, 57, 75, 86, 111, 114, 122, 132, 134, 135, 136], "signal2": 39, "signal_1": 39, "signal_2": 39, "signal_index": 39, "signalcor": [0, 117], "signalrecovery7270": [0, 4, 118], "signals_addrtget": [0, 39, 120], "signals_addrtset": [0, 39, 120], "signals_calibrget": [0, 39, 120], "signals_measnamesget": [0, 39, 120], "signals_namesget": [0, 39, 120], "signals_rangeget": [0, 39, 120], "signalsaddrt_get": 120, "signalscalibr_get": 120, "signalsmeasnames_get": 120, "signalsnames_get": 120, "signalsrange_get": 120, "signatur": [1, 29], "signific": 32, "sigout": [57, 134], "sigout1": 134, "sigout_amplitude0": 134, "sigout_rang": 134, "silent": 57, "silimit": 23, "sim": [47, 127, 136], "sim900": 47, "sim928": 0, "similar": [31, 35, 50], "similarli": [65, 86], "simpl": [9, 16, 32, 44, 60, 80, 84, 115, 119, 135], "simpli": [22, 48, 83, 115], "simul": [6, 37, 52, 55], "simulaten": 6, "simultan": [6, 22, 32, 57, 80, 87, 110, 115, 135], "simutan": 86, "sin": [75, 76, 88, 123], "sinc": [4, 20, 29, 31, 48, 49, 50, 72, 78], "sine": [0, 15, 32, 37, 68, 75, 76, 95, 106, 110, 135], "sine_awg2": [75, 76], "sine_context": [0, 32], "sine_wav": [0, 32, 95, 99], "sing": [37, 88, 89, 90, 94, 97, 99, 100, 101, 102, 103, 104, 111], "singl": [0, 1, 6, 7, 9, 11, 13, 22, 27, 31, 32, 37, 41, 43, 44, 47, 48, 57, 70, 78, 84, 87, 107, 108, 110, 134, 135, 136], "single_ext_fal": 47, "single_ext_ris": 47, "single_software_trigger_acquisit": [0, 44], "single_software_trigger_acquisition_boxcar": [0, 44], "single_step": [0, 6], "single_ton": 117, "single_trigger_acquisit": [0, 44], "singlequantum": [0, 119], "sinusoid": [22, 79], "site": [68, 70, 125], "situat": [86, 107], "six": [1, 27, 86], "size": [0, 5, 6, 9, 22, 32, 34, 35, 37, 44, 47, 48, 50, 76, 83, 96, 119, 130, 133], "skew": 22, "skip": [26, 32, 49, 86], "sleep": [35, 73, 79, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 115, 120, 126], "slew": [32, 37], "slew_rat": 39, "slew_v_": [32, 99, 100, 103], "slice": 86, "slightli": 13, "slit": [19, 72, 116], "slit1": [19, 72], "slit2": 72, "slit_entr": 72, "slit_exit": 72, "slitchannel": [0, 19, 72], "slitnumb": 72, "slope": [32, 86, 90], "slot": [21, 22, 47, 75, 76, 123], "slot_in": 76, "slot_nam": 47, "slow": [26, 30, 31, 32, 49, 83, 86], "slow_chan": [32, 86], "slow_command_timeout": [0, 30], "slow_step": [32, 86], "slow_trigg": 97, "slow_vend": [32, 86], "slow_vstart": [32, 86], "small": [1, 11, 29, 86], "smaller": [7, 22, 35, 47], "smallest": [22, 44], "smart": [8, 34], "smart_connect": [0, 33, 34], "smartli": 34, "smb100a": 0, "smo": 37, "smooth": [37, 87, 110, 135], "smooth_timestep": 47, "smoothli": [32, 47], "smr40": 0, "sms120c": 13, "sms60c": 13, "smu": [50, 135, 136], "smw": [37, 114], "smw200a": [0, 135, 136], "smw200asim": 0, "sn": [6, 34], "sn04": 73, "snake_cas": 48, "snap": [0, 47, 115], "snap_paramet": [0, 47, 115], "snapshot": [0, 15, 26, 32, 47, 49, 57, 68, 84, 135], "snapshot_bas": [0, 26, 32, 48, 49, 57], "snapshot_exclud": 6, "snapshot_get": [6, 26, 32, 49, 51], "snapshot_valu": 6, "snspd": [135, 136], "so": [1, 5, 6, 8, 11, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 47, 48, 51, 52, 55, 56, 57, 80, 86, 108, 111, 115, 122, 123, 126, 132], "socat": 47, "socket": [8, 71, 79, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 120, 130, 135], "soffset": 23, "softwar": [22, 32, 43, 50, 57, 65, 72, 84, 117, 127, 134], "software_pag": 127, "sole": 49, "solenoid": 84, "solsti": 26, "solut": 14, "som": 70, "some": [5, 6, 7, 13, 15, 29, 44, 47, 61, 68, 75, 76, 82, 84, 86, 107, 114], "some_sampl": [79, 115], "someon": 1, "someth": [29, 32, 47, 107], "sometim": [44, 111], "sorb_temperatur": 84, "sort": 32, "sort_dict": 22, "sour": [37, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 114], "sour1": [37, 114], "sour2": [37, 91], "sour3": 91, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 69, 71, 73, 74, 79, 82, 114, 135, 136], "source_curr": 74, "source_current_compli": 74, "source_current_compliance_trip": 74, "source_current_rang": 74, "source_delai": 74, "source_delay_auto": 74, "source_from_trigg": [88, 94, 99, 103], "source_mod": 74, "source_path": [0, 37], "source_voltag": 74, "source_voltage_compli": 74, "source_voltage_compliance_trip": 74, "source_voltage_rang": 74, "sourcebas": [0, 23], "sourcemet": [50, 58], "sp": 41, "sp0": 84, "sp2": [37, 114], "sp4t": 27, "sp4tmodul": [0, 27], "sp6t": 27, "sp6t_modul": 27, "sp6tmodul": [0, 27], "sp8t": 27, "sp8tmodul": [0, 27], "spac": 37, "space": [0, 32, 35, 37, 41, 57, 115], "span": [32, 35, 37, 65, 133, 135], "span_freq": 133, "span_v": [32, 99, 100, 102, 103], "spann": 35, "spanx": 35, "spc_rec_std_multi": 44, "spc_rec_std_singl": 44, "spc_tm_high": 44, "spcerr": [0, 44], "spcm0": 44, "spdt": 27, "spdtmodul": [0, 27], "spe": 72, "spec": [0, 120], "special": [15, 37], "specialis": 108, "specif": [1, 5, 6, 16, 19, 22, 29, 31, 32, 34, 35, 40, 48, 49, 55, 56, 62, 73, 82, 114], "specifi": [1, 7, 22, 24, 30, 32, 34, 35, 36, 37, 44, 47, 50, 53, 56, 71, 78, 83, 114, 130], "specifiedta": 50, "specifii": 86, "specifz": 78, "specommand": [0, 19, 20], "specommandiniparam": [0, 19, 20], "specommandsetup": [0, 19, 20], "specontrol": 19, "specontrol_dl": 72, "specs_tramea": [0, 120], "spectral": [2, 59], "spectromet": [19, 20, 40, 72, 135], "spectrum": [0, 2, 5, 11, 70, 115, 132, 135], "speed": [0, 6, 7, 19, 30], "speed_tabl": [0, 30], "speedmax": 72, "speedmin": 72, "speerror": [0, 19], "speiniparam": 20, "spent": 32, "spesetup": 20, "sphereic": 84, "spi": 35, "spi_rack": 35, "spike": 86, "spirack": 35, "split_version_string_into_compon": [0, 32], "spossibl": 86, "sprout": 25, "spur": 130, "spuriou": [15, 37], "sqcount": [0, 43], "sqtalk": [0, 43], "squar": [0, 15, 22, 32, 37, 89, 95, 102, 106, 110, 135], "square_context": [0, 32], "square_wav": [0, 32, 89, 95, 100, 102], "squid": [29, 80], "sr": [47, 115, 116, 118], "sr560": 47, "sr570": 0, "sr7270": 4, "sr750": [0, 135, 136], "sr844": [0, 115], "sr844_notebook__": 115, "sr_7270": [0, 118], "srang": 23, "src": 50, "ss": [15, 41], "ssid": 15, "ssm": 24, "sst": 91, "stabil": 86, "stabl": 84, "stable_mean": 31, "stable_std": 31, "stablilis": 84, "stage": 135, "stair": 96, "staircas": [0, 32, 86], "stamp": [43, 122], "stand": 51, "standa": [0, 135, 136], "standa_10mwa168": [0, 121], "standard": [1, 5, 6, 8, 13, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 32, 34, 35, 37, 40, 42, 43, 44, 47, 48, 51, 52, 55, 56, 84], "standard_reply_pars": [0, 33, 34], "standbi": [0, 28, 33, 34], "standford": 115, "stanford": 47, "stanford_research_system": 115, "stanfordresearchsystem": [0, 115], "star": 37, "start": [0, 1, 6, 7, 9, 11, 21, 22, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41, 44, 47, 48, 49, 50, 52, 53, 59, 61, 65, 71, 72, 75, 76, 79, 80, 82, 84, 85, 86, 88, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 111, 115, 117, 118, 122, 126, 127, 133, 135], "start1": 105, "start_acquisit": [0, 5, 44], "start_al": [0, 32, 88, 89, 95], "start_all_log": [75, 76, 79, 84, 111, 119, 133], "start_auto_mov": [0, 6, 7], "start_awg": [0, 57], "start_channel": [0, 48], "start_continuous_mov": [0, 6, 7], "start_cooldown": [0, 28], "start_delai": 22, "start_for": [0, 48, 49, 122], "start_freq": [70, 133], "start_gat": [0, 48], "start_idx": [0, 41], "start_mark": [0, 32], "start_on": [0, 32, 89, 98], "start_on_extern": [0, 32, 102], "start_once_on": [0, 32], "start_once_on_extern": [0, 32], "start_param": 49, "start_recording_scpi": [0, 32, 91, 107], "start_single_step": [0, 6, 7], "start_sweep": [0, 37], "start_sweep_trigg": 32, "start_trigg": [0, 32, 44, 102], "start_v": [0, 32, 97, 101, 104], "start_warmup": [0, 28], "startfor": 49, "startup": [0, 11, 21, 22, 32, 35, 37, 62, 86, 114], "startval": 39, "stat": [21, 37, 107, 114], "state": [0, 1, 6, 7, 11, 15, 22, 26, 27, 29, 31, 32, 34, 36, 37, 43, 48, 49, 50, 52, 59, 61, 65, 71, 72, 79, 84, 85, 86, 98, 108, 111, 112, 113, 114, 117, 122, 135], "state_a": 27, "state_b": 27, "state_force_upd": [0, 32], "state_output1": 123, "state_output2": 123, "state_to_compressed_list": [0, 32], "state_to_expanded_list": [0, 32], "statement": [35, 115], "static": [7, 15, 21, 22, 32, 47, 57], "station": [15, 22, 47, 66, 67, 75, 76, 81, 84, 86, 111, 119, 135, 136], "statist": [50, 124], "statu": [0, 6, 7, 14, 15, 21, 22, 25, 28, 31, 32, 34, 35, 37, 39, 46, 47, 50, 51, 52, 53, 68, 77, 83, 84, 115, 117, 127, 130, 135], "status": 47, "std": [31, 68], "stddev": 84, "stdev": 124, "stdlib": 1, "stdout": 44, "steadi": 32, "step": [6, 7, 9, 19, 22, 30, 32, 35, 37, 47, 50, 62, 75, 76, 83, 84, 87, 96, 97, 101, 104, 110, 111, 130, 135, 136], "step_amplitude_neg": 83, "step_delai": 83, "step_end_mark": 94, "step_length": [32, 86], "step_on_hw_trig": [0, 42], "step_start_mark": 94, "step_time_": [32, 97], "step_trigg": [32, 97, 104], "stepchannel2nam": 39, "stepchanneloneindex": 39, "stepd": 6, "stepper": [30, 31, 72], "steps_awg1": [75, 76], "stepsiz": [0, 6, 7, 35], "stepsizen": 35, "stepu": 6, "stepw": 6, "still": [10, 31, 35, 37, 83, 84, 86, 107, 127], "still_heater_off": [0, 31], "still_heater_pow": 84, "still_plate_temperatur": 84, "stop": [0, 1, 5, 6, 7, 9, 11, 19, 22, 29, 30, 32, 37, 39, 40, 41, 47, 48, 49, 50, 53, 55, 56, 62, 65, 80, 88, 89, 90, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 123, 126, 127, 133, 135], "stop1": 105, "stop_autom": [0, 28], "stop_awg": [0, 57], "stop_continuous_mov": [0, 6], "stop_freq": 70, "stop_move_wave_t": [0, 26], "stop_param": 49, "stop_v": [0, 32, 101], "stop_wave_m": [0, 26], "stopal": [0, 6], "stopmov": [0, 6, 62], "stopval": 39, "store": [7, 22, 29, 50, 52, 64, 72, 115, 123], "stp": [6, 62], "str": [2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 80, 84, 118], "str_": 39, "stream": [23, 57, 135], "stream_data": [0, 23, 79], "streamingonli": 57, "strin": 2, "string": [1, 2, 4, 5, 6, 7, 8, 11, 14, 15, 16, 17, 19, 21, 25, 26, 29, 30, 31, 32, 35, 37, 40, 42, 43, 44, 47, 48, 50, 51, 52, 55, 56, 72, 130], "stringarrai": 37, "strip": 4, "strongli": 136, "struct": 29, "structur": [7, 13, 20, 42, 46], "struggl": 84, "sub": [34, 43, 57, 84], "sub_json": [0, 43], "subclass": [1, 5, 6, 19, 25, 29, 30, 34, 37, 40, 43, 48, 51, 55, 56], "subgroup": 84, "subject": 43, "sublicens": 43, "submod": [6, 37], "submodul": [33, 62, 114, 122, 136], "subnet": 15, "subpackag": 136, "subplot": [92, 93, 98, 119], "subprocess": [31, 84], "subscrib": 57, "subscribedonli": 57, "subsequ": [7, 22], "subset": [6, 37], "substanti": 43, "subtract": [6, 32], "succe": 7, "succed": 68, "success": [5, 19, 30, 40, 53, 57], "success_cod": [0, 6, 7], "successfulli": 1, "suit": 37, "suitabl": [5, 6, 29, 35, 37, 43, 47, 50], "sum_pll_ld": [0, 42], "summari": 71, "super": [25, 30, 51, 115], "superconduct": [23, 31, 135, 136], "suppli": [3, 5, 6, 13, 16, 21, 23, 29, 31, 36, 37, 43, 47, 50, 70, 84, 131, 135, 136], "support": [1, 5, 6, 8, 14, 15, 17, 19, 21, 22, 25, 26, 29, 30, 31, 32, 35, 40, 42, 44, 47, 48, 49, 50, 51, 52, 55, 56, 57, 60, 72, 80, 86, 107, 108, 115, 131, 136], "suppos": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "suppress": [37, 82], "sure": [15, 31, 43, 47, 50, 68, 86, 111, 114, 115, 130, 132, 135], "susceptomet": [29, 80], "susceptometermicroscop": [29, 80], "svlimit": 23, "sw": [126, 128, 129], "sw01": 112, "sw2": 113, "sw_awg_async": 22, "swabian": [48, 135, 136], "swabian_instruments_time_tagg": [0, 122], "swabianinstru": [0, 122], "swap": [0, 37], "swe": 37, "sweep": [11, 15, 31, 32, 35, 36, 37, 50, 55, 65, 67, 70, 71, 83, 84, 91, 97, 98, 104, 106, 110, 115, 119, 133, 135], "sweep_arrai": [47, 115], "sweep_cent": [0, 37], "sweep_channel_nam": 120, "sweep_context": [0, 32], "sweep_cycl": [0, 42], "sweep_dir": [0, 42], "sweep_direct": [111, 120], "sweep_dwel": [0, 15, 68], "sweep_dwell_tim": [0, 42], "sweep_en": [0, 15, 68], "sweep_execut": [0, 36, 111], "sweep_field": [0, 31, 84], "sweep_frequency_start": 111, "sweep_frequency_stop": 111, "sweep_hold_time1": 123, "sweep_hold_time2": 123, "sweep_mod": [0, 31, 42, 84, 111], "sweep_mode1": 123, "sweep_mode2": 123, "sweep_numb": 39, "sweep_param": 47, "sweep_point": 111, "sweep_psu_output": [0, 31], "sweep_rat": [31, 84], "sweep_reset": [0, 36, 111], "sweep_return_time1": 123, "sweep_return_time2": 123, "sweep_setpoint": 115, "sweep_shap": 111, "sweep_signal_index": 39, "sweep_small_field_step": [0, 31, 84], "sweep_spacing1": 123, "sweep_spacing2": 123, "sweep_span": [0, 37], "sweep_start": [0, 37], "sweep_start_freq": [0, 42], "sweep_start_frequ": 68, "sweep_step_freq": [0, 42], "sweep_step_frequ": 68, "sweep_stop": [0, 37], "sweep_stop_freq": [0, 42], "sweep_stop_frequ": 68, "sweep_tim": 70, "sweep_time1": 123, "sweep_time2": 123, "sweep_trigg": [0, 15, 68, 111], "sweep_typ": 111, "sweep_voltage_measur": [0, 50], "sweepchannelindex": 39, "sweepchannelnam": 39, "sweepdirect": 39, "sweeper": [115, 135], "swig": 122, "switch": [0, 6, 7, 9, 22, 27, 31, 32, 34, 35, 52, 53, 55, 83, 86, 107, 108, 122, 125, 127, 133, 135, 136], "switch_ch2": 81, "switch_ch4": 81, "switch_ch5": 81, "switch_ch6": 81, "switch_channel": 81, "switch_com": 81, "switch_main": 81, "switch_model": [0, 33, 34], "switch_qubit": 81, "switchabl": [0, 21, 22], "switchchannel": [0, 29], "swith": 50, "sxx": [11, 135, 136], "sy": [75, 76, 133], "sychron": 21, "symbol": 136, "symmetr": 32, "sync": [0, 7, 22, 32, 37, 48, 87, 102, 110, 135], "sync1": 86, "sync_clk10": 22, "sync_correl": 122, "sync_count_r": 122, "sync_delai": [32, 86], "sync_dur": [32, 86], "sync_filter_": 39, "sync_mod": 22, "sync_non": 22, "sync_tagg": 122, "synchron": [6, 21, 22, 29, 32, 37, 49, 73, 80, 84, 135], "synchronis": [32, 106, 110, 135], "synchronize_en": 79, "synchronize_phas": [0, 50, 79], "synchronize_sourc": 79, "synchronized_measur": [48, 122], "synchronizedmeasur": [48, 49, 122], "synchronous_delai": 9, "synchronous_en": [9, 73], "synchronous_threshold": 9, "syncmod": 22, "syncron": 22, "synonym": 37, "syntax": 122, "synthes": [15, 18, 54, 130, 135, 136], "synthesizer_mod": [0, 15, 68], "synthhdchannel": [0, 56], "synthusb3": [56, 135, 136], "syst": 96, "system": [14, 22, 27, 31, 47, 55, 65, 107, 119, 135, 136], "sztypetonam": [0, 44], "szu": 37, "t": [1, 6, 7, 13, 23, 44, 47, 50, 52, 59, 61, 65, 71, 72, 78, 79, 81, 82, 84, 85, 98, 111, 117, 123, 134], "t0": 47, "t1": 47, "t255p": 51, "t_in_m": 43, "tab": 57, "tabl": [7, 29, 30, 50, 79], "tag": [48, 70], "tagger": [48, 49, 135, 136], "tagger_correlation_1": 122, "tagger_synchronized_measur": 122, "take": [6, 7, 15, 22, 30, 31, 32, 44, 48, 49, 68, 86, 125, 135], "taken": [5, 43, 44, 61, 115], "talk": 47, "tank": 10, "tap": [32, 108], "target": [6, 7, 30, 31, 43, 53, 78, 83, 84, 126], "target_curr": 78, "target_field": 78, "target_ground": 7, "target_point": [29, 80], "target_posit": [0, 6], "target_rang": [0, 6, 7], "target_voltag": 34, "task": [0, 21, 22, 29, 80], "tau": 48, "tc": 118, "tcp": [7, 47, 84, 107], "tcp_communication_handl": [0, 33, 34], "tcp_ip_adr": 43, "tcp_ip_port": 43, "tcpip": [79, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 114], "tcpip0": [65, 71, 112, 123, 125, 130, 133], "tcplog_chsset": [0, 39], "tcplog_oversamplset": [0, 39], "tcplog_start": [0, 39], "tcplog_statusget": [0, 39], "tcplog_stop": [0, 39], "tcxo": 15, "tdc001": [0, 53, 129], "tdiv": 41, "te": [30, 31], "teach": 111, "tear": 31, "techniqu": 130, "technologi": [59, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 111, 130], "teh": 86, "tektronix": [0, 74, 124, 135, 136], "tektronix_awg520": [0, 50], "tell": [67, 108], "telnet": 27, "temp": [71, 84, 120], "temp0_0": 86, "temp2_1": 86, "temperatur": [0, 5, 10, 12, 15, 31, 32, 34, 61, 64, 68, 71, 84, 87, 110, 117, 135], "temperature_100mk": 85, "temperature_4k_pl": [64, 85], "temperature_50k_pl": [64, 85], "temperature_magnet": [64, 85], "temperature_mixing_chamb": [64, 85], "temperature_stil": [64, 85], "tempfil": 72, "tempx_i": 86, "ten": 86, "term": 11, "termin": [2, 4, 11, 21, 32, 36, 44, 47, 50, 52, 56, 135], "tesla": [13, 31, 78, 84], "test": [1, 5, 6, 7, 13, 15, 21, 28, 29, 32, 35, 37, 40, 42, 47, 53, 55, 57, 70, 72, 80, 93, 106, 108, 110, 114, 119, 120, 122, 133, 135, 136], "test_copper_mountain": 65, "test_freq_axi": 70, "test_intern": [0, 33, 34], "test_mod": [55, 131], "test_port": 131, "test_send": 50, "test_signal_recovery_7270": 118, "test_start_freq": 70, "test_trac": 70, "testing_coppermountain_driv": 65, "testiv": 86, "text": 32, "textronix": 50, "th": [22, 41], "than": [7, 13, 22, 37, 47, 48, 55, 57, 68, 84, 86, 111], "thandar": 3, "thei": [1, 5, 6, 7, 19, 29, 35, 40, 48, 55, 56, 57, 75, 76, 86, 111, 122, 131, 132], "them": [1, 5, 6, 8, 9, 14, 15, 16, 17, 19, 21, 25, 26, 29, 30, 31, 35, 37, 40, 42, 44, 47, 48, 50, 51, 52, 55, 56, 86, 111, 135], "theoret": 71, "therefor": 83, "thermomet": 31, "thermotek": 0, "thermotek_t255p": 0, "thermotekt255p": [0, 51], "theta": [57, 84, 134], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 35, 36, 37, 40, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 65, 67, 70, 71, 72, 75, 76, 78, 80, 81, 82, 83, 84, 86, 111, 112, 113, 114, 115, 117, 118, 120, 122, 125, 126, 132, 134, 135, 136], "thing": [6, 37], "thinksr": 47, "third": 27, "thorlab": [0, 135, 136], "thorlab_pm100d": [0, 52], "thorlabs_apt": [0, 52, 53, 126, 128, 129], "thorlabs_k10cr1": [0, 52, 126], "thorlabs_kdc101": [0, 52], "thorlabs_kinesi": 127, "thorlabs_kls1550": [0, 52, 127], "thorlabs_mff10x": [0, 52, 128], "thorlabs_prm1z8": [0, 52, 129], "thorlabs_tdc001": [0, 52], "thorlabsexcept": [0, 52, 53], "thorlabshwtyp": [0, 52, 53], "thorproduct": 52, "those": [7, 22, 26, 32, 49], "though": [1, 5, 6, 8, 13, 14, 15, 17, 19, 21, 25, 26, 29, 30, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56], "thousand": 80, "thread": [0, 21, 22, 35, 43, 84], "three": [6, 31, 32, 86], "threedswp_filepathsget": [0, 39], "threedswp_stpch1limitsget": [0, 39], "threedswp_stpch1limitsset": [0, 39], "threedswp_stpch1propsget": [0, 39], "threedswp_stpch1propsset": [0, 39], "threedswp_stpch1signalget": [0, 39], "threedswp_stpch1signalset": [0, 39], "threedswp_stpch1timingget": [0, 39], "threedswp_stpch1timingset": [0, 39], "threedswp_stpch2limitsget": [0, 39], "threedswp_stpch2limitsset": [0, 39], "threedswp_stpch2propsget": [0, 39], "threedswp_stpch2propsset": [0, 39], "threedswp_stpch2signalget": [0, 39], "threedswp_stpch2signalset": [0, 39], "threedswp_stpch2timingget": [0, 39], "threedswp_stpch2timingset": [0, 39], "threedswp_swpacqchsget": [0, 39], "threedswp_swpacqchsset": [0, 39], "threedswp_swpchlimitsget": [0, 39], "threedswp_swpchlimitsset": [0, 39], "threedswp_swpchmlsget": [0, 39], "threedswp_swpchmlsset": [0, 39], "threedswp_swpchmodeget": [0, 39], "threedswp_swpchmodeset": [0, 39], "threedswp_swpchpropsget": [0, 39], "threedswp_swpchpropsset": [0, 39], "threedswp_swpchsignalget": [0, 39], "threedswp_swpchsignalset": [0, 39], "threedswp_swpchtimingget": [0, 39], "threedswp_swpchtimingset": [0, 39], "threedswp_swpsaveoptionsget": [0, 39], "threedswp_swpsaveoptionsset": [0, 39], "threedswp_swpstatusget": [0, 39], "threedswp_timingen": [0, 39], "threedswp_timingrowlimitget": [0, 39], "threedswp_timingrowlimitset": [0, 39], "threedswp_timingrowmethodsget": [0, 39], "threedswp_timingrowmethodsset": [0, 39], "threedswp_timingrowvalsget": [0, 39], "threedswp_timingrowvalsset": [0, 39], "threedswp_timingsend": [0, 39], "threedswpopen": [0, 39], "threedswpstart": [0, 39], "threedswpstop": [0, 39], "thresh": 25, "threshold": [9, 22, 31, 39], "threshold2": 39, "threshold_a": 124, "threshold_b": 124, "threshold_temperatur": 31, "through": [7, 9, 19, 31, 70, 111, 115, 135], "throw": [6, 22, 27, 53, 81, 111], "thrown": 53, "thu": [32, 47], "thurlbi": 3, "tick": [92, 93, 133], "tigger": 22, "tile": [75, 76, 96], "till": 22, "tim": [88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 123], "time": [1, 6, 7, 9, 11, 13, 15, 22, 28, 29, 31, 32, 35, 37, 43, 44, 47, 48, 49, 50, 61, 70, 71, 73, 79, 81, 83, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 111, 115, 119, 120, 123, 124, 126, 132, 135, 136], "time_": [0, 32], "time_arrai": 124, "time_between_read": 31, "time_bin": [0, 48], "time_bin_edg": [0, 48], "time_const": [115, 134], "time_tagg": [0, 48], "time_wait": 107, "timearrai": [0, 43], "timeconst": 118, "timed_sweep": 39, "timeit": 68, "timemea": 119, "timeout": [6, 11, 19, 22, 28, 29, 30, 31, 39, 47, 49, 50, 52, 65, 66, 67, 68, 71, 72, 74, 78, 79, 84, 111, 115, 118, 123, 124, 133], "timeout_": 39, "timer": 31, "timer_cmd": [0, 33, 34], "timestamp": [0, 43, 48, 59, 61, 65, 71, 72, 79, 84, 85, 98, 111, 117, 120, 124], "timestat": 124, "timestatist": [0, 50], "timetagg": [0, 48, 49, 122], "timetaggerbas": [48, 49], "timetaggerinstrumentbas": [0, 48, 49], "timetaggermeasur": [0, 48, 49], "timetaggermodul": [0, 48, 49], "timetaggersynchronizedmeasur": [0, 48, 49, 122], "timetaggervirtualchannel": [0, 48, 49], "tint": [91, 96], "titl": [61, 70, 79, 84, 92, 93, 98, 111, 115, 118, 133], "tmod": 91, "to_back": 104, "to_setpoint": [0, 31], "to_zero": [0, 31], "todo": [21, 35], "togeth": [93, 102], "toler": 34, "tone": 82, "too": [1, 35], "tool": 107, "tort": 43, "tot": 37, "tot_points_in": 76, "total": [22, 30, 32, 37, 44, 48, 75, 76, 86], "total_depth": [0, 37], "total_devi": [0, 37], "touch": 83, "toward": [10, 31, 42, 64], "trac": 96, "trace": [0, 11, 32, 34, 37, 44, 70, 88, 135], "trace_context": [0, 32], "trace_nam": 32, "traceback": 125, "tracenotreadi": [0, 11], "track": 34, "tracking_init": [0, 33, 34], "tramea": [135, 136], "transfer": [23, 48, 135], "transfer_typ": 70, "transform": [25, 30, 51], "transit": [37, 86], "transition_typ": [0, 37], "transpos": [23, 43], "transpose_data": [23, 79], "trapez": 37, "trapez_fal": [0, 37], "trapez_height": [0, 37], "trapez_period": [0, 37], "trapez_ris": [0, 37], "trapezoid": 37, "travel": [7, 30, 83], "treat": [20, 57], "tree": [57, 135], "trg": 32, "trgiomask": 22, "trgpximask": 22, "tri": 111, "tri_waveform": [0, 42], "triangl": [0, 15, 32, 37, 95, 106, 110, 135], "triangle_context": [0, 32], "triangle_period": [0, 37], "triangle_ris": [0, 37], "triangle_wav": [0, 32, 95, 103], "triangular": 22, "trig": [37, 47, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 123], "trig4": 91, "trig_holdoff": 47, "trig_lin": 47, "trig_mod": 44, "trig_out_en": [0, 42], "trig_out_on_cycl": [0, 42], "trig_rat": 47, "trig_single_shot": 47, "trig_thresh": 47, "triger": [75, 76], "trigger": [0, 6, 7, 15, 21, 22, 32, 34, 36, 37, 44, 47, 50, 86, 88, 91, 94, 97, 98, 99, 102, 103, 104, 106, 110, 111, 119, 123, 135], "trigger_arming_mod": 39, "trigger_behaviour": 22, "trigger_count": 74, "trigger_fal": [75, 76], "trigger_imped": [0, 37], "trigger_level": 119, "trigger_level_mv": 43, "trigger_map": [0, 47], "trigger_mod": [0, 21, 22, 37, 39, 61, 75, 76, 123], "trigger_or_mask": 44, "trigger_out": [0, 32, 102], "trigger_pxi1": [75, 76], "trigger_slop": 123, "trigger_sourc": [22, 65, 74, 123], "trigger_tim": 123, "triggerdown": [0, 6], "triggermod": [0, 41], "triggerup": [0, 6], "triton": [0, 135, 136], "true": [5, 6, 7, 9, 15, 22, 23, 25, 26, 29, 31, 32, 34, 35, 40, 43, 44, 47, 48, 49, 50, 53, 55, 57, 59, 61, 63, 65, 68, 70, 71, 72, 73, 74, 76, 78, 79, 82, 84, 85, 86, 92, 93, 98, 101, 105, 111, 115, 117, 118, 119, 122, 123, 124, 127, 130, 131, 133], "truncat": 57, "try": [75, 76, 79, 81, 84, 86, 122, 125], "tst001": [0, 52, 53], "tt": [48, 49, 122], "ttl": 82, "ttyacm0": 107, "ttyp": 37, "ttys0": 107, "ttyusb0": 47, "tudelft": 35, "tunabl": 14, "tune": [14, 35, 130], "tupl": [5, 6, 7, 9, 11, 14, 20, 29, 31, 32, 39, 41, 47, 49, 50, 53, 57], "turn": [6, 8, 15, 27, 31, 32, 57, 60, 61, 65, 67, 72, 77, 82, 92, 93, 108, 111, 112, 113, 135], "turret": 72, "tutorial_exp": [70, 84], "twice": 132, "two": [6, 11, 29, 31, 32, 34, 37, 47, 57, 63, 71, 83, 86, 93, 97, 98, 102, 104, 105, 115, 125, 134, 135, 136], "txt": 35, "typ": 5, "type": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 19, 21, 22, 25, 26, 29, 30, 31, 32, 34, 35, 37, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 68, 76, 84, 122, 135], "typeerror": 125, "typevalid": [0, 48, 49], "typic": [6, 86], "u": [37, 71, 75, 76, 78, 123], "u00b0c": 15, "u_posit": 46, "ua": 119, "uc8": [30, 135, 136], "ucurposit": [0, 46], "ucurspe": [0, 46], "udp_communication_handl": [0, 33, 34], "udp_packet_handl": [0, 33, 34], "uid": 130, "uint64": 48, "uk": [36, 56], "ultra": 14, "ultrasigma": 111, "unact": 84, "unassign": 86, "unavail": 1, "unblock": 9, "unc": 37, "uncertainti": 47, "unchang": 86, "undefin": [1, 81], "under": [84, 108, 127, 133, 136], "underli": [25, 30, 49, 51, 107], "undisturb": 86, "undon": 22, "unfortun": 72, "unground": 108, "uni": 35, "unidirect": 13, "unina": 133, "union": [42, 46], "uniqu": [13, 36], "unit": [0, 6, 7, 9, 11, 15, 19, 21, 22, 23, 25, 32, 35, 47, 48, 56, 61, 63, 66, 69, 77, 78, 79, 83, 84, 86, 115, 116, 118, 122, 129, 134, 135], "univers": 111, "unknown": [4, 22, 47], "unlik": 81, "unlock": [15, 31, 37], "unmodul": 82, "unplug": 111, "unrecogn": 1, "unregister_measur": [0, 48, 49, 122], "unregistermeasur": 49, "unti": 23, "until": [6, 9, 22, 23, 31, 32, 53, 62, 67, 68, 83, 84, 114, 126], "unus": [13, 31], "up": [6, 7, 8, 15, 20, 22, 30, 32, 35, 37, 47, 53, 62, 67, 68, 81, 82, 86, 91, 98, 114, 115, 117, 118, 125, 127, 130, 132, 135], "updat": [7, 11, 15, 26, 31, 32, 37, 43, 44, 47, 49, 50, 57, 65, 68, 71, 74, 78, 79, 82, 86, 117, 118, 119, 123, 124, 131, 136], "update_ch_unit": [0, 47], "update_curr": [32, 86], "update_lin_trac": [0, 11], "update_trac": [0, 37], "update_unit": [0, 47], "update_units_if_constant_sample_r": [0, 47], "upgrad": 118, "upgrade_cmd": [0, 33, 34], "upload": [15, 21, 22, 50, 57, 75, 76, 135], "upload_sequence_program": [0, 57], "upload_waveform": [0, 21, 22, 50, 57, 75, 76, 123], "uploader_readi": [0, 21, 22], "upon": [19, 47], "uposit": [0, 46], "upper": [7, 25, 67], "upper_limit": [39, 120], "upper_limit_hz": 39, "upperlimit": 39, "upperrangev": 39, "upt": 130, "uptim": 70, "upto": 37, "upwr": [0, 46], "us": [1, 4, 5, 6, 7, 9, 11, 13, 15, 16, 18, 19, 21, 22, 23, 25, 26, 29, 31, 32, 34, 35, 36, 37, 40, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 68, 70, 75, 76, 77, 78, 81, 82, 83, 86, 102, 105, 110, 118, 122, 123, 130, 134, 136], "usag": [6, 31, 35, 37, 44, 50, 87, 109, 110, 114, 135, 136], "usb": [6, 7, 13, 29, 48, 59, 62, 73, 80, 83, 107, 108, 111, 113, 125, 132], "usb0": [59, 111, 118, 124], "usb_communication_handl": [0, 33, 34], "usb_packet_handl": [0, 33, 34], "usbmodem14101": [15, 108], "use_gpib": 31, "use_lock": 35, "use_stored_valu": 39, "user": [1, 31, 37, 47, 50, 57, 59, 61, 65, 68, 70, 71, 72, 73, 84, 85, 86, 98, 111, 115, 117, 118, 123, 125], "user1": [50, 123], "user2": 50, "user3": 50, "user4": 50, "userin_calibrset": [0, 39], "userout_calcsignalconfigget": [0, 39], "userout_calcsignalconfigset": [0, 39], "userout_calcsignalnameget": [0, 39], "userout_calcsignalnameset": [0, 39], "userout_calibrset": [0, 39], "userout_limitsget": [0, 39], "userout_limitsset": [0, 39], "userout_modeget": [0, 39], "userout_modeset": [0, 39], "userout_monitorchget": [0, 39], "userout_monitorchset": [0, 39], "userout_slewrateget": [0, 39], "userout_slewrateset": [0, 39], "userspublicdocumentsn": 29, "userwarn": 70, "usual": [13, 16, 29, 32, 68, 122], "util": [15, 31, 75, 76, 105, 118, 125], "util_acqperiodget": [0, 39], "util_acqperiodset": [0, 39], "util_layoutload": [0, 39], "util_layoutsav": [0, 39], "util_lock": [0, 39], "util_quit": [0, 39], "util_rtfreqget": [0, 39], "util_rtfreqset": [0, 39], "util_rtoversamplget": [0, 39], "util_rtoversamplset": [0, 39], "util_sessionpathget": [0, 39], "util_settingsload": [0, 39], "util_settingssav": [0, 39], "util_unlock": [0, 39], "utility_cmd": [0, 33, 34], "uusb": [0, 46], "v": [6, 7, 9, 13, 15, 22, 32, 34, 35, 37, 41, 43, 44, 50, 60, 68, 73, 74, 78, 79, 86, 111, 115, 118, 120, 123, 124, 130, 134], "v0": 118, "v1": [68, 111, 112, 113, 118, 124], "v2": [83, 118], "v3": [0, 6, 118], "v4": [0, 6, 118], "v5": 118, "v6": 118, "v7": 118, "v8": 118, "v9": 118, "v_endlist": 32, "v_inter_delai": 9, "v_mode": 118, "v_post_delai": 9, "v_startlist": 32, "v_step": 9, "vac": 6, "vacuum": 10, "val": [2, 15, 22, 25, 37, 48, 50, 115], "val_map": [15, 19, 25, 51], "valid": [0, 6, 7, 10, 15, 23, 24, 31, 35, 37, 44, 48, 49, 50, 55, 64, 81, 115], "valid_path": 64, "valid_typ": [48, 49], "validate_port_contact": [0, 33, 34], "validate_repli": [0, 33, 34], "validate_selected_channel": [0, 33, 34], "validateinput": [0, 23, 24], "valon": [0, 135, 136], "valon5015": [0, 54, 130], "valon_5015": [0, 130], "valu": [0, 1, 5, 6, 7, 9, 11, 13, 15, 19, 22, 23, 24, 26, 29, 30, 31, 32, 34, 35, 37, 38, 41, 43, 44, 47, 49, 50, 52, 53, 55, 57, 61, 65, 66, 67, 68, 71, 72, 74, 76, 78, 81, 82, 84, 86, 88, 114, 115, 116, 117, 118, 123, 124, 125, 127, 131, 135], "value_sensitivity_map": [0, 47], "valueerror": [32, 35, 81, 86], "values_v": [0, 32], "valv": 31, "var": 37, "vari": 6, "variabl": [6, 7, 13, 23], "variou": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 72], "vaunix": [0, 135, 136], "vaunix_lda": [0, 55, 131], "vbat": 130, "vc": 122, "vcl": [31, 85], "vcl2csv": [0, 31], "vcl_2_ascii_convert": 31, "vdiv": 41, "ve": 86, "vector": [31, 37, 43, 48, 114, 135, 136], "veloc": [53, 126], "velocity_max": 126, "veloctii": 53, "vendor": [0, 1, 4, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 61, 65, 66, 67, 68, 71, 74, 78, 81, 82, 83, 84, 115, 116, 117, 118, 123, 124, 131], "vent": 10, "ver": [6, 71], "ver1": 115, "verbos": [0, 5, 21, 22, 26, 32, 40, 44, 46, 52, 53], "veri": [29, 32, 47, 48, 86, 122], "verifi": 78, "versa": 37, "version": [0, 1, 5, 6, 7, 13, 14, 15, 17, 21, 22, 23, 25, 28, 29, 31, 32, 35, 37, 47, 50, 52, 53, 72, 84, 126, 128, 129, 130], "versionnumb": 72, "vertic": 61, "vhigh_ihigh": [0, 32, 86], "vhigh_ilow": [0, 32, 86], "vi": 22, "vi_error_tmo": 111, "via": [7, 22, 27, 31, 32, 47, 50, 75, 76, 83, 84, 86, 107, 108, 113, 125], "vice": 37, "victor": 15, "vid": 37, "video": [37, 70], "video_bandwidth": [59, 70], "video_polar": [0, 37], "view": 135, "viewsoftwarepag": 127, "vireal64": 29, "virtual": [32, 48, 49, 106, 110, 135], "virtual_channel_list": [0, 48], "virtual_detun": [0, 32, 97, 104], "virtual_sweep": [0, 32, 97], "virtual_sweep2d": [0, 32, 91, 97, 98, 104], "virtual_sweep_context": [0, 32], "virtual_voltag": [0, 32], "virtualchannel": [48, 49], "visa": [1, 5, 6, 8, 9, 11, 14, 15, 17, 18, 19, 21, 23, 25, 26, 29, 30, 32, 35, 36, 37, 40, 42, 44, 47, 48, 50, 51, 52, 55, 56, 81, 83, 86, 96, 135], "visa_handl": [15, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104], "visa_typ": 0, "visainstru": [2, 3, 4, 6, 9, 11, 12, 13, 15, 17, 18, 21, 23, 25, 30, 31, 32, 35, 36, 37, 41, 47, 50, 51, 52, 54, 56, 58], "visaioerror": [111, 114, 130], "visalib": [6, 18, 37, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108], "visess": 29, "visibl": [82, 86], "visit": 15, "vistatu": 29, "vl446": 73, "vlow_ilow": [0, 32, 86], "vm": 79, "vm10": [0, 23], "vmax": [92, 93], "vmin": [92, 93], "vna": [11, 65, 107, 108, 133], "vna_frequ": 65, "vna_pow": 133, "vna_s11_magnitud": 65, "vna_s11_phas": 65, "vnarstafuri": 133, "vnegirneac": 15, "vnx_atten": [55, 131], "vnx_atten64": [55, 131], "volt": [7, 9, 22, 35, 37, 47, 50, 74, 79, 91, 96, 98, 125], "volt_": 47, "voltag": [0, 6, 7, 9, 15, 22, 24, 29, 32, 34, 35, 36, 37, 44, 47, 50, 60, 68, 73, 74, 78, 79, 80, 82, 87, 89, 92, 93, 97, 106, 110, 112, 113, 118, 123, 125, 135], "voltage_0": 80, "voltage_4": 80, "voltage_amplitude1": 123, "voltage_amplitude2": 123, "voltage_concurrent1": 123, "voltage_concurrent2": 123, "voltage_dc": 125, "voltage_high": 50, "voltage_high1": [50, 123], "voltage_high2": 123, "voltage_limit": 78, "voltage_limit_high1": 123, "voltage_limit_high2": 123, "voltage_limit_low1": 123, "voltage_limit_low2": 123, "voltage_low": 50, "voltage_low1": [50, 123], "voltage_low2": 123, "voltage_measur": 50, "voltage_offset1": 123, "voltage_offset2": 123, "voltage_out": 60, "voltage_set": [50, 60], "voltage_start": 50, "voltage_stop": 50, "voltage_unit1": 123, "voltage_unit2": 123, "voltagedict": 47, "vout": 34, "vp": 37, "vpp": 123, "vrm": [31, 84], "vs10": [0, 23], "w": [25, 50, 56, 69, 75, 76, 84, 133], "wa": [1, 6, 22, 29, 47, 48, 53, 57, 69, 71, 72, 78, 80, 115], "wagen": [6, 37], "wai": [6, 26, 32, 49, 50, 67, 73, 81, 82, 111, 115], "wait": [0, 6, 9, 11, 22, 23, 24, 25, 30, 31, 32, 37, 44, 47, 50, 53, 62, 67, 75, 76, 84, 86, 107, 126], "wait_fast": 115, "wait_for_acquisit": [0, 5], "wait_readi": [0, 44], "wait_stabl": [0, 28], "wait_trigg": 50, "wait_until_don": [39, 80], "wait_until_field_depersist": [0, 31], "wait_until_field_persist": [0, 31], "wait_until_field_st": [0, 31, 84], "wait_until_field_stable_timeout": [0, 31], "wait_until_finish": [0, 39, 48, 49, 122], "wait_until_script_finish": 39, "wait_until_temperature_stable_std_control": [0, 31, 84], "wait_upload": [0, 21, 22], "waitmov": [0, 6, 62], "waituntilfinish": 49, "waituntilwinish": 39, "wamp": 84, "want": [1, 21, 22, 26, 29, 32, 43, 49, 57, 78, 81, 84, 111, 118, 134], "warmup": [3, 135], "warmup_heat": 60, "warn": [1, 7, 9, 25, 29, 57], "warning_cod": [0, 6, 7], "warning_statu": 25, "warnings_as_error": 57, "warranti": 43, "watt": [60, 127, 130], "wav": 32, "wave": [22, 32, 44, 57, 75, 76, 82, 102, 106, 110, 135], "wave1": [21, 22], "wave2": 22, "wave3": 22, "wave_info": 57, "wave_nam": 57, "wave_numb": [0, 21, 22], "wave_s": 22, "wave_shap": 22, "waveform": [0, 6, 15, 21, 22, 32, 34, 37, 41, 50, 57, 95, 102, 106, 110, 114, 135], "waveform_data_a": 22, "waveform_data_b": 22, "waveform_fil": 22, "waveform_numb": 22, "waveform_object": 22, "waveform_ref": 22, "waveform_size_limit": 22, "waveform_to_csv": [0, 57], "waveform_to_wav": [0, 57], "waveform_typ": 22, "waveformrefer": [0, 21, 22], "waveformsetup": [0, 41], "wavelength": [14, 40, 116, 135], "wbst": 37, "we": [1, 5, 6, 8, 11, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 32, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 61, 63, 69, 70, 71, 73, 77, 78, 81, 82, 83, 86, 111, 114, 115, 116, 122, 123, 128, 129, 136], "web": 57, "websit": [111, 132], "websocket": 84, "websq": 119, "websqcontrolqcod": [0, 43, 119], "well": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 31, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 78, 84, 86, 112, 113, 122, 125, 136], "wf": [22, 50, 123, 131], "wfm": 50, "wfs1": 50, "wfs2": 50, "wfsu": 41, "what": [47, 84, 132], "whatev": 134, "wheel": [52, 53, 129], "when": [1, 6, 7, 13, 22, 24, 29, 30, 31, 32, 35, 37, 42, 44, 47, 48, 53, 56, 57, 67, 82, 84, 87, 108, 110, 111, 131, 135], "where": [6, 7, 11, 21, 22, 29, 31, 32, 35, 43, 47, 48, 50, 57, 75, 76, 86, 107, 125], "whether": [22, 23, 29, 31, 32, 43, 47], "which": [1, 6, 7, 9, 10, 11, 15, 18, 21, 22, 25, 29, 30, 31, 32, 34, 37, 43, 44, 47, 48, 50, 52, 53, 55, 57, 70, 71, 72, 78, 81, 82, 86, 92, 93, 107, 108, 115, 122, 126, 127, 136], "whichev": 47, "while": [1, 6, 9, 37, 76, 83, 86, 123, 126, 130, 136], "whom": 43, "whose": 47, "why": [84, 86], "wid": 37, "wide": 114, "wideband": [0, 37], "wideband_fm": [15, 68], "widt": [37, 91], "width": [0, 7, 14, 15, 32, 37, 40, 48, 72, 116], "width_": [32, 88, 94, 99, 103], "wifi": 15, "wifi_gateway_address": [0, 15, 68], "wifi_hotspot_password": [0, 15, 68], "wifi_hotspot_ssid": [0, 15, 68], "wifi_ip_address": [0, 15, 68], "wifi_mod": [0, 15, 68], "wifi_off": [0, 15], "wifi_on": [0, 15], "wifi_rssi": [0, 15, 68], "wifi_station_password": [0, 15, 68], "wifi_station_ssid": [0, 15, 68], "wifi_subnet_address": [0, 15, 68], "wil": 22, "win32": 1, "windfreak": [0, 135, 136], "windfreak_synthhd": 0, "windfreak_synthusb3": [0, 132], "windfreaksynthhd": [0, 56], "windfreaksynthusb3": [0, 56, 132], "windll": [5, 40, 53], "window": [14, 44, 48, 55, 84, 131], "windst": [0, 46], "wire": 125, "wish": [6, 18, 37], "within": 37, "without": [29, 37, 43, 84, 86, 104, 115, 126], "witin": 86, "won": 84, "word": [22, 72], "work": [6, 7, 11, 21, 22, 29, 34, 35, 37, 44, 48, 50, 54, 55, 78, 80, 82, 83, 84, 96, 111, 114, 131, 132, 136], "work_hour": [0, 25], "working_frequ": 131, "working_frequnci": 131, "would": [6, 20, 22, 32, 111], "wp": [36, 56], "wrap": [5, 6, 22, 25, 29, 30, 32, 37, 43, 47, 48, 50, 51, 122], "wrap_dll_funct": [0, 29], "wrap_dll_function_check": [0, 29], "wrapper": [5, 6, 7, 11, 16, 29, 31, 35, 37, 40, 53, 126, 127], "write": [0, 1, 4, 6, 13, 15, 19, 22, 25, 29, 30, 32, 33, 34, 35, 37, 47, 51, 57, 80, 88, 89, 90, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 107, 114, 118, 136], "write_binary_valu": 96, "write_channel": [0, 30, 32], "write_channel_float": [0, 32], "write_float": [0, 32], "write_fpga": [0, 21, 22], "write_fpga_arrai": [0, 21, 22], "write_modul": [0, 47], "write_period": 86, "write_pin": [0, 1], "write_port": [0, 1], "write_raw": [0, 4, 6, 15, 25, 30, 51, 118], "write_termin": 96, "write_text": 72, "written": [22, 29, 36, 56, 57, 80], "wrong": [6, 44, 75, 76, 125], "wrong_chassi": [75, 76], "www": [16, 28, 37, 47, 52, 117, 127], "x": [5, 24, 25, 31, 32, 47, 57, 61, 72, 79, 84, 86, 96, 98, 115, 118, 120, 133, 134], "x00": [4, 34, 118], "x64": [14, 42, 117], "x8": 44, "x86": [75, 76], "x_feild_valu": 84, "x_field_valu": 84, "x_label": 133, "x_offset": 115, "x_pixel": [0, 5], "xff": 34, "xlabel": [61, 70, 79, 84, 111, 115, 118, 133], "xtal": 15, "xtick": 133, "xy": 118, "y": [5, 24, 31, 32, 47, 57, 84, 86, 96, 115, 118, 120, 133, 134], "y_field_valu": 84, "y_label": 133, "y_offset": 115, "y_pixel": [0, 5], "yaml": 81, "year": [0, 42], "yet": [6, 32, 37, 122], "yield": [23, 47], "ylabel": [61, 70, 79, 84, 111, 115, 118, 133], "you": [6, 7, 18, 21, 22, 26, 31, 32, 37, 43, 47, 49, 68, 70, 81, 82, 84, 86, 107, 108, 111, 112, 113, 115, 118, 126, 132, 134, 135, 136], "your": [1, 5, 6, 8, 14, 15, 17, 19, 21, 25, 26, 29, 30, 35, 40, 42, 44, 47, 48, 51, 52, 55, 56, 76, 82, 84, 107, 111, 114, 115, 117, 119, 132, 136], "yourself": 107, "ytick": 133, "z": [22, 31, 84], "z_averaging_tim": 39, "z_control_tim": 39, "z_controller_index": 39, "z_controller_off": 39, "z_field_valu": 84, "z_offset": 39, "zea": [6, 7, 37], "zero": [6, 7, 9, 19, 22, 24, 30, 31, 32, 35, 53, 67, 69, 72, 75, 76, 84, 86, 126], "zero_offset": 53, "zero_offset_en": 69, "zero_posit": [0, 30, 83], "zeros_awg1": [75, 76], "zeros_awg2": [75, 76], "zhinst": 57, "zi": [57, 134], "zihdawg8": 0, "zilistenum": 57, "zipython": 57, "ztm": 0, "zurich": [57, 135, 136], "zurichinstru": [0, 134], "zvl": 133, "zvl13": [0, 135, 136], "zvl_s_trace": 133, "zvl_trace": 133, "zvl_zvl_frequenc": 133, "\u00b5": [7, 47, 68], "\u03b8": [47, 115], "\u03bcm": 116, "\u03bcv": 115}, "titles": ["qcodes_contrib_drivers.drivers package", "qcodes_contrib_drivers.drivers.Advantech package", "qcodes_contrib_drivers.drivers.Agilent package", "qcodes_contrib_drivers.drivers.AimTTi package", "qcodes_contrib_drivers.drivers.Ametek package", "qcodes_contrib_drivers.drivers.Andor package", "qcodes_contrib_drivers.drivers.Attocube package", "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package", "qcodes_contrib_drivers.drivers.Aviosys package", "qcodes_contrib_drivers.drivers.Bilt package", "qcodes_contrib_drivers.drivers.BlueFors package", "qcodes_contrib_drivers.drivers.CopperMountain package", "qcodes_contrib_drivers.drivers.Cryocon package", "qcodes_contrib_drivers.drivers.Cryogenic package", "qcodes_contrib_drivers.drivers.DaylightSolutions package", "qcodes_contrib_drivers.drivers.ERAInstruments package", "qcodes_contrib_drivers.drivers.GeneralMicrowave package", "qcodes_contrib_drivers.drivers.Gentec package", "qcodes_contrib_drivers.drivers.Holzworth package", "qcodes_contrib_drivers.drivers.Horiba package", "qcodes_contrib_drivers.drivers.Horiba.private package", "qcodes_contrib_drivers.drivers.Keysight package", "qcodes_contrib_drivers.drivers.Keysight.SD_common package", "qcodes_contrib_drivers.drivers.Lakeshore package", "qcodes_contrib_drivers.drivers.Lakeshore.modules package", "qcodes_contrib_drivers.drivers.LighthousePhotonics package", "qcodes_contrib_drivers.drivers.M2 package", "qcodes_contrib_drivers.drivers.Minicircuits package", "qcodes_contrib_drivers.drivers.MontanaInstruments package", "qcodes_contrib_drivers.drivers.NationalInstruments package", "qcodes_contrib_drivers.drivers.Newport package", "qcodes_contrib_drivers.drivers.OxfordInstruments package", "qcodes_contrib_drivers.drivers.QDevil package", "qcodes_contrib_drivers.drivers.QphoX package", "qcodes_contrib_drivers.drivers.QphoX.CryoSwitchController package", "qcodes_contrib_drivers.drivers.QuTech package", "qcodes_contrib_drivers.drivers.Rigol package", "qcodes_contrib_drivers.drivers.RohdeSchwarz package", "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package", "qcodes_contrib_drivers.drivers.SPECS package", "qcodes_contrib_drivers.drivers.Shamrock package", "qcodes_contrib_drivers.drivers.Siglent package", "qcodes_contrib_drivers.drivers.SignalCore package", "qcodes_contrib_drivers.drivers.SingleQuantum package", "qcodes_contrib_drivers.drivers.Spectrum package", "qcodes_contrib_drivers.drivers.Spectrum.py_header package", "qcodes_contrib_drivers.drivers.Standa package", "qcodes_contrib_drivers.drivers.StanfordResearchSystems package", "qcodes_contrib_drivers.drivers.SwabianInstruments package", "qcodes_contrib_drivers.drivers.SwabianInstruments.private package", "qcodes_contrib_drivers.drivers.Tektronix package", "qcodes_contrib_drivers.drivers.Thermotek package", "qcodes_contrib_drivers.drivers.Thorlabs package", "qcodes_contrib_drivers.drivers.Thorlabs.private package", "qcodes_contrib_drivers.drivers.Valon package", "qcodes_contrib_drivers.drivers.Vaunix package", "qcodes_contrib_drivers.drivers.Windfreak package", "qcodes_contrib_drivers.drivers.ZurichInstruments package", "qcodes_contrib_drivers.drivers.physik_instrumente package", "Example with the Agilent N9000A", "Example notebook for AimTTi EL320P", "Qcodes example with Andor DU401 BU2", "QCoDeS example with Attocube ANC300", "Qcodes example with Aviosys IP Power 9258S", "Example with the BlueFors", "Example with CopperMountain Model M5180 vector network analyzer", "Example for Cyromagnetics Model LM-500 Helium Level meter", "Example for Cyromagnetics Model 4G magnet power supply", "Example with ERASynth", "QCoDeS Example with Gentec Maestro", "QCoDeS Example with HP8594E", "Example notebook for the Holzworth HS900B RF synthesizer", "Example for Horiba FHR", "Example with the iTest from Bilt", "Example notebook for Keithley 6430 SMU", "Keysight M3202A AWG", "Keysight M3202A AWG example with digitizer", "Qcodes example with Lakeshore 311", "Example with Lakeshore Model 625 Superconducting Magnet power supply", "Connect to M81", "National Instruments Multifunction DAQ example", "Qcodes example for National Instruments PXIe-2597 RF Switch", "Qcodes example with the NI RFSG signal generator driver", "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller", "Proteox system integration with QCoDeS", "Example of the oxford triton driver", "QCoDeS Example with QDevil_QDAC", "QCoDeS examples of how to use QDAC-I", "QDAC-II arbitrary-waveform generator", "QDAC-II trigger chaining", "QDAC-II constant voltage", "QDAC-II debugging", "Gate Leakage Test", "Gate Leakage using multiple QDAC-IIs", "QDAC-II voltage lists", "QDAC-II multiple generators per channel", "PyVisa direct use of QDAC-II", "QDAC-II 1D &amp; 2D scan", "QDAC-II 2D diode scan", "QDAC-II sine waves", "QDAC-II square waves", "QDAC-II voltage sweep", "Synchronise multiple QDAC-IIs", "QDAC-II triangle waves", "QDAC-II virtual gates", "QDAC-II 2D diode scan", "QCoDeS examples of how to use QDAC-II", "QSwitch debugging", "QSwitch usage", "QCoDeS examples of how to use QSwitch", "QDevil drivers", "QCoDeS example with Rigol DSG3136B", "QCoDeS Example with R&amp;S HMC 8043 Power Supply", "QCoDeS Example with R&amp;S HMP4040 Power Supply", "QCoDeS example with Rohe&amp;Schwarz SMW200A", "Changing the Sensitivity", "Qcodes example with Shamrock SR750", "Example with the microwave source SC5521A from Signal Core", "Example of Signal Recovery 7270 driver usage", "Example for Single Quantum SNSPD", "NANONIS TRAMEA EXAMPLES", "Qcodes example with Standa 10MWA168", "Qcodes example with Swabian Instruments Time Tagger", "Tektronix AFG3000 series arbitrary function generator", "overview over all parameters", "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500", "Qcodes example with Thorlabs K10CR1", "QCoDeS example with Thorlabs KLS1550 laser source", "Qcodes example with Thorlabs MFF10x", "Qcodes example with Thorlabs PRM1Z8", "QCoDeS example with Valon 5015", "Qcodes example for Vaunix LDA step attenuator", "QCoDeS example with Windfreak SynthUSB3", "Rohde &amp; Schwarz ZVL13 Vector Network Analyzer example", "Zurich Instruments HF2LI example", "Examples of how to use drivers", "Welcome to QCoDeS Contributed Drivers\u2019s documentation!"], "titleterms": {"": [78, 111, 112, 113, 136], "100k": 74, "10mwa168": 121, "1d": [97, 111, 120], "2000": 125, "2597": 81, "2d": [84, 86, 97, 98, 105], "311": 77, "4": 60, "4g": 67, "500": 66, "5015": 130, "625": 78, "6430": 74, "7270": 118, "8043": 112, "9258": 63, "THE": 120, "The": [62, 86], "accumul": 61, "acquisit": [61, 133], "activ": 125, "add": 79, "address": [69, 86], "advantech": 1, "afg": 123, "afg3000": [50, 123], "ag": 83, "ag_uc8": 30, "agil": [2, 59], "agilent_n9000a": 2, "aimtti": [3, 60], "alias": 81, "all": [63, 124], "alwai": 67, "amc100": 6, "ametek": 4, "amplitud": 82, "an": [111, 123], "analog": 82, "analyz": [65, 133], "anc300": [6, 62], "anc300sim": 6, "anc350": 6, "anc350lib": 7, "andor": [5, 61], "anm150": 62, "apt": 53, "arbitrari": [88, 123], "arrang": 108, "asrl": 69, "asynchron": 126, "attenu": 131, "attocub": [6, 7, 62], "autosav": 108, "aviosi": [8, 63], "awg": [75, 76], "awg520": 50, "axi": 62, "basic": [86, 111, 132], "bcs10": 24, "befor": 67, "between": 86, "bilt": [9, 73], "bluefor": [10, 60, 64], "branch": 136, "bu2": 61, "buffer": 115, "calibr": [69, 116], "captur": 76, "card": 125, "case": 66, "cc": 53, "center": 70, "certain": 126, "chain": 89, "chang": [86, 115, 116, 128, 129], "channel": [81, 86, 95, 120, 122, 131], "check": [78, 125], "clean": 126, "close": [61, 63, 69, 77, 79, 82, 111, 116, 120, 128, 129, 131, 132], "cm10": 24, "cmts5048": 0, "coil": 67, "commun": 68, "configur": [76, 77, 79], "connect": [65, 66, 79, 81, 107, 111, 117, 118, 120, 125, 132], "constant": [67, 90], "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 136], "contrib": 136, "contribut": 136, "control": [62, 83, 84, 86], "convers": 78, "coppermountain": [11, 65], "core": 117, "cryocon": 12, "cryocon_26": 12, "cryogen": 13, "cryogenicsms120c": 13, "cryostat": 28, "cryoswitchcontrol": 34, "cs580": 47, "current": [78, 86, 116, 128, 129], "curv": 79, "cyromagnet": [66, 67], "d4": 35, "d5a": 35, "daq": [29, 80], "daqanaloginput": 80, "daqanalogoutput": 80, "data": [76, 79], "daylightsolut": 14, "db": [65, 118], "dc": 79, "debug": [91, 107], "dec": 84, "default": 136, "definit": 133, "desir": 67, "detect": 78, "devic": [65, 117, 118], "dg645": 47, "differ": 81, "digit": [76, 125], "diod": [98, 105], "direct": 96, "disconnect": 127, "dll_wrapper": 29, "dmm6500": 125, "do2d": 84, "document": 136, "driver": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67, 82, 84, 85, 86, 110, 118, 135, 136], "dsg3136b": 111, "du401": [5, 61], "el320p": [3, 60], "enqueu": [75, 76], "equip": 62, "erainstru": 15, "erasynth": [15, 68], "exampl": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 106, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "experi": 111, "f1d": 35, "fca3100": 50, "fhr": 72, "fhr_client": 20, "fhr_server": 20, "field": 78, "frequenc": [68, 82], "from": [73, 79, 117], "fsv_3013": 37, "function": [120, 123], "gate": [92, 93, 104], "gener": [75, 76, 82, 88, 95, 123], "generalmicrowav": 16, "gentec": [17, 69], "gentec_maestro": 17, "get": [69, 116, 120, 136], "gm349": 16, "gpib": 66, "h2py": 45, "have": [67, 78], "heater": [60, 77], "helium": 66, "hf2li": [57, 134], "hmc": 112, "hmc8041": 37, "hmc8042": 37, "hmc8043": 37, "hmc804x": 38, "hmp": 38, "hmp2020": 37, "hmp2030": 37, "hmp4030": 37, "hmp4040": [37, 113], "holzworth": [18, 71], "home": 126, "horiba": [19, 20, 72], "horiba_fhr": 19, "how": [87, 106, 109, 135], "hp8594e": 70, "hs900": 18, "hs9008b": 18, "hs900b": 71, "i": [60, 62, 87, 136], "ii": [88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "ilm200": 31, "import": [59, 64, 66, 67, 73, 85], "indic": 136, "initi": [61, 63, 69, 77, 82, 116, 121, 125, 126, 128, 129, 131, 133], "initial": [59, 73], "initialis": [86, 127], "instal": 136, "instrument": [59, 61, 63, 64, 66, 69, 73, 77, 80, 81, 82, 85, 111, 116, 121, 122, 128, 129, 131, 133, 134], "integr": 84, "interfac": 7, "ip": 63, "ip_power_9258": 8, "ips120": 31, "itest": [9, 73], "its": 69, "iv": 79, "ivvi": 35, "k": 60, "k10cr1": [52, 126], "kdc101": 52, "keithlei": [74, 125], "keithley_2000_scan": 50, "keithley_2401": 50, "keithley_2700": 50, "keithley_6430": 50, "keithley_6500": 50, "kelvinox": 31, "keysight": [21, 22, 75, 76], "keysight_e36313a": 21, "keysight_e8267d": 21, "keysight_j7211": 21, "keysight_m3201a": 21, "keysight_m3300a": 21, "kinesi": 53, "kls1550": [52, 127], "l": 53, "label": 65, "lakeshor": [23, 24, 77, 78], "laser": [69, 127], "lda": [55, 131], "leakag": [92, 93], "let": 78, "level": 66, "libphox": 34, "licens": 136, "lighthouse_photonics_sprout_g": 25, "lighthousephoton": 25, "list": 94, "lm": 66, "lm_500": 66, "load": [59, 64, 73, 85], "look": [65, 78], "m1": 79, "m2": 26, "m2_solstis_3": 26, "m2j": 35, "m3202a": [21, 75, 76], "m4i": 44, "m5180": [11, 65], "m81": 79, "m81_ssm": 23, "maestro": 69, "magnet": [67, 78, 84], "main": [124, 136], "make": 67, "mani": 131, "manipul": 108, "measur": [59, 65, 73, 74, 84, 115, 122, 125], "measurer": [65, 118], "memory_manag": 22, "mercuri": 58, "meter": 66, "mff10x": [52, 128], "microwav": 117, "minicircuit": 27, "mircat": 14, "mode": [61, 68, 86, 111, 133], "model": [65, 66, 67, 78, 131], "model_331": 23, "model_4g": 67, "model_625": 23, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 79, 82], "modulebas": 24, "monitor": 108, "montanainstru": 28, "more": [70, 86], "motion": 83, "move": 126, "multifunct": 80, "multimet": 125, "multipl": [86, 93, 95, 102], "n9000a": 59, "name": [65, 81], "nanoni": 120, "nation": [80, 81], "nationalinstru": 29, "network": [65, 133], "newport": [30, 83], "ni": 82, "ni_dll_instru": 29, "non": 115, "notebook": [60, 71, 74], "now": 136, "number": 108, "off": 127, "omega": 74, "one": 86, "other": 78, "output": [86, 123, 127, 132], "over": 124, "overview": [86, 124], "oxford": 85, "oxfordinstru": 31, "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "paramet": [65, 78, 85, 86, 111, 117, 120, 124, 131, 132, 133], "pcie_1751": 1, "per": 95, "perform": [68, 125], "phase": 82, "physik_instrument": 58, "piezo": 83, "plot": [76, 86, 133], "pm100d": 52, "posit": [126, 128, 129], "power": [60, 63, 67, 69, 78, 112, 113, 127], "prepar": 115, "prerequisit": 136, "print": [79, 81], "privat": [20, 38, 49, 53], "prm1z8": [52, 129], "properli": 67, "proteox": [31, 84], "puls": [82, 86], "pxie": 81, "pxie_2597": 29, "pxie_5654": 29, "py_head": 45, "pyvisa": 96, "qcode": [61, 62, 63, 69, 70, 77, 81, 82, 83, 84, 86, 87, 106, 109, 111, 112, 113, 114, 116, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 136], "qcodes_contrib_driv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 66, 67], "qcodes_driv": 34, "qdac": [86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106], "qdac1": 32, "qdac2": 32, "qdac2_arrai": 32, "qdevil": [32, 110], "qdevil_qdac": 86, "qphox": [33, 34], "qswitch": [32, 107, 108, 109], "quantum": 119, "quench": 78, "queri": 125, "qutech": 35, "r": [112, 113], "ramp": [78, 86], "rang": 86, "rate": 78, "read": [63, 69, 77, 79, 86, 115, 128, 129], "readout": 85, "record": 86, "recoveri": 118, "reg": 45, "reset": 86, "resist": 74, "resistor": 74, "resourc": 126, "result": [76, 86], "retriev": 76, "rf": [71, 81, 82], "rfsg": [29, 82], "right": 69, "rigol": [36, 111], "rigol_dp932": 36, "rigol_dsg3136b": 36, "rohd": 133, "rohdeschwarz": [37, 38], "rohe": 114, "rotat": 126, "run": [68, 79, 111], "s3": 79, "s5048": 11, "s5i": 35, "save": 131, "sc5521a": 117, "scan": [61, 86, 97, 98, 105, 111, 125], "schwarz": [114, 133], "sd": 41, "sd_awg": 22, "sd_awg_async": 22, "sd_common": 22, "sd_dig": 22, "sd_modul": 22, "sdg": 41, "sdg_channel": 41, "sdx": 41, "self": 68, "sensebas": 24, "sensit": 115, "sensor": 86, "seri": 123, "set": [63, 67, 68, 69, 70, 73, 86, 111, 117, 120, 127, 131], "setup": [65, 111, 116, 118, 132], "shamrock": [40, 116], "siglent": 41, "signal": [76, 82, 117, 118, 120], "signalcor": 42, "sim928": 47, "simpl": 125, "simultan": 86, "sine": 99, "singl": [61, 86, 119], "singlequantum": 43, "smb100a": 37, "smooth": 86, "smr40": 37, "smu": 74, "smw200a": [37, 114], "smw200asim": 37, "snapshot": [61, 79, 81, 82, 116], "snspd": 119, "socket": 63, "sourc": [117, 127], "sourcebas": 24, "span": 70, "spcerr": 45, "spec": 39, "specs_tramea": 39, "spectromet": 116, "spectrum": [44, 45, 61, 133], "squar": 100, "sr570": 47, "sr750": [40, 116], "sr844": 47, "sr_7270": 4, "stage": 60, "standa": [46, 121], "standa_10mwa168": 46, "stanfordresearchsystem": 47, "start": [70, 136], "state": 132, "station": [65, 79, 118, 133], "statu": 63, "step": [86, 131], "stop": [70, 82], "stream": 79, "submodul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "subpackag": [0, 6, 19, 21, 23, 33, 37, 44, 48, 52], "superconduct": 78, "suppli": [60, 67, 78, 112, 113], "sure": 67, "swabian": 122, "swabian_instruments_time_tagg": 48, "swabianinstru": [48, 49], "sweep": [68, 101, 111], "sweeper": 120, "switch": [29, 81], "sxx": 65, "sync": 86, "synchron": 122, "synchronis": 102, "synthes": 71, "synthusb3": 132, "system": 84, "tabl": 136, "tagger": 122, "take": [61, 82, 116], "tdc001": 52, "tektronix": [50, 123, 125], "temperatur": [77, 86], "termin": 125, "test": [62, 65, 68, 92, 111, 118, 132], "thermotek": 51, "thermotek_t255p": 51, "thi": [60, 66], "thorlab": [52, 53, 126, 127, 128, 129], "through": 120, "time": 122, "time_tagg": 49, "trace": [65, 133], "tramea": 120, "transfer": 70, "triangl": 103, "trigger": [75, 76, 89, 115], "triton": [31, 85], "turn": [63, 68, 127], "two": [62, 124], "type": 70, "uc8": 83, "unit": 67, "up": [111, 126], "upload": 123, "us": [60, 67, 69, 84, 87, 93, 96, 106, 109, 111, 115, 125, 135], "usag": [86, 108, 118, 124], "v3": 7, "v4": 7, "valon": [54, 130], "valon_5015": 54, "valu": [79, 120], "vaunix": [55, 131], "vector": [65, 133], "view": 79, "virtual": [104, 122], "visa": 84, "visa_typ": 29, "vm10": 24, "voltag": [86, 90, 94, 101], "vs10": 24, "warmup": 60, "wave": [99, 100, 103], "waveform": [75, 76, 88, 123], "wavelength": 69, "welcom": 136, "when": 86, "windfreak": [56, 132], "windfreak_synthhd": 56, "windfreak_synthusb3": 56, "you": 67, "zihdawg8": 57, "ztm": 27, "zurich": 134, "zurichinstru": 57, "zvl13": [37, 133]}})